import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as c,c as u,b as r,w as a,a as t,d as s,e as n}from"./app-4nI3UfDF.js";const d="/assets/image-20231214083505664--FCZrLKE.png",k="/assets/image-20231209231442947-gBTYTqlQ.png",m={},b=t('<p>Here&#39;s the translated markdown:</p><hr><h2 id="data-types" tabindex="-1"><a class="header-anchor" href="#data-types" aria-hidden="true">#</a> Data Types</h2><figure><img src="'+d+`" alt="image-20231214105801217" tabindex="0" loading="lazy"><figcaption>image-20231214105801217</figcaption></figure><h2 id="_1-numeric-types-int-float" tabindex="-1"><a class="header-anchor" href="#_1-numeric-types-int-float" aria-hidden="true">#</a> 1. Numeric Types: <code>int</code>, <code>float</code></h2><h3 id="_1-1-code-examples" tabindex="-1"><a class="header-anchor" href="#_1-1-code-examples" aria-hidden="true">#</a> 1.1 Code Examples</h3><ol><li>Integer</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>int_num <span class="token operator">=</span> <span class="token number">1</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;int num type is: &gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Detecting data type directly and outputting&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token number">1</span>
<span class="token builtin">int</span> num <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span>
Detecting data <span class="token builtin">type</span> directly <span class="token keyword">and</span> outputting <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Float</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>float_num <span class="token operator">=</span> <span class="token number">1.1</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>float_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>float_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;float num type is: &gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Detecting data type directly and outputting&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>float_num<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token number">1.1</span>
<span class="token builtin">float</span> num <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;float&#39;</span><span class="token operator">&gt;</span>
Detecting data <span class="token builtin">type</span> directly <span class="token keyword">and</span> outputting <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;float&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-string-str" tabindex="-1"><a class="header-anchor" href="#_2-string-str" aria-hidden="true">#</a> 2. String: <code>str</code></h2><h3 id="_2-1-code-examples" tabindex="-1"><a class="header-anchor" href="#_2-1-code-examples" aria-hidden="true">#</a> 2.1 Code Examples</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&quot;Vervevividness&quot;</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;string type is: &gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Detecting data type directly and outputting&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#output</span>
Vervevividness
string <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>
Detecting data <span class="token builtin">type</span> directly <span class="token keyword">and</span> outputting <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-three-characteristics-of-strings" tabindex="-1"><a class="header-anchor" href="#_2-2-three-characteristics-of-strings" aria-hidden="true">#</a> 2.2 Three Characteristics of Strings</h3><ol><li><p>Order</p><ol><li><p>&quot;Left to right, index starts from 0&quot;;</p></li><li><p>&quot;Right to left, index starts from -1&quot;</p></li><li><p>Anything within quotes counts as an index (even spaces);</p></li></ol></li><li><p>Immutability</p><ol><li><p>Once created, strings cannot be changed;</p></li><li><p><strong>Note⚠️</strong>: Immutability refers to the inability to modify, add, or delete strings during code execution.</p></li></ol></li><li><p>Any Characters:</p><ol><li><p>Any characters that can be entered via the keyboard can be elements of a string.</p></li><li><p>Any character placed within a string becomes a string type (&quot;Each element inside can be called a sub-character&quot;).</p></li></ol></li></ol><h2 id="_3-list" tabindex="-1"><a class="header-anchor" href="#_3-list" aria-hidden="true">#</a> 3. List</h2><h3 id="_3-1-code-examples" tabindex="-1"><a class="header-anchor" href="#_3-1-code-examples" aria-hidden="true">#</a> 3.1 Code Examples</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Vervevividness&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;happy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sad&quot;</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token string">&quot;bones&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;lst type is: &gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Detecting data type directly and outputting: &gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#outcome</span>
<span class="token punctuation">[</span><span class="token string">&#39;Vervevividness&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;happy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sad&#39;</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token string">&#39;bones&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span>
lst <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;list&#39;</span><span class="token operator">&gt;</span>
Detecting data <span class="token builtin">type</span> directly <span class="token keyword">and</span> outputting<span class="token punctuation">:</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;list&#39;</span><span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-three-characteristics-of-lists" tabindex="-1"><a class="header-anchor" href="#_3-2-three-characteristics-of-lists" aria-hidden="true">#</a> 3.2 Three Characteristics of Lists</h3><ol><li><p>Order</p><ol><li><p>&quot;Left to right, index starts from 0&quot;;</p></li><li><p>&quot;Right to left, index starts from -1&quot;</p></li><li><p>Each element in the list counts as one;</p><p>eg. <code>lst = [&quot;Hello&quot;, 31]</code>;</p><ol><li><p><code>Hello</code> is index 0 (left to right) and -2 (right to left);</p></li><li><p><code>31</code> is index 1 (left to right) and -1 (right to left);</p></li></ol></li></ol></li><li><p>Mutability: Lists can be &quot;added to, deleted from, or modified&quot; during program execution.</p></li><li><p>Any Data Type: Note⚠️, here &quot;any data type&quot; refers to the data types Python possesses;</p></li></ol><details class="hint-container details"><summary>Data Types Python Possesses &quot;Below includes only basic types&quot;</summary><figure><img src="`+k+`" alt="image-20231216151405069" tabindex="0" loading="lazy"><figcaption>image-20231216151405069</figcaption></figure></details><h2 id="_4-tuple" tabindex="-1"><a class="header-anchor" href="#_4-tuple" aria-hidden="true">#</a> 4. Tuple</h2><h3 id="_4-1-code-examples" tabindex="-1"><a class="header-anchor" href="#_4-1-code-examples" aria-hidden="true">#</a> 4.1 Code Examples</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;tup type is :&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Detecting data type directly and outputting:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
tup <span class="token builtin">type</span> <span class="token keyword">is</span> <span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;tuple&#39;</span><span class="token operator">&gt;</span>
Detecting data <span class="token builtin">type</span> directly <span class="token keyword">and</span> outputting<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;tuple&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>Order</p><ol><li><p>&quot;Left to right, index starts from 0&quot;;</p></li><li><p>&quot;Right to left, index starts from -1&quot;</p></li><li><p>Each element in the tuple counts as one;</p><p>eg. <code>lst = [&quot;Hello&quot;, 31]</code>; has two elements</p><ol><li><p><code>Hello</code> is index 0 (left to right) and -2 (right to left);</p></li><li><p><code>31</code> is index 1 (left to right) and -1 (right to left);</p></li></ol></li></ol></li><li><p>Immutability</p><ol><li><p>Once created, tuples cannot be changed;</p></li><li><p>Note⚠️: Immutability refers to the inability to modify, add, or delete tuples during code execution;</p></li></ol></li><li><p>Any Data Type: Note⚠️, here &quot;data type&quot; refers to the data types Python possesses.</p></li></ol><h2 id="_5-exploration👀-of-lists-tuples" tabindex="-1"><a class="header-anchor" href="#_5-exploration👀-of-lists-tuples" aria-hidden="true">#</a> 5. Exploration👀 of Lists &amp; Tuples</h2><div class="hint-container info"><p class="hint-container-title">Why🧐 Lists and Tuples?</p><p>Which one should we use, lists or tuples?</p></div><ol><li>If the data or quantity to be stored is changeable, like a log feature on a social platform that tracks which posts a user viewed within a week—lists would be more suitable.</li><li>If the data and quantity remain unchanged, like a system (software) that needs to return the latitude and longitude of a location directly to the user—definitely tuples are more suitable.</li></ol><ul><li><p><strong>Assumptions</strong></p><ul><li>Assumption 1: There&#39;s a warehouse where you want to add items. The warehouse is large, and there might or might not be space available. Would you need to hire a warehouse manager so you can ask if there&#39;s space available? The warehouse manager keeps track of the warehouse&#39;s status;</li><li>Assumption 2: Now, there&#39;s a warehouse for atomic bombs. Once created, it can only store one bomb. Do we need someone to track the status of the atomic bomb warehouse? No need, it&#39;d be a waste of resources.</li></ul></li><li><p><strong>Why?</strong></p><ul><li>User logs📔—will they keep changing (recording which posts were viewed)? We need someone like a warehouse manager to track and know if there&#39;s space and where to add. Lists are more suitable because they are mutable. &quot;Mutable means: adding, deleting, or modifying&quot;; <ul><li>Why not tuples? Every time you want to add data, you&#39;d need to recreate a new tuple (similar to creating a warehouse for an atomic bomb, just enough for one</li></ul></li></ul></li></ul><p>; when you want to store two, you need to create a new warehouse). - Will latitude and longitude change? Obviously not, so we don&#39;t need an extra person to track the status. Lists could work, but it&#39;s unnecessary. &quot;Because we don&#39;t need a warehouse manager,&quot; tuples are just enough. - <strong><span style="color:orange;">We emphasize: not wasting, just using what&#39;s suitable.</span></strong></p><h2 id="_6-dictionary-dict" tabindex="-1"><a class="header-anchor" href="#_6-dictionary-dict" aria-hidden="true">#</a> 6. Dictionary: <code>dict</code></h2><h3 id="_6-1-code-examples" tabindex="-1"><a class="header-anchor" href="#_6-1-code-examples" aria-hidden="true">#</a> 6.1 Code Examples</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Cindy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">,</span> <span class="token number">1.1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;tup&quot;</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;d type is :&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Detecting data type directly and outputting:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Cindy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;tup&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
d <span class="token builtin">type</span> <span class="token keyword">is</span> <span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;dict&#39;</span><span class="token operator">&gt;</span>
Detecting data <span class="token builtin">type</span> directly <span class="token keyword">and</span> outputting<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;dict&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-characteristics-of-dictionary" tabindex="-1"><a class="header-anchor" href="#_6-2-characteristics-of-dictionary" aria-hidden="true">#</a> 6.2 Characteristics of Dictionary</h3><ol><li>Unordered</li><li>Composition: Comprised of a series of key-value pairs. <code>d = {&quot;key1&quot;:&quot;value1,&quot;key2&quot;:&quot;value2&quot;.....}</code></li><li>Key: <ol><li>Only immutable data types can be dictionary keys;</li><li>Examples: strings, numbers, booleans, tuples;</li></ol></li><li>Value: Any data type Python possesses;</li><li>Mutability: Keys and values can be added, modified, or deleted.</li></ol><h2 id="_7-set" tabindex="-1"><a class="header-anchor" href="#_7-set" aria-hidden="true">#</a> 7. Set</h2><h3 id="_7-1-code-examples" tabindex="-1"><a class="header-anchor" href="#_7-1-code-examples" aria-hidden="true">#</a> 7.1 Code Examples</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Cindy&quot;</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">}</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;set1 type is :&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Detecting data type directly and outputting:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token punctuation">{</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;Cindy&#39;</span><span class="token punctuation">}</span>
set1 <span class="token builtin">type</span> <span class="token keyword">is</span> <span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;set&#39;</span><span class="token operator">&gt;</span>
Detecting data <span class="token builtin">type</span> directly <span class="token keyword">and</span> outputting<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;set&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-characteristics-of-set" tabindex="-1"><a class="header-anchor" href="#_7-2-characteristics-of-set" aria-hidden="true">#</a> 7.2 Characteristics of Set</h3><ol><li><p>Unordered: Sets have no order, no index;</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Cindy&quot;</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token punctuation">{</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;Cindy&#39;</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Even if you run sets multiple times or once, if the order doesn&#39;t change, we cannot claim sets are ordered.</p><p>Why? If you roll a die 500 times and get a 6 every time, can you say rolling a die is a deterministic event? Clearly not 🙅.</p></div><ol start="2"><li><p>Deterministic:</p><ol><li>Each value in a set is definite; &quot;this requires immutable data types&quot;</li><li>Examples: numeric types, booleans, tuples, strings</li><li>For example🌰: Lists are mutable, so not suitable🙅</li></ol></li></ol>`,42),g=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("set1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("set1"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"#outut"),s(`
Traceback `),n("span",{class:"token punctuation"},"("),s("most recent call last"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
  File `),n("span",{class:"token string"},'"/Users/wangruoyihan/PycharmProjects/pythonProject/python 11.12.py"'),n("span",{class:"token punctuation"},","),s(" line "),n("span",{class:"token number"},"63"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token operator"},"<"),s("module"),n("span",{class:"token operator"},">"),s(`
    set1 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}"),s(`
           `),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"^"),s(`
TypeError`),n("span",{class:"token punctuation"},":"),s(" unhashable "),n("span",{class:"token builtin"},"type"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},"'list'"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=t(`<ol start="3"><li>Uniqueness: Repeated items are automatically removed;</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>

<span class="token comment">#{1,2}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Mutability: Sets can have data added or removed, but output modification isn&#39;t possible. &quot;Note⚠️: Deletion doesn&#39;t allow specifying an index to delete an element.&quot;</li></ol><h2 id="_8-boolean-bool" tabindex="-1"><a class="header-anchor" href="#_8-boolean-bool" aria-hidden="true">#</a> 8. Boolean: <code>bool</code></h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>condition <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token boolean">True</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;bool&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function v(y,f){const e=i("CodeTabs");return c(),u("div",null,[b,r(e,{id:"392",data:[{id:"Mutable Test"}]},{title0:a(({value:p,isActive:o})=>[s("Mutable Test")]),tab0:a(({value:p,isActive:o})=>[g]),_:1}),h])}const x=l(m,[["render",v],["__file","02-introduction-to-data.html.vue"]]);export{x as default};
