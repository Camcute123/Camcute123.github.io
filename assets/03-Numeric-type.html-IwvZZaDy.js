import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as l,c as d,b as c,w as a,a as o,d as s,e as n}from"./app-xY0mnQCY.js";const u="/assets/image-20231212075658808-f4M9iRSp.png",k={},m=o('<p>Here&#39;s the translated markdown:</p><hr><h2 id="_1-characteristics-of-numeric-types" tabindex="-1"><a class="header-anchor" href="#_1-characteristics-of-numeric-types" aria-hidden="true">#</a> 1. Characteristics of Numeric Types</h2><figure><img src="'+u+`" alt="image-20231216151331535" tabindex="0" loading="lazy"><figcaption>image-20231216151331535</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span>
Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>

In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1.0</span>
Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2.0</span>

In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span>
Out<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span>

In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1.0</span>
Out<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1.0</span>

In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span>
Out<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span>

In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">*</span> <span class="token number">2.0</span>
Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4.0</span>

In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token operator">/</span><span class="token number">3</span>
Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3.0</span>

<span class="token comment"># The result is a float if one of the elements is a float, with the highest precedence.</span>

<span class="token comment"># Division involves precision issues, resulting in a float.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-arithmetic-operators" tabindex="-1"><a class="header-anchor" href="#_2-arithmetic-operators" aria-hidden="true">#</a> 2. Arithmetic Operators</h2><p><strong>Arithmetic Operators:</strong> Used for arithmetic calculations.</p><table><thead><tr><th>Operator</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>+</code></td><td>Addition Operator</td><td><code>1 + 1 = 2</code></td></tr><tr><td><code>-</code></td><td>Subtraction Operator</td><td><code>2 - 1 = 1</code></td></tr><tr><td><code>*</code></td><td>Multiplication Operator</td><td><code>2 * 3 = 6</code></td></tr><tr><td><code>/</code></td><td>Division Operator</td><td><code>9 / 3 = 3.0</code></td></tr><tr><td><code>**</code></td><td>Exponentiation Operator</td><td><code>2 ** 3 = 8</code></td></tr><tr><td><code>%</code></td><td>Modulus Operator, calculates remainder</td><td><code>9 % 2 = 1</code></td></tr><tr><td><code>//</code></td><td>Floor Division Operator, calculates quotient without remainder</td><td><code>9 // 2 = 4</code></td></tr></tbody></table><blockquote><p>Tip: 9 / 2 = 4......1</p></blockquote><h2 id="_3-trying-it-out-number-transformation" tabindex="-1"><a class="header-anchor" href="#_3-trying-it-out-number-transformation" aria-hidden="true">#</a> 3. Trying It Out: Number Transformation</h2><p>Imagine you have a two-digit integer, and we need to generate two new numbers based on the following rules:</p><ul><li>The first new number is the sum of the individual digits of the original number.</li><li>The second new number is the reverse of the original number (e.g., for 21, the reversed number is 12).</li></ul><p>Write Python code to fulfill these requirements.</p><p><strong>Input:</strong></p><p>An integer <code>num</code> (10 ≤ num ≤ 99)</p><p><strong>Output:</strong></p><p>Two integers or an error message string.</p><p><strong>Example:</strong></p><p>Suppose the input number <code>num</code> is 91. Then your code should output two numbers: 10 (the sum of 9 and 1) and 19 (the reversal of 91).</p><p>Suppose the input number <code>num</code> is 26. Then your code should output two numbers: 8 (the sum of 2 and 6) and 62 (the reversal of 26).</p><p>Suppose the input number <code>num</code> is 18. Then your code should output two numbers: 9 (the sum of 1 and 8) and 81 (the reversal of 18).</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token number">91</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">+</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> num <span class="token operator">//</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">#output</span>
<span class="token number">10</span>
<span class="token number">19</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-comparison-operators-comparing-values" tabindex="-1"><a class="header-anchor" href="#_4-comparison-operators-comparing-values" aria-hidden="true">#</a> 4. Comparison Operators: Comparing Values</h2><table><thead><tr><th>Operator</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td>Checks if the first operand is greater than the second</td><td><code>print(1 &gt; 2)</code></td></tr><tr><td><code>&lt;</code></td><td>Checks if the first operand is less than the second</td><td><code>print(1 &lt; 2)</code></td></tr><tr><td><code>&gt;=</code></td><td>Checks if the first operand is greater than or equal to the second</td><td><code>print(3 &gt;= 3)</code></td></tr><tr><td><code>&lt;=</code></td><td>Checks if the first operand is less than or equal to the second</td><td><code>print(3 &lt;= 4)</code></td></tr><tr><td><code>==</code></td><td>Checks if two operands are equal</td><td><code>print(2 == 2)</code></td></tr><tr><td><code>!=</code></td><td>Checks if two operands are not equal</td><td><code>print(2 != 1)</code></td></tr></tbody></table><blockquote><p>Try the above examples and see the resulting outputs.</p></blockquote>`,25),b=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},">="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},"#output"),s(`
`),n("span",{class:"token boolean"},"False"),s(`
`),n("span",{class:"token boolean"},"True"),s(`
`),n("span",{class:"token boolean"},"True"),s(`
`),n("span",{class:"token boolean"},"True"),s(`
`),n("span",{class:"token boolean"},"True"),s(`
`),n("span",{class:"token boolean"},"True"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=o('<h2 id="_5-assignment-operators" tabindex="-1"><a class="header-anchor" href="#_5-assignment-operators" aria-hidden="true">#</a> 5. Assignment Operators</h2><table><thead><tr><th>Operator</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>=</code></td><td>Assigns the value on the right-hand side to the left-hand side</td><td><code>a = 1</code></td></tr><tr><td><code>+=</code></td><td><code>a += b</code> is equivalent to <code>a = a + b</code></td><td><code>a += 10</code></td></tr><tr><td><code>-=</code></td><td><code>a -= b</code> is equivalent to <code>a = a - b</code></td><td><code>a -= 10</code></td></tr><tr><td><code>*=</code></td><td><code>a *= b</code> is equivalent to <code>a = a * b</code></td><td><code>a *= 10</code></td></tr><tr><td><code>/=</code></td><td><code>a /= b</code> is equivalent to <code>a = a / b</code></td><td><code>a /= 10</code></td></tr><tr><td><code>**=</code></td><td><code>a **= b</code> is equivalent to <code>a = a ** b</code></td><td><code>a **= 10</code></td></tr><tr><td><code>//=</code></td><td><code>a //= b</code> is equivalent to <code>a = a // b</code></td><td><code>a //= 10</code></td></tr></tbody></table>',2),h=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# Assignment Operators"),s(`
a `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
a `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"10"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token comment"},"#11"),s(`
`),n("span",{class:"token comment"},"# Regular notation"),s(`
a `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
a `),n("span",{class:"token operator"},"="),s(" a "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"10"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token comment"},"#11"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=o(`<h4 id="_7-3-1-sum-and-difference-of-numbers" tabindex="-1"><a class="header-anchor" href="#_7-3-1-sum-and-difference-of-numbers" aria-hidden="true">#</a> 7.3.1 Sum and Difference of Numbers:</h4><p>Write Python code that creates two numbers <code>a</code> and <code>b</code>, calculates and prints their sum and the result of <code>a</code> subtracted from <code>b</code>.</p><p><strong>Code Template</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">10</span>
b <span class="token operator">=</span> <span class="token number">12</span>
sum_result <span class="token operator">=</span> a <span class="token operator">+</span> b
difference <span class="token operator">=</span> a <span class="token operator">-</span> b
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Sum: &quot;</span><span class="token punctuation">,</span> sum_result<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Difference: &quot;</span><span class="token punctuation">,</span> difference<span class="token punctuation">)</span>
<span class="token comment"># Test</span>
<span class="token keyword">assert</span> sum_result <span class="token operator">==</span> a <span class="token operator">+</span> b
<span class="token keyword">assert</span> difference <span class="token operator">==</span> a <span class="token operator">-</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Output Example:</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Sum<span class="token punctuation">:</span> <span class="token number">8</span>
Difference<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-2-multiplication-and-division-of-numbers" tabindex="-1"><a class="header-anchor" href="#_7-3-2-multiplication-and-division-of-numbers" aria-hidden="true">#</a> 7.3.2 Multiplication and Division of Numbers</h4><p>Write Python code that creates two numbers <code>x</code> and <code>y</code>, calculates and prints their product and the result of <code>x</code> divided by <code>y</code>.</p><p><strong>Code Template</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">3</span>
y <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Product: &quot;</span><span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Division: &quot;</span><span class="token punctuation">,</span> x <span class="token operator">/</span> y<span class="token punctuation">)</span>

<span class="token comment"># Test</span>
<span class="token keyword">assert</span> product <span class="token operator">==</span> x <span class="token operator">*</span> y
<span class="token keyword">assert</span> division <span class="token operator">==</span> x <span class="token operator">/</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Output Example:</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Product<span class="token punctuation">:</span> <span class="token number">12</span>
Division<span class="token punctuation">:</span> <span class="token number">0.75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-3-modulus-and-exponentiation" tabindex="-1"><a class="header-anchor" href="#_7-3-3-modulus-and-exponentiation" aria-hidden="true">#</a> 7.3.3 Modulus and Exponentiation</h4><p>Write Python code that creates two numbers <code>m</code> and <code>n</code>, calculates and prints <code>m</code> modulo <code>n</code> and <code>m</code> raised to the power of <code>n</code>.</p><p><strong>Code Template</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>m <span class="token operator">=</span> <span class="token number">3</span>
n <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Modulus: &quot;</span><span class="token punctuation">,</span> m <span class="token operator">%</span> n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Power: &quot;</span><span class="token punctuation">,</span> m <span class="token operator">**</span> n<span class="token punctuation">)</span>

<span class="token comment"># Test</span>
<span class="token keyword">assert</span> remainder <span class="token operator">==</span> m <span class="token operator">%</span> n
<span class="token keyword">assert</span> power <span class="token operator">==</span> m <span class="token operator">**</span> n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Output Example:</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Modulus<span class="token punctuation">:</span> <span class="token number">3</span>
Power<span class="token punctuation">:</span> <span class="token number">81</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-4-comparison-operation" tabindex="-1"><a class="header-anchor" href="#_7-3-4-comparison-operation" aria-hidden="true">#</a> 7.3.4 Comparison Operation</h4><p>Write Python code that takes two numbers <code>p</code> and <code>q</code> as input, compares them, and prints the respective comparison result (greater than, less than, equal to).</p><p><strong>Code Template</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>p <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter an integer: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter the second integer: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> p <span class="token operator">&gt;</span> q<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token string"> is greater than </span><span class="token interpolation"><span class="token punctuation">{</span>q<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> p <span class="token operator">&gt;</span> q
<span class="token keyword">elif</span> p <span class="token operator">&lt;</span> q<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token string"> is less than </span><span class="token interpolation"><span class="token punctuation">{</span>q<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> p <span class="token operator">&lt;</span> q
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token string"> is equal to </span><span class="token interpolation"><span class="token punctuation">{</span>q<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> p <span class="token operator">==</span> q

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Output Example:</strong></p>`,23);function y(f,w){const p=r("CodeTabs");return l(),d("div",null,[m,c(p,{id:"253",data:[{id:"Code Examples"}]},{title0:a(({value:e,isActive:t})=>[s("Code Examples")]),tab0:a(({value:e,isActive:t})=>[b]),_:1}),v,c(p,{id:"355",data:[{id:"Code Examples"}]},{title0:a(({value:e,isActive:t})=>[s("Code Examples")]),tab0:a(({value:e,isActive:t})=>[h]),_:1}),g])}const _=i(k,[["render",y],["__file","03-Numeric-type.html.vue"]]);export{_ as default};
