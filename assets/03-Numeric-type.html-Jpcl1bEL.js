import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as i,c as r,b as c,w as a,a as o,d as s,e as n}from"./app-lw52lRVx.js";const u="/assets/image-20231212075658808-f4M9iRSp.png",k={},m=o('<h2 id="_1-数字型的特点" tabindex="-1"><a class="header-anchor" href="#_1-数字型的特点" aria-hidden="true">#</a> 1.数字型的特点</h2><figure><img src="'+u+`" alt="image-20231212075658808" tabindex="0" loading="lazy"><figcaption>image-20231212075658808</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span>
Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>

In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1.0</span>
Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2.0</span>

In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span>
Out<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span>

In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1.0</span>
Out<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1.0</span>

In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span>
Out<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span>

In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">*</span> <span class="token number">2.0</span>
Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4.0</span>

In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token operator">/</span><span class="token number">3</span>
Out<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3.0</span>

<span class="token comment">#如果其中有一个元素是浮点数的话，最后的结果就是浮点数「优先级最高」</span>

<span class="token comment">#除法涉及精度问题，所以最后得到浮点数。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-算数运算符" tabindex="-1"><a class="header-anchor" href="#_2-算数运算符" aria-hidden="true">#</a> 2.算数运算符</h2><p><strong>算术运算符：</strong> 用于算术计算。</p><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法运算符</td><td><code>1 + 1 = 2</code></td></tr><tr><td><code>-</code></td><td>减法运算符</td><td><code>2 - 1 = 1</code></td></tr><tr><td><code>*</code></td><td>乘法运算符</td><td><code>2 * 3 = 6</code></td></tr><tr><td><code>/</code></td><td>除法运算符</td><td><code>9 / 3 = 3.0</code></td></tr><tr><td><code>**</code></td><td>指数运算符</td><td><code>2 ** 3 = 8</code></td></tr><tr><td><code>%</code></td><td>取余运算符，计算余数</td><td><code>9 % 2 = 1</code></td></tr><tr><td><code>//</code></td><td>除法取整运算符，计算商并去除其小数部分</td><td><code>9 // 2 = 4</code></td></tr></tbody></table><blockquote><p>tips: 9 / 2 = 4......1</p></blockquote><h2 id="_3-小试牛刀-数字变换" tabindex="-1"><a class="header-anchor" href="#_3-小试牛刀-数字变换" aria-hidden="true">#</a> 3. 小试牛刀：数字变换</h2><p>假设你有一个两位的整数，我们需要通过以下规则产生两个新的数字：</p><ul><li>第一个新数字是原数字的两位数中的各个数字的和；</li><li>第二个新数字是原数字的反转（如原数字为 21，反转后的数字为 12）。</li></ul><p>请你编写 Python 代码，实现以上要求。</p><p><strong>输入：</strong></p><p>一个整数 <code>num</code> （10 ≤ num ≤ 99）</p><p><strong>输出：</strong></p><p>两个整数，或者一个错误信息字符串。</p><p><strong>示例：</strong></p><p>假设输入的数字 <code>num</code> 为 91，那么你的代码应当输出两个数字：10（9和1的和）和19（91的反转）。</p><p>假设输入的数字 <code>num</code> 为 26，那么你的代码应当输出两个数字：8（2和6的和）和62（26的反转）。</p><p>假设输入的数字 <code>num</code> 为 18，那么你的代码应当输出两个数字：9（1和8的和）和81（18的反转）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token number">91</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">+</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> num <span class="token operator">//</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">#output</span>
<span class="token number">10</span>
<span class="token number">19</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-比较运算符-比较值的大小" tabindex="-1"><a class="header-anchor" href="#_4-比较运算符-比较值的大小" aria-hidden="true">#</a> 4.比较运算符：比较值的大小</h2><h2 id="_4-比较运算符-比较值的大小-1" tabindex="-1"><a class="header-anchor" href="#_4-比较运算符-比较值的大小-1" aria-hidden="true">#</a> 4. 比较运算符：比较值的大小</h2><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td>判断第一个运算对象是否大于第二个运算对象</td><td><code>print(1 &gt; 2)</code></td></tr><tr><td><code>&lt;</code></td><td>判断第一个运算对象是否小于第二个运算对象</td><td><code>print(1 &lt; 2)</code></td></tr><tr><td><code>&gt;=</code></td><td>判断第一个运算对象是否大于或等于第二个运算对象</td><td><code>print(3 &gt;= 3)</code></td></tr><tr><td><code>&lt;=</code></td><td>判断第一个运算对象是否小于或等于第二个运算对象</td><td><code>print(3 &lt;= 4)</code></td></tr><tr><td><code>==</code></td><td>判断两个运算对象是否相同</td><td><code>print(2 == 2)</code></td></tr><tr><td><code>!=</code></td><td>判断两个运算对象是否不相同</td><td><code>print(2 != 1)</code></td></tr></tbody></table><blockquote><p>试一试上面的例子，看看会输出上面结果？</p></blockquote>`,24),b=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},">="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},"#output"),s(`
`),n("span",{class:"token boolean"},"False"),s(`
`),n("span",{class:"token boolean"},"True"),s(`
`),n("span",{class:"token boolean"},"True"),s(`
`),n("span",{class:"token boolean"},"True"),s(`
`),n("span",{class:"token boolean"},"True"),s(`
`),n("span",{class:"token boolean"},"True"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=o('<h2 id="_5-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_5-赋值运算符" aria-hidden="true">#</a> 5. 赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td><code>=</code></td><td>把右侧的运算对象赋值给左侧的运算对象</td><td><code>a = 1</code></td></tr><tr><td><code>+=</code></td><td><code>a += b</code> 等同于 <code>a = a + b</code></td><td><code>a += 10</code></td></tr><tr><td><code>-=</code></td><td><code>a -= b</code> 等同于 <code>a = a - b</code></td><td><code>a -= 10</code></td></tr><tr><td><code>*=</code></td><td><code>a *= b</code> 等同于 <code>a = a * b</code></td><td><code>a *= 10</code></td></tr><tr><td><code>/=</code></td><td><code>a /= b</code> 等同于 <code>a = a / b</code></td><td><code>a /= 10</code></td></tr><tr><td><code>**=</code></td><td><code>a **= b</code> 等同于 <code>a = a ** b</code></td><td><code>a **= 10</code></td></tr><tr><td><code>//=</code></td><td><code>a //= b</code> 等同于 <code>a = a // b</code></td><td><code>a //= 10</code></td></tr></tbody></table>',2),h=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"#赋值运算符"),s(`
a `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
a `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"10"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token comment"},"#11"),s(`
`),n("span",{class:"token comment"},"#常规形式"),s(`
a `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`
a `),n("span",{class:"token operator"},"="),s(" a "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"10"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token comment"},"#11"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=o(`<h4 id="_7-3-1-数字和与差" tabindex="-1"><a class="header-anchor" href="#_7-3-1-数字和与差" aria-hidden="true">#</a> 7.3.1 数字和与差：</h4><p>编写一段 Python 代码，创建两个数字 <code>a</code> 和 <code>b</code>，计算并打印出它们的和以及 <code>a</code> 减去 <code>b</code> 的结果。</p><p><strong>代码模版</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">10</span>
b <span class="token operator">=</span> <span class="token number">12</span>
sum_result <span class="token operator">=</span> a <span class="token operator">+</span> b
difference <span class="token operator">=</span> a <span class="token operator">-</span> b
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;sum: &quot;</span><span class="token punctuation">,</span> sum_result<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;dofference: &quot;</span><span class="token punctuation">,</span> difference<span class="token punctuation">)</span>
<span class="token comment"># 测试</span>
<span class="token keyword">assert</span> sum_result <span class="token operator">==</span> a <span class="token operator">+</span> b
<span class="token keyword">assert</span> difference <span class="token operator">==</span> a <span class="token operator">-</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出示例：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Sum<span class="token punctuation">:</span> <span class="token number">8</span>
Difference<span class="token punctuation">:</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-2-数字的乘法和除法" tabindex="-1"><a class="header-anchor" href="#_7-3-2-数字的乘法和除法" aria-hidden="true">#</a> 7.3.2 数字的乘法和除法</h4><p>编写一段 Python 代码，创建两个数字 <code>x</code> 和 <code>y</code>，计算并打印出它们的乘积和除法结果。</p><p><strong>代码模版</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">3</span>
y <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;product: &quot;</span><span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;division: &quot;</span><span class="token punctuation">,</span> x <span class="token operator">/</span> y<span class="token punctuation">)</span>

<span class="token comment"># 测试</span>
<span class="token keyword">assert</span> product <span class="token operator">==</span> x <span class="token operator">*</span> y
<span class="token keyword">assert</span> division <span class="token operator">==</span> x <span class="token operator">/</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出示例：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Product<span class="token punctuation">:</span> <span class="token number">12</span>
Division<span class="token punctuation">:</span> <span class="token number">3.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-3-求余和幂运算" tabindex="-1"><a class="header-anchor" href="#_7-3-3-求余和幂运算" aria-hidden="true">#</a> 7.3.3 求余和幂运算</h4><p>编写一段 Python 代码，创建两个数字 <code>m</code> 和 <code>n</code>，计算并打印出 <code>m</code> 对 <code>n</code> 取余的结果和 <code>m</code> 的 <code>n</code> 次幂。</p><p><strong>代码模版</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>m <span class="token operator">=</span> <span class="token number">3</span>
n <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Remainder: &quot;</span><span class="token punctuation">,</span> m<span class="token operator">%</span>n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Power: &quot;</span><span class="token punctuation">,</span> m<span class="token operator">**</span>n<span class="token punctuation">)</span>

<span class="token comment"># 测试</span>
<span class="token keyword">assert</span> remainder <span class="token operator">==</span> m <span class="token operator">%</span> n
<span class="token keyword">assert</span> power <span class="token operator">==</span> m <span class="token operator">**</span> n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出示例：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Remainder<span class="token punctuation">:</span> <span class="token number">1</span>
Power<span class="token punctuation">:</span> <span class="token number">81</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-4-比较运算" tabindex="-1"><a class="header-anchor" href="#_7-3-4-比较运算" aria-hidden="true">#</a> 7.3.4 比较运算</h4><p>编写一段 Python 代码，输入两个数字 <code>p</code> 和 <code>q</code>，比较它们的大小并打印出相应的比较结果（大于、小于、等于）。</p><p><strong>代码模版</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
p <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;please enter a integer: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;please enter the second integer: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> p <span class="token operator">&gt;</span> q<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token string"> is greater than </span><span class="token interpolation"><span class="token punctuation">{</span>q<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> p <span class="token operator">&gt;</span> q
<span class="token keyword">elif</span> p <span class="token operator">&lt;</span> q<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token string"> is less than </span><span class="token interpolation"><span class="token punctuation">{</span>q<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> p <span class="token operator">&lt;</span> q
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token string"> is equal to </span><span class="token interpolation"><span class="token punctuation">{</span>q<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> p <span class="token operator">==</span> q

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出示例：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">4</span> <span class="token keyword">is</span> less than <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,24);function y(_,f){const p=d("CodeTabs");return i(),r("div",null,[m,c(p,{id:"252",data:[{id:"代码示例"}]},{title0:a(({value:e,isActive:t})=>[s("代码示例")]),tab0:a(({value:e,isActive:t})=>[b]),_:1}),v,c(p,{id:"354",data:[{id:"代码示例"}]},{title0:a(({value:e,isActive:t})=>[s("代码示例")]),tab0:a(({value:e,isActive:t})=>[h]),_:1}),g])}const x=l(k,[["render",y],["__file","03-Numeric-type.html.vue"]]);export{x as default};
