import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as c,c as l,b as u,w as a,a as r,d as s,e as n}from"./app-D1YQytNf.js";const k={},d=r(`<h2 id="question-01-find-the-missing-number" tabindex="-1"><a class="header-anchor" href="#question-01-find-the-missing-number" aria-hidden="true">#</a> Question 01: Find the Missing Number</h2><p>Acquire user input, where the user inputs a specific list. This list consists of consecutive numerical elements. However, one number is missing. Please write a program to find the missing number without using any built-in functions.</p><p>Sample Test 1:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Enter the <span class="token builtin">list</span> of numbers<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span>
The missing number <span class="token keyword">is</span> <span class="token number">5.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Sample Test 2:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Enter the <span class="token builtin">list</span> of numbers<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span>
The missing number <span class="token keyword">is</span> <span class="token number">3.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user_number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter a list of continuous numbers: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
lst_number <span class="token operator">=</span> user_number<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
<span class="token comment">## </span>
lst_number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> lst_number<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lst_number<span class="token punctuation">)</span>
total_number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>lst_number<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    total_number<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>total_number<span class="token punctuation">)</span>
missing_number <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>total_number<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>lst_number<span class="token punctuation">)</span>
<span class="token keyword">for</span> missing_number <span class="token keyword">in</span> missing_number<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;the number </span><span class="token interpolation"><span class="token punctuation">{</span>missing_number<span class="token punctuation">}</span></span><span class="token string"> is missing.&quot;</span></span><span class="token punctuation">)</span>
   
 <span class="token comment">#---output---</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
the number <span class="token number">3</span> <span class="token keyword">is</span> missing<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 用户输入的数字序列</span>
user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;Please enter a series of numbers separated by commas:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 将字符串转换为整数列表</span>
numbers_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> user_input<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 从列表中提取旋转次数和剩余的数字</span>
<span class="token comment"># *rotating_elements, rotation_count = numbers</span>
rotating_elements<span class="token punctuation">,</span> rotation_count <span class="token operator">=</span> numbers_list<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> numbers_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment"># 执行左旋转操作</span>
rotated_list <span class="token operator">=</span> rotating_elements<span class="token punctuation">[</span>rotation_count<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> rotating_elements<span class="token punctuation">[</span><span class="token punctuation">:</span>rotation_count<span class="token punctuation">]</span>
<span class="token comment"># 输出结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;List </span><span class="token interpolation"><span class="token punctuation">{</span>rotating_elements<span class="token punctuation">}</span></span><span class="token string"> after </span><span class="token interpolation"><span class="token punctuation">{</span>rotation_count<span class="token punctuation">}</span></span><span class="token string"> left rotations: </span><span class="token interpolation"><span class="token punctuation">{</span>rotated_list<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="question-03-shallow-copy-verification" tabindex="-1"><a class="header-anchor" href="#question-03-shallow-copy-verification" aria-hidden="true">#</a> Question 03: Shallow Copy Verification</h2><p>Demonstrate shallow copying of a list and show how it differs from a deep copy.</p><p>浅拷贝：复制一个列表（但不会创建一个新的，也就是说id是和所复制的列表完全相同的）</p><p>所存在的问题时，当一个列表中嵌套了另一个列表，就无法实现复制。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Demonstrating shallow copying and deep copying in Python</span>

<span class="token comment"># Original list</span>
original_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment"># Shallow copy of the list</span>
shallow_copy <span class="token operator">=</span> original_list<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Deep copy of the list</span>
<span class="token keyword">import</span> copy
deep_copy <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>original_list<span class="token punctuation">)</span>

<span class="token comment"># Altering the original list to show the difference</span>
original_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;X&#39;</span>

<span class="token comment"># Displaying the original list, shallow copy, and deep copy to illustrate the differences</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Original:&quot;</span><span class="token punctuation">,</span> original_list<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Shallow Copy:&quot;</span><span class="token punctuation">,</span> shallow_copy<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Deep Copy:&quot;</span><span class="token punctuation">,</span> deep_copy<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-04-list-to-string-conversion" tabindex="-1"><a class="header-anchor" href="#question-04-list-to-string-conversion" aria-hidden="true">#</a> <a href="#question-04-list-to-string-conversion">#</a> Question 04: List to String Conversion</h2><p>Obtain a user-input list and a specific delimiter, and concatenate the items in the user-input list into a string using the specified delimiter.</p><p>Sample Test 1:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Please enter a <span class="token builtin">list</span> of elements<span class="token punctuation">,</span> separated by commas<span class="token punctuation">:</span> apple<span class="token punctuation">,</span> banana<span class="token punctuation">,</span> orange
Please enter the delimiter you wish to use<span class="token punctuation">:</span> <span class="token punctuation">;</span>
apple<span class="token punctuation">;</span> banana<span class="token punctuation">;</span> orange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sample Test 2:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Please enter a <span class="token builtin">list</span> of elements<span class="token punctuation">,</span> separated by commas<span class="token punctuation">:</span> dog<span class="token punctuation">,</span> cat<span class="token punctuation">,</span> mouse
Please enter the delimiter you wish to use<span class="token punctuation">:</span>  <span class="token operator">-</span> 
dog <span class="token operator">-</span>  cat <span class="token operator">-</span>  mouse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sample Test 3:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Please enter a <span class="token builtin">list</span> of elements<span class="token punctuation">,</span> separated by commas<span class="token punctuation">:</span> Monday<span class="token punctuation">,</span> Tuesday<span class="token punctuation">,</span> Wednesday<span class="token punctuation">,</span> Thursday<span class="token punctuation">,</span> Friday
Please enter the delimiter you wish to use<span class="token punctuation">:</span> <span class="token punctuation">,</span> 
Monday<span class="token punctuation">,</span>  Tuesday<span class="token punctuation">,</span>  Wednesday<span class="token punctuation">,</span>  Thursday<span class="token punctuation">,</span>  Friday
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sample Test 4:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Please enter a <span class="token builtin">list</span> of elements<span class="token punctuation">,</span> separated by commas<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>
Please enter the delimiter you wish to use<span class="token punctuation">:</span>  <span class="token operator">*</span> 
<span class="token number">1</span> <span class="token operator">*</span>  <span class="token number">2</span> <span class="token operator">*</span>  <span class="token number">3</span> <span class="token operator">*</span>  <span class="token number">4</span> <span class="token operator">*</span>  <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user_string <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter a list of element, separated by commas: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
user_delimiter <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter the delimiter you wish to use: &quot;</span><span class="token punctuation">)</span>
final_string <span class="token operator">=</span> user_delimiter<span class="token punctuation">.</span>join<span class="token punctuation">(</span>user_string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;The final string you assigned is: </span><span class="token interpolation"><span class="token punctuation">{</span>final_string<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment">#Please enter a list of element, separated by commas: Kim,Amy,Cindy</span>
Please enter the delimiter you wish to use<span class="token punctuation">:</span> <span class="token operator">^</span>_<span class="token operator">^</span>
The final string you assigned <span class="token keyword">is</span><span class="token punctuation">:</span> Kim<span class="token operator">^</span>_<span class="token operator">^</span>Amy<span class="token operator">^</span>_<span class="token operator">^</span>Cindy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Join 用特定间隔使字符串分隔</p><h2 id="question-05-list-symmetry-check" tabindex="-1"><a class="header-anchor" href="#question-05-list-symmetry-check" aria-hidden="true">#</a> Question 05: List Symmetry Check</h2><p>Check if a list is symmetric (the same forwards and backwards).</p><p>Sample Test 1:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Enter a <span class="token builtin">list</span> of items separated by commas<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
Is the entered <span class="token builtin">list</span> symmetric<span class="token punctuation">:</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Sample Test 2:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Enter a <span class="token builtin">list</span> of items separated by commas<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span>
Is the entered <span class="token builtin">list</span> symmetric<span class="token punctuation">:</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,32),m=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("user_message "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Please enter a list of element, separated by commas: "'),n("span",{class:"token punctuation"},")"),s(`
lst_number `),n("span",{class:"token operator"},"="),s(" user_message"),n("span",{class:"token punctuation"},"."),s("split"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'","'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("lst_number"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("lst_number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"("),s("lst_number"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"("),s("lst_number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("lst_number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},"-"),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"True"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"False"'),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"break"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("list_numbers "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"input"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Please in put a series of numbers: "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("split"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"','"),n("span",{class:"token punctuation"},")"),s(`
symmetry `),n("span",{class:"token operator"},"="),s(" list_numbers "),n("span",{class:"token operator"},"=="),s(" list_numbers"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},":"),n("span",{class:"token punctuation"},":"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-interpolation"},[n("span",{class:"token string"},'f"If the list is symmetry: '),n("span",{class:"token interpolation"},[n("span",{class:"token punctuation"},"{"),s("symmetry"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token string"},'"')]),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function v(g,y){const p=i("CodeTabs");return c(),l("div",null,[d,u(p,{id:"70",data:[{id:"solution with for-loop"},{id:"only using list"}]},{title0:a(({value:t,isActive:e})=>[s("solution with for-loop")]),title1:a(({value:t,isActive:e})=>[s("only using list")]),tab0:a(({value:t,isActive:e})=>[m]),tab1:a(({value:t,isActive:e})=>[b]),_:1})])}const f=o(k,[["render",v],["__file","exerxise-combined.html.vue"]]);export{f as default};
