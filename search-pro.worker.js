const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":65,\"nextId\":65,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-184f4da6@0\",\"2\":\"v-184f4da6@1\",\"3\":\"v-707d9503\",\"4\":\"v-707d9503#_1-understanding-variables-examples-from-daily-life\",\"5\":\"v-707d9503#_1-1-what-is-a-variable\",\"6\":\"v-707d9503#_1-2-an-example\",\"7\":\"v-707d9503#_2-creating-variables-assignment-statements\",\"8\":\"v-707d9503#_3-exploring-print\",\"9\":\"v-707d9503#_3-1-outputting-multiple-data-simultaneously\",\"10\":\"v-707d9503#_3-2-modifying-the-separator-for-multiple-simultaneous-outputs\",\"11\":\"v-707d9503#_3-3-modifying-the-print-output-ending\",\"12\":\"v-707d9503#_3-4-using-end-and-sep-simultaneously\",\"13\":\"v-707d9503#_4-advanced-assignment-methods\",\"14\":\"v-707d9503#_4-1-assigning-the-same-value-to-multiple-variables-simultaneously\",\"15\":\"v-707d9503#_4-2-assigning-different-values-to-multiple-variables-simultaneously\",\"16\":\"v-707d9503#practice\",\"17\":\"v-707d9503#_5-naming-rules-for-variables\",\"18\":\"v-707d9503#_6-exercise\",\"19\":\"v-707d9503@0\",\"20\":\"v-707d9503@1\",\"21\":\"v-8544b352\",\"22\":\"v-8544b352#data-types\",\"23\":\"v-8544b352#_1-numeric-types-int-float\",\"24\":\"v-8544b352#_1-1-code-examples\",\"25\":\"v-8544b352#_2-string-str\",\"26\":\"v-8544b352#_2-1-code-examples\",\"27\":\"v-8544b352#_2-2-three-characteristics-of-strings\",\"28\":\"v-8544b352#_3-list\",\"29\":\"v-8544b352#_3-1-code-examples\",\"30\":\"v-8544b352#_3-2-three-characteristics-of-lists\",\"31\":\"v-8544b352#_4-tuple\",\"32\":\"v-8544b352#_4-1-code-examples\",\"33\":\"v-8544b352#_5-exploration👀-of-lists-tuples\",\"34\":\"v-8544b352#_6-dictionary-dict\",\"35\":\"v-8544b352#_6-1-code-examples\",\"36\":\"v-8544b352#_6-2-characteristics-of-dictionary\",\"37\":\"v-8544b352#_7-set\",\"38\":\"v-8544b352#_7-1-code-examples\",\"39\":\"v-8544b352#_7-2-characteristics-of-set\",\"40\":\"v-8544b352#_8-boolean-bool\",\"41\":\"v-8544b352@0\",\"42\":\"v-8544b352@1\",\"43\":\"v-61ea70a7\",\"44\":\"v-61ea70a7#_1-characteristics-of-numeric-types\",\"45\":\"v-61ea70a7#_2-arithmetic-operators\",\"46\":\"v-61ea70a7#_3-trying-it-out-number-transformation\",\"47\":\"v-61ea70a7#_4-comparison-operators-comparing-values\",\"48\":\"v-61ea70a7#_5-assignment-operators\",\"49\":\"v-61ea70a7#_7-3-1-sum-and-difference-of-numbers\",\"50\":\"v-61ea70a7#_7-3-2-multiplication-and-division-of-numbers\",\"51\":\"v-61ea70a7#_7-3-3-modulus-and-exponentiation\",\"52\":\"v-61ea70a7#_7-3-4-comparison-operation\",\"53\":\"v-61ea70a7@0\",\"54\":\"v-61ea70a7@1\",\"55\":\"v-a2b81eac\",\"56\":\"v-a2b81eac#_1-headline\",\"57\":\"v-a2b81eac#headline2\",\"58\":\"v-a2b81eac#headline-3\",\"59\":\"v-a2b81eac#headline6\",\"60\":\"v-a2b81eac@0\",\"61\":\"v-a2b81eac@1\",\"62\":\"v-e52c881c\",\"63\":\"v-ae57d96a\",\"64\":\"v-54d7ff21\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,92],\"1\":[null,null,2],\"2\":[null,null,1],\"3\":[2,7],\"4\":[7],\"5\":[5,4],\"6\":[4,111],\"7\":[5,111],\"8\":[3],\"9\":[6,37],\"10\":[9,9],\"11\":[6,11],\"12\":[7,13],\"13\":[4],\"14\":[10,15],\"15\":[9,9],\"16\":[1,59],\"17\":[5,102],\"18\":[2,137],\"19\":[null,null,2],\"20\":[null,null,2],\"21\":[4,6],\"22\":[2,2],\"23\":[5],\"24\":[3,21],\"25\":[3],\"26\":[4,18],\"27\":[5,59],\"28\":[2],\"29\":[4,26],\"30\":[6,58],\"31\":[2],\"32\":[4,69],\"33\":[5,146],\"34\":[3],\"35\":[4,26],\"36\":[5,43],\"37\":[2],\"38\":[4,23],\"39\":[5,97],\"40\":[3,10],\"41\":[null,null,2],\"42\":[null,null,2],\"43\":[3,6],\"44\":[5,35],\"45\":[3,31],\"46\":[6,79],\"47\":[5,39],\"48\":[3,21],\"49\":[9,37],\"50\":[8,37],\"51\":[5,34],\"52\":[5,46],\"53\":[null,null,2],\"54\":[null,null,2],\"55\":[2,12],\"56\":[2],\"57\":[1],\"58\":[2,1],\"59\":[1],\"60\":[null,null,2],\"61\":[null,null,2],\"62\":[1],\"63\":[2],\"64\":[1]},\"averageFieldLength\":[4.0844618750671495,47.61746640825887,1.1955066688750111],\"storedFields\":{\"0\":{\"h\":\"About me\",\"t\":[\"My name is Ruoyihan Wang (Cindy).\",\"Currently, I am a first-year student in the university of Cambridge, studying engineering.\",\"In my spare time, I enjoy photographing, reading novels, K-pop dancing and travelling ...\",\"I did some really interesting projects this term and I'd like to share some of them：\",\"1.Lego Mindstorm\",\"Created the 'gearbox' project by using different sensors to figure out the power of different gears in a team of three.\",\"Measuring the turning speed of different gear box and utilizing Python for controlling the mating of different gears.\",\"2.Integrated Electrical Project\",\"Applied signal theory in building modulation, tuning, and filter circuits.\",\"Acquired hands-on experience using LTSpice, PicoScope, multimeters, and microprocessors.\"]},\"1\":{\"c\":[\"Self-introduction\"]},\"2\":{\"c\":[\"Author\"]},\"3\":{\"h\":\"01 Variable\",\"t\":[\"Sure, here's the translated markdown:\"]},\"4\":{\"h\":\"1. Understanding Variables - Examples from Daily Life\"},\"5\":{\"h\":\"1.1 What is a Variable\",\"t\":[\"Vari: Change\",\"Able: Capacity\"]},\"6\":{\"h\":\"1.2 An Example\",\"t\":[\"Let's say you're the class monitor and you need to compile the monthly test scores of each student in the class. Each month's score will be recorded on a paper, listing each student's score, for instance:\",\"Li Lei: 98 points\",\"Ma Dongmei: 89 points\",\"Liu Yitong: 96 points\",\"...\",\"One day, the teacher wants to see Liu Yitong's scores for January, February, and March. As the class monitor, what do you do? Clearly, directly handing over each month's test score isn't appropriate.\",\"We should copy Liu Yitong's January, February, and March scores onto a separate sheet of paper and then give it to the teacher.\",\"So, why didn't we assign an envelope for each student from the beginning? (It could also be a file bag.) Initially, the envelope is flat. When we put things (data) in it, does it swell? Did it change? Did it gain size? Clearly, yes.\",\"So, the envelope, did it allocate space in the current space we're in to store data and say, \\\"This is an envelope.\\\"\",\"Similarities: The refrigerator also allocates space in the current space we're in.\",\"---- Variables allocate space in the computer's memory ---- Variables can be overwritten\"]},\"7\":{\"h\":\"2. Creating Variables - Assignment Statements\",\"t\":[\"Using a variable name to represent or reference a value\",\"Nuwa made mud figures, the figures had no life. Nuwa waved a willow branch, giving life to the mud figures. At this moment, the mud figure can represent Nuwa's descendants. \\\"Variable: Mud figure, Value: Nuwa\\\"\",\"The National People's Congress, the delegates of the NPC, are elected by the vast masses of the people. Their rights are not acquired by themselves, so they can say: \\\"I represent the will of the vast masses of the people.\\\" \\\"Variable: NPC delegate, Value: Masses\\\"\",\"Initializing assignment statement: Variable Name = Expression\",\"Variable Name: What we call this space\",\"Expression: Similar to a mathematical expression\",\"Logic of the program: From top to bottom, from right to left, finally assigning a value.\",\"name1 = 'WRYH' name2 = name1 print(name2) # Variable passing name1 = \\\"look\\\" name1 = \\\"WRYH\\\" print(name1) # Variable overwrite \",\"x = 1 # 1 assigned to x x = x + 10 # x represents 1, so x + 10 == 1 + 10, after getting 11, it's assigned to variable x print(x) # Print output # The hashtag is for comments, annotations, for easy understanding of the code and future maintenance. \"]},\"8\":{\"h\":\"3. Exploring print\"},\"9\":{\"h\":\"3.1 Outputting Multiple Data Simultaneously\",\"t\":[\"a = 1 b = 1 c = 1 print(a, b, c) # Output: 1 1 1 \",\"From the output, it's evident that print outputs multiple variables simultaneously, with each value defaulting to a space between them. So, can we modify this default space? Obviously, yes. Using sep.\"]},\"10\":{\"h\":\"3.2 Modifying the Separator for Multiple Simultaneous Outputs\",\"t\":[\"a = 1 b = 1 c = 1 print(a, b, c, sep=\\\".hhhhhh.\\\") \"]},\"11\":{\"h\":\"3.3 Modifying the Print Output Ending\",\"t\":[\"a = 1 b = 1 c = 1 print(a) print(b) print(c) # Output: # 1 # 1 # 1 \",\"a = 1 b = 1 c = 1 print(a, end=\\\"\\\\n\\\\n\\\\n\\\") print(b) print(c) # Output: # 1 # # 1 # 1 \",\"a = 1 b = 1 c = 1 print(a, end=\\\"hello hello\\\") print(b) print(c) \"]},\"12\":{\"h\":\"3.4 Using end and sep Simultaneously\",\"t\":[\"a = 1 b = 1 c = 1 print(a, b, c, sep = \\\"~\\\", end = \\\" Hello\\\") # Output: 1~1~1 Hello \"]},\"13\":{\"h\":\"4. Advanced Assignment Methods\"},\"14\":{\"h\":\"4.1 Assigning the Same Value to Multiple Variables Simultaneously\",\"t\":[\"a = b = c = 1 print (a, b, c,) # Assigning the same value to multiple variables simultaneously \"]},\"15\":{\"h\":\"4.2 Assigning Different Values to Multiple Variables Simultaneously\",\"t\":[\"a, b, c = 1, 2, 3 print(a, b, c) \"]},\"16\":{\"h\":\"Practice\",\"t\":[\"If you have two kids, an older brother named Austin and a younger brother named Jaden.\",\"Austin wants juice, Jaden wants cola. Both brothers have their exclusive cups and don't like using each other's cups.\",\"At home, there's only one cup of juice and one cup of cola. You accidentally pour cola into the older brother's cup and juice into the younger brother's cup.\",\"Question: How do you exchange the juice between the cups of the older and younger brothers?\",\"Austin = \\\"Coke\\\" # This assignment can be understood as pouring juice Jaden = \\\"juice\\\" # This assignment can be understood as pouring juice print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) Austin1 = Jaden Jaden1 = Austin Austin = Austin1 Jaden = Jaden1 print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) \",\"Austin = \\\"Coke\\\" # This assignment can be understood as pouring juice Jaden = \\\"juice\\\" # This assignment can be understood as pouring juice print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) Austin1 = Austin Austin = Jaden Jaden = Austin1 print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) \",\"Austin = \\\"Coke\\\" # This assignment can be understood as pouring juice Jaden = \\\"juice\\\" # This assignment can be understood as pouring juice print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) Austin, Jaden = Jaden, Austin print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) \"]},\"17\":{\"h\":\"5. Naming Rules for Variables\",\"t\":[\"Combination of uppercase, lowercase, English, numbers, and __, and cannot start with a number;\",\"a1b2c3 = 1 # Cannot start with a number \",\"System keywords cannot be used as variable names;\",\"as = 1 # \",\"Cannot be printed As = 1 aS = 1 a_s = 1 ```\",\"Get the keyword list: `help('keywords')` ``` python Here is a list of the Python keywords. Enter any keyword to get more help. False class from or None continue global pass True def if raise and del import return as elif in try assert else is while async except lambda with await finally nonlocal yield break for not ``` \",\"​\",\"Variables are case-sensitive in Python\",\"n = 1 N = 2 print (n) # 1 \",\"Variable names cannot contain spaces, but can use underscores\",\"user_name = \\\"hello\\\" username = \\\"hi\\\" \",\"Avoid using Python's built-in function names as variable names\",\"print = \\\"123\\\" print(print) # Cannot be printed \"]},\"18\":{\"h\":\"6. Exercise\",\"t\":[\"1. In Python, variable names can start with a number. - [ ] True - [x] False 2. Which of the following variable names is valid in Python? - [ ] 2myVar - [x] myVar2 - [ ] my-var - [ ] my var 3. Variable names in Python are case-sensitive. - [x] True - [ ] False 4. In Python, `my_var` and `myVar` refer to the same variable. - [ ] True - [x] False 5. Variable names can be Python keywords. - [ ] True - [x] False 6. `None` is a special type in Python, representing no value or an empty value. - [x] True - [ ] False 7. Which of the following is a valid variable assignment in Python? - [x] 123abc = \\\"hello\\\" - [ ] for = \\\"world\\\" - [ ] _hidden = \\\"secret\\\" - [ ] import = 123 8. A variable in Python can be assigned multiple values simultaneously. - [ ] True - [x] False 9. Which of the following is a multi-variable assignment in Python? - [x] a, b, c = 1, 2, 3 - [ ] a = 1, b = 2, c = 3 - [ ] a; b; c = 1; 2; 3 - [ ] a = 1; b = 2; c = 3; 10. Variables must be assigned a value before using them. - [x] True - [ ] False 11. The type of variables in Python is static; once assigned, it cannot be changed. - [ ] True - [x] False 12. In Python, which represents a global variable? - [x] var = \\\"hello\\\" - [ ] global var - [ ] var(global) - [ ] def var(): 13. Which represents deleting a variable? - [ ] delete x - [x] del x - [ ] remove x - [ ] destroy x ```python my_variable = \\\"Hello, World!\\\" print(my_variable) # Delete the variable del my_variable # Attempting to access a deleted variable will raise a NameError # print(my_variable) ``` \",\"​\",\"14. `x = 5`, then `y = x`, if you change the value of `y`, the value of `x` will also change. - [ ] True - [x] False 15. `x = [1, 2, 3]`, then `y = x`, if you change the list content of `y`, the content of `x` will also change.❌ - [x] True - [ ] False 16. In Python, variables can only store basic data types, such as integers or strings. - [ ] True - [x] False \",\"​\"]},\"19\":{\"c\":[\"python notebook\"]},\"20\":{\"c\":[\"notes\",\"python\"]},\"21\":{\"h\":\"02 Introduction to data\",\"t\":[\"Here's the translated markdown:\"]},\"22\":{\"h\":\"Data Types\",\"t\":[\"image-20231214105801217\"]},\"23\":{\"h\":\"1. Numeric Types: int , float\"},\"24\":{\"h\":\"1.1 Code Examples\",\"t\":[\"Integer\",\"int_num = 1 t = type(int_num) print(int_num) print(\\\"int num type is: >>>\\\", t) print(\\\"Detecting data type directly and outputting\\\", type(int_num)) #output 1 int num type is: >>> <class 'int'> Detecting data type directly and outputting <class 'int'> \",\"Float\",\"float_num = 1.1 t = type(float_num) print(float_num) print(\\\"float num type is: >>>\\\", t) print(\\\"Detecting data type directly and outputting\\\", type(float_num)) #output 1.1 float num type is: >>> <class 'float'> Detecting data type directly and outputting <class 'float'> \"]},\"25\":{\"h\":\"2. String: str\"},\"26\":{\"h\":\"2.1 Code Examples\",\"t\":[\"string = \\\"Vervevividness\\\" t = type(string) print(string) print(\\\"string type is: >>>\\\", t) print(\\\"Detecting data type directly and outputting\\\", type(string)) #output Vervevividness string type is: >>> <class 'str'> Detecting data type directly and outputting <class 'str'> \"]},\"27\":{\"h\":\"2.2 Three Characteristics of Strings\",\"t\":[\"Order\",\"\\\"Left to right, index starts from 0\\\";\",\"\\\"Right to left, index starts from -1\\\"\",\"Anything within quotes counts as an index (even spaces);\",\"Immutability\",\"Once created, strings cannot be changed;\",\"Note⚠️: Immutability refers to the inability to modify, add, or delete strings during code execution.\",\"Any Characters:\",\"Any characters that can be entered via the keyboard can be elements of a string.\",\"Any character placed within a string becomes a string type (\\\"Each element inside can be called a sub-character\\\").\"]},\"28\":{\"h\":\"3. List\"},\"29\":{\"h\":\"3.1 Code Examples\",\"t\":[\"lst = [\\\"Vervevividness\\\", 1, 0.1, (\\\"happy\\\", \\\"sad\\\", 31), [31, \\\"bones\\\"], True, False] t = type(lst) print(lst) print(\\\"lst type is: >>>\\\", t) print(\\\"Detecting data type directly and outputting: >>>\\\", type(lst)) #outcome ['Vervevividness', 1, 0.1, ('happy', 'sad', 31), [31, 'bones'], True, False] lst type is: >>> <class 'list'> Detecting data type directly and outputting: >>> <class 'list'> \"]},\"30\":{\"h\":\"3.2 Three Characteristics of Lists\",\"t\":[\"Order\",\"\\\"Left to right, index starts from 0\\\";\",\"\\\"Right to left, index starts from -1\\\"\",\"Each element in the list counts as one;\",\"eg. lst = [\\\"Hello\\\", 31];\",\"Hello is index 0 (left to right) and -2 (right to left);\",\"31 is index 1 (left to right) and -1 (right to left);\",\"Mutability: Lists can be \\\"added to, deleted from, or modified\\\" during program execution.\",\"Any Data Type: Note⚠️, here \\\"any data type\\\" refers to the data types Python possesses;\",\"Data Types Python Possesses \\\"Below includes only basic types\\\"\",\"image-20231216151405069\"]},\"31\":{\"h\":\"4. Tuple\"},\"32\":{\"h\":\"4.1 Code Examples\",\"t\":[\"tup = (1, 2, 3, 4, \\\"Hello\\\", 1.1, [1, 2, 3, 4]) t = type(tup) print(tup) print(\\\"tup type is :>>>\\\", t) print(\\\"Detecting data type directly and outputting:>>>\\\", type(tup)) #output (1, 2, 3, 4, 'Hello', 1.1, [1, 2, 3, 4]) tup type is :>>> <class 'tuple'> Detecting data type directly and outputting:>>> <class 'tuple'> \",\"Order\",\"\\\"Left to right, index starts from 0\\\";\",\"\\\"Right to left, index starts from -1\\\"\",\"Each element in the tuple counts as one;\",\"eg. lst = [\\\"Hello\\\", 31]; has two elements\",\"Hello is index 0 (left to right) and -2 (right to left);\",\"31 is index 1 (left to right) and -1 (right to left);\",\"Immutability\",\"Once created, tuples cannot be changed;\",\"Note⚠️: Immutability refers to the inability to modify, add, or delete tuples during code execution;\",\"Any Data Type: Note⚠️, here \\\"data type\\\" refers to the data types Python possesses.\"]},\"33\":{\"h\":\"5. Exploration👀 of Lists & Tuples\",\"t\":[\"Why🧐 Lists and Tuples?\",\"Which one should we use, lists or tuples?\",\"If the data or quantity to be stored is changeable, like a log feature on a social platform that tracks which posts a user viewed within a week—lists would be more suitable.\",\"If the data and quantity remain unchanged, like a system (software) that needs to return the latitude and longitude of a location directly to the user—definitely tuples are more suitable.\",\"Assumptions\",\"Assumption 1: There's a warehouse where you want to add items. The warehouse is large, and there might or might not be space available. Would you need to hire a warehouse manager so you can ask if there's space available? The warehouse manager keeps track of the warehouse's status;\",\"Assumption 2: Now, there's a warehouse for atomic bombs. Once created, it can only store one bomb. Do we need someone to track the status of the atomic bomb warehouse? No need, it'd be a waste of resources.\",\"Why?\",\"User logs📔—will they keep changing (recording which posts were viewed)? We need someone like a warehouse manager to track and know if there's space and where to add. Lists are more suitable because they are mutable. \\\"Mutable means: adding, deleting, or modifying\\\"; \",\"Why not tuples? Every time you want to add data, you'd need to recreate a new tuple (similar to creating a warehouse for an atomic bomb, just enough for one\",\"; when you want to store two, you need to create a new warehouse). - Will latitude and longitude change? Obviously not, so we don't need an extra person to track the status. Lists could work, but it's unnecessary. \\\"Because we don't need a warehouse manager,\\\" tuples are just enough. - We emphasize: not wasting, just using what's suitable.\"]},\"34\":{\"h\":\"6. Dictionary: dict\"},\"35\":{\"h\":\"6.1 Code Examples\",\"t\":[\"d = {\\\"name\\\": \\\"Cindy\\\", \\\"age\\\": 17, 1: \\\"int\\\", 1.1 : 1, \\\"tup\\\" : (1, 2, 3)} t = type(d) print(d) print(\\\"d type is :>>>\\\", t) print(\\\"Detecting data type directly and outputting:>>>\\\", type(d)) #output {'name': 'Cindy', 'age': 17, 1: 'int', 1.1: 1, 'tup': (1, 2, 3)} d type is :>>> <class 'dict'> Detecting data type directly and outputting:>>> <class 'dict'> \"]},\"36\":{\"h\":\"6.2 Characteristics of Dictionary\",\"t\":[\"Unordered\",\"Composition: Comprised of a series of key-value pairs. d = {\\\"key1\\\":\\\"value1,\\\"key2\\\":\\\"value2\\\".....}\",\"Key: \",\"Only immutable data types can be dictionary keys;\",\"Examples: strings, numbers, booleans, tuples;\",\"Value: Any data type Python possesses;\",\"Mutability: Keys and values can be added, modified, or deleted.\"]},\"37\":{\"h\":\"7. Set\"},\"38\":{\"h\":\"7.1 Code Examples\",\"t\":[\"set1 = {1, 2, \\\"Cindy\\\", 1.2, \\\"hello\\\", (1, 2, 3), False} t = type(set1) print(set1) print(\\\"set1 type is :>>>\\\", type(set1)) print(\\\"Detecting data type directly and outputting:>>>\\\", t) #output {False, 1, 2, 1.2, 'hello', (1, 2, 3), 'Cindy'} set1 type is :>>> <class 'set'> Detecting data type directly and outputting:>>> <class 'set'> \"]},\"39\":{\"h\":\"7.2 Characteristics of Set\",\"t\":[\"Unordered: Sets have no order, no index;\",\"set1 = {1, 2, \\\"Cindy\\\", 1.2, \\\"hello\\\", (1, 2, 3), False} print(set1) #output {False, 1, 2, 1.2, 'hello', (1, 2, 3), 'Cindy'} \",\"Warning\",\"Even if you run sets multiple times or once, if the order doesn't change, we cannot claim sets are ordered.\",\"Why? If you roll a die 500 times and get a 6 every time, can you say rolling a die is a deterministic event? Clearly not 🙅.\",\"Deterministic:\",\"Each value in a set is definite; \\\"this requires immutable data types\\\"\",\"Examples: numeric types, booleans, tuples, strings\",\"For example🌰: Lists are mutable, so not suitable🙅\",\"Uniqueness: Repeated items are automatically removed;\",\"set1 = {1, 2, 1, 1, 2, 1} print(set1) #{1,2} \",\"Mutability: Sets can have data added or removed, but output modification isn't possible. \\\"Note⚠️: Deletion doesn't allow specifying an index to delete an element.\\\"\"]},\"40\":{\"h\":\"8. Boolean: bool\",\"t\":[\"condition = True print(condition) print(type(condition)) #output True <class 'bool'> \"]},\"41\":{\"c\":[\"python notebook\"]},\"42\":{\"c\":[\"notes\",\"python\"]},\"43\":{\"h\":\"03 Newmeric Type\",\"t\":[\"Here's the translated markdown:\"]},\"44\":{\"h\":\"1. Characteristics of Numeric Types\",\"t\":[\"image-20231216151331535\",\"In [3]: 1 + 1 Out[3]: 2 In [4]: 1 + 1.0 Out[4]: 2.0 In [5]: 2 -1 Out[5]: 1 In [6]: 2 - 1.0 Out[6]: 1.0 In [7]: 2 * 2 Out[7]: 4 In [8]: 2* 2.0 Out[8]: 4.0 In [9]: 9/3 Out[9]: 3.0 # The result is a float if one of the elements is a float, with the highest precedence. # Division involves precision issues, resulting in a float. \"]},\"45\":{\"h\":\"2. Arithmetic Operators\",\"t\":[\"Arithmetic Operators: Used for arithmetic calculations.\",\"Operator\",\"Description\",\"Example\",\"+\",\"Addition Operator\",\"1 + 1 = 2\",\"-\",\"Subtraction Operator\",\"2 - 1 = 1\",\"*\",\"Multiplication Operator\",\"2 * 3 = 6\",\"/\",\"Division Operator\",\"9 / 3 = 3.0\",\"**\",\"Exponentiation Operator\",\"2 ** 3 = 8\",\"%\",\"Modulus Operator, calculates remainder\",\"9 % 2 = 1\",\"//\",\"Floor Division Operator, calculates quotient without remainder\",\"9 // 2 = 4\",\"Tip: 9 / 2 = 4......1\"]},\"46\":{\"h\":\"3. Trying It Out: Number Transformation\",\"t\":[\"Imagine you have a two-digit integer, and we need to generate two new numbers based on the following rules:\",\"The first new number is the sum of the individual digits of the original number.\",\"The second new number is the reverse of the original number (e.g., for 21, the reversed number is 12).\",\"Write Python code to fulfill these requirements.\",\"Input:\",\"An integer num (10 ≤ num ≤ 99)\",\"Output:\",\"Two integers or an error message string.\",\"Example:\",\"Suppose the input number num is 91. Then your code should output two numbers: 10 (the sum of 9 and 1) and 19 (the reversal of 91).\",\"Suppose the input number num is 26. Then your code should output two numbers: 8 (the sum of 2 and 6) and 62 (the reversal of 26).\",\"Suppose the input number num is 18. Then your code should output two numbers: 9 (the sum of 1 and 8) and 81 (the reversal of 18).\",\"num = 91 print(num // 10 + num % 10) print(10 * (num % 10) + num // 10) #output 10 19 \"]},\"47\":{\"h\":\"4. Comparison Operators: Comparing Values\",\"t\":[\"Operator\",\"Description\",\"Example\",\">\",\"Checks if the first operand is greater than the second\",\"print(1 > 2)\",\"<\",\"Checks if the first operand is less than the second\",\"print(1 < 2)\",\">=\",\"Checks if the first operand is greater than or equal to the second\",\"print(3 >= 3)\",\"<=\",\"Checks if the first operand is less than or equal to the second\",\"print(3 <= 4)\",\"==\",\"Checks if two operands are equal\",\"print(2 == 2)\",\"!=\",\"Checks if two operands are not equal\",\"print(2 != 1)\",\"Try the above examples and see the resulting outputs.\"]},\"48\":{\"h\":\"5. Assignment Operators\",\"t\":[\"Operator\",\"Description\",\"Example\",\"=\",\"Assigns the value on the right-hand side to the left-hand side\",\"a = 1\",\"+=\",\"a += b is equivalent to a = a + b\",\"a += 10\",\"-=\",\"a -= b is equivalent to a = a - b\",\"a -= 10\",\"*=\",\"a *= b is equivalent to a = a * b\",\"a *= 10\",\"/=\",\"a /= b is equivalent to a = a / b\",\"a /= 10\",\"**=\",\"a **= b is equivalent to a = a ** b\",\"a **= 10\",\"//=\",\"a //= b is equivalent to a = a // b\",\"a //= 10\"]},\"49\":{\"h\":\"7.3.1 Sum and Difference of Numbers:\",\"t\":[\"Write Python code that creates two numbers a and b, calculates and prints their sum and the result of a subtracted from b.\",\"Code Template\",\"a = 10 b = 12 sum_result = a + b difference = a - b print(\\\"Sum: \\\", sum_result) print(\\\"Difference: \\\", difference) # Test assert sum_result == a + b assert difference == a - b \",\"Output Example:\",\"Sum: 8 Difference: -2 \"]},\"50\":{\"h\":\"7.3.2 Multiplication and Division of Numbers\",\"t\":[\"Write Python code that creates two numbers x and y, calculates and prints their product and the result of x divided by y.\",\"Code Template\",\"x = 3 y = 4 print(\\\"Product: \\\", x * y) print(\\\"Division: \\\", x / y) # Test assert product == x * y assert division == x / y \",\"Output Example:\",\"Product: 12 Division: 0.75 \"]},\"51\":{\"h\":\"7.3.3 Modulus and Exponentiation\",\"t\":[\"Write Python code that creates two numbers m and n, calculates and prints m modulo n and m raised to the power of n.\",\"Code Template\",\"m = 3 n = 4 print(\\\"Modulus: \\\", m % n) print(\\\"Power: \\\", m ** n) # Test assert remainder == m % n assert power == m ** n \",\"Output Example:\",\"Modulus: 3 Power: 81 \"]},\"52\":{\"h\":\"7.3.4 Comparison Operation\",\"t\":[\"Write Python code that takes two numbers p and q as input, compares them, and prints the respective comparison result (greater than, less than, equal to).\",\"Code Template\",\"p = int(input(\\\"Please enter an integer: \\\")) q = int(input(\\\"Please enter the second integer: \\\")) if p > q: print(f\\\"{p} is greater than {q}\\\") assert p > q elif p < q: print(f\\\"{p} is less than {q}\\\") assert p < q else: print(f\\\"{p} is equal to {q}\\\") assert p == q \",\"Output Example:\"]},\"53\":{\"c\":[\"python notebook\"]},\"54\":{\"c\":[\"notes\",\"python\"]},\"55\":{\"h\":\"Article editing\",\"t\":[\"Here are some tips on how to write articles in Typora 👀\"]},\"56\":{\"h\":\"1.Headline\"},\"57\":{\"h\":\"Headline2\"},\"58\":{\"h\":\"Headline 3\",\"t\":[\"…….\"]},\"59\":{\"h\":\"Headline6\"},\"60\":{\"c\":[\"article editing\"]},\"61\":{\"c\":[\"reminder\",\"tips\"]},\"62\":{\"h\":\"Article\"},\"63\":{\"h\":\"Python Notebook\"},\"64\":{\"h\":\"Article\"}},\"dirtCount\":0,\"index\":[[\"👀\",{\"1\":{\"55\":1}}],[\"🙅\",{\"1\":{\"39\":1}}],[\"q\",{\"1\":{\"52\":10}}],[\"quotient\",{\"1\":{\"45\":1}}],[\"quotes\",{\"1\":{\"27\":1}}],[\"quantity\",{\"1\":{\"33\":2}}],[\"question\",{\"1\":{\"16\":1}}],[\"<=\",{\"1\":{\"47\":2}}],[\"<\",{\"1\":{\"47\":2,\"52\":2}}],[\"<class\",{\"1\":{\"24\":4,\"26\":2,\"29\":2,\"32\":2,\"35\":2,\"38\":2,\"40\":1}}],[\"≤\",{\"1\":{\"46\":2}}],[\"viewed\",{\"1\":{\"33\":2}}],[\"via\",{\"1\":{\"27\":1}}],[\"vervevividness\",{\"1\":{\"26\":2,\"29\":2}}],[\"var`\",{\"1\":{\"18\":1}}],[\"var\",{\"1\":{\"18\":6}}],[\"vari\",{\"1\":{\"5\":1}}],[\"variables\",{\"0\":{\"4\":1,\"7\":1,\"14\":1,\"15\":1,\"17\":1},\"1\":{\"6\":2,\"9\":1,\"14\":1,\"17\":1,\"18\":3}}],[\"variable\",{\"0\":{\"3\":1,\"5\":1},\"1\":{\"7\":8,\"17\":3,\"18\":16}}],[\"valid\",{\"1\":{\"18\":2}}],[\"value2\",{\"1\":{\"36\":1}}],[\"value1\",{\"1\":{\"36\":1}}],[\"values\",{\"0\":{\"15\":1,\"47\":1},\"1\":{\"18\":1,\"36\":1}}],[\"value\",{\"0\":{\"14\":1},\"1\":{\"7\":4,\"9\":1,\"14\":1,\"18\":5,\"36\":2,\"39\":1,\"48\":1}}],[\"vast\",{\"1\":{\"7\":2}}],[\">=\",{\"1\":{\"47\":2}}],[\">\",{\"1\":{\"24\":4,\"26\":2,\"29\":2,\"32\":2,\"35\":2,\"38\":2,\"40\":1,\"47\":2,\"52\":2}}],[\">>>\",{\"1\":{\"24\":4,\"26\":2,\"29\":4,\"32\":4,\"35\":4,\"38\":4}}],[\"03\",{\"0\":{\"43\":1}}],[\"0\",{\"1\":{\"27\":1,\"29\":2,\"30\":2,\"32\":2,\"44\":7,\"45\":1,\"50\":1}}],[\"02\",{\"0\":{\"21\":1}}],[\"01\",{\"0\":{\"3\":1}}],[\"❌\",{\"1\":{\"18\":1}}],[\"81\",{\"1\":{\"46\":1,\"51\":1}}],[\"8\",{\"0\":{\"40\":1},\"1\":{\"18\":1,\"44\":2,\"45\":1,\"46\":2,\"49\":1}}],[\"89\",{\"1\":{\"6\":1}}],[\"75\",{\"1\":{\"50\":1}}],[\"7\",{\"0\":{\"37\":1,\"38\":1,\"39\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1},\"1\":{\"18\":1,\"44\":2}}],[\"62\",{\"1\":{\"46\":1}}],[\"6\",{\"0\":{\"18\":1,\"34\":1,\"35\":1,\"36\":1},\"1\":{\"18\":1,\"39\":1,\"44\":2,\"45\":1,\"46\":1}}],[\"​\",{\"1\":{\"17\":1,\"18\":2}}],[\"`y`\",{\"1\":{\"18\":2}}],[\"`y\",{\"1\":{\"18\":2}}],[\"`x`\",{\"1\":{\"18\":2}}],[\"`x\",{\"1\":{\"18\":2}}],[\"`none`\",{\"1\":{\"18\":1}}],[\"`myvar`\",{\"1\":{\"18\":1}}],[\"`my\",{\"1\":{\"18\":1}}],[\"`\",{\"1\":{\"17\":1,\"18\":1}}],[\"`help\",{\"1\":{\"17\":1}}],[\"```python\",{\"1\":{\"18\":1}}],[\"```\",{\"1\":{\"17\":3,\"18\":1}}],[\"500\",{\"1\":{\"39\":1}}],[\"5`\",{\"1\":{\"18\":1}}],[\"5\",{\"0\":{\"17\":1,\"33\":1,\"48\":1},\"1\":{\"18\":1,\"44\":2}}],[\"just\",{\"1\":{\"33\":3}}],[\"juice\",{\"1\":{\"16\":13}}],[\"jaden1\",{\"1\":{\"16\":2}}],[\"jaden\",{\"1\":{\"16\":23}}],[\"january\",{\"1\":{\"6\":2}}],[\"~\",{\"1\":{\"12\":1}}],[\"4\",{\"0\":{\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"31\":1,\"32\":1,\"47\":1,\"52\":1},\"1\":{\"18\":1,\"32\":4,\"44\":4,\"45\":2,\"47\":1,\"50\":1,\"51\":1}}],[\"31\",{\"1\":{\"29\":4,\"30\":2,\"32\":2}}],[\"3\",{\"0\":{\"8\":1,\"9\":1,\"10\":1,\"11\":2,\"12\":1,\"28\":1,\"29\":1,\"30\":1,\"46\":1,\"49\":1,\"50\":1,\"51\":2,\"52\":1,\"58\":1},\"1\":{\"15\":1,\"18\":6,\"32\":4,\"35\":2,\"38\":2,\"39\":2,\"44\":4,\"45\":4,\"47\":3,\"50\":1,\"51\":2}}],[\"+=\",{\"1\":{\"48\":3}}],[\"+\",{\"1\":{\"7\":3,\"44\":2,\"45\":2,\"46\":2,\"48\":1,\"49\":2}}],[\"x`\",{\"1\":{\"18\":2}}],[\"x\",{\"1\":{\"7\":8,\"18\":20,\"50\":7}}],[\"==\",{\"1\":{\"7\":1,\"47\":2,\"49\":2,\"50\":2,\"51\":2,\"52\":1}}],[\"=\",{\"1\":{\"7\":7,\"9\":3,\"10\":3,\"11\":9,\"12\":5,\"14\":3,\"15\":1,\"16\":14,\"17\":10,\"18\":18,\"24\":4,\"26\":2,\"29\":2,\"30\":1,\"32\":3,\"35\":2,\"36\":1,\"38\":2,\"39\":2,\"40\":1,\"45\":8,\"46\":1,\"47\":2,\"48\":23,\"49\":4,\"50\":2,\"51\":2,\"52\":2}}],[\"greater\",{\"1\":{\"47\":2,\"52\":2}}],[\"g\",{\"1\":{\"46\":1}}],[\"global\",{\"1\":{\"17\":1,\"18\":3}}],[\"generate\",{\"1\":{\"46\":1}}],[\"get\",{\"1\":{\"17\":2,\"39\":1}}],[\"getting\",{\"1\":{\"7\":1}}],[\"gear\",{\"1\":{\"0\":1}}],[\"gears\",{\"1\":{\"0\":2}}],[\"gearbox\",{\"1\":{\"0\":1}}],[\"giving\",{\"1\":{\"7\":1}}],[\"give\",{\"1\":{\"6\":1}}],[\"gain\",{\"1\":{\"6\":1}}],[\"91\",{\"1\":{\"46\":3}}],[\"99\",{\"1\":{\"46\":1}}],[\"9\",{\"1\":{\"18\":1,\"44\":3,\"45\":4,\"46\":2}}],[\"96\",{\"1\":{\"6\":1}}],[\"98\",{\"1\":{\"6\":1}}],[\"y\",{\"1\":{\"50\":7}}],[\"yield\",{\"1\":{\"17\":1}}],[\"yitong\",{\"1\":{\"6\":3}}],[\"yes\",{\"1\":{\"6\":1,\"9\":1}}],[\"year\",{\"1\":{\"0\":1}}],[\"your\",{\"1\":{\"46\":3}}],[\"younger\",{\"1\":{\"16\":3}}],[\"you\",{\"1\":{\"6\":3,\"16\":3,\"18\":2,\"33\":7,\"39\":3,\"46\":1}}],[\"write\",{\"1\":{\"46\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"55\":1}}],[\"wryh\",{\"1\":{\"7\":2}}],[\"work\",{\"1\":{\"33\":1}}],[\"world\",{\"1\":{\"18\":2}}],[\"would\",{\"1\":{\"33\":2}}],[\"without\",{\"1\":{\"45\":1}}],[\"within\",{\"1\":{\"27\":2,\"33\":1}}],[\"with\",{\"1\":{\"9\":1,\"17\":3,\"18\":1,\"44\":1}}],[\"willow\",{\"1\":{\"7\":1}}],[\"will\",{\"1\":{\"6\":1,\"7\":1,\"18\":3,\"33\":2}}],[\"warning\",{\"1\":{\"39\":1}}],[\"warehouse\",{\"1\":{\"33\":11}}],[\"wasting\",{\"1\":{\"33\":1}}],[\"waste\",{\"1\":{\"33\":1}}],[\"waved\",{\"1\":{\"7\":1}}],[\"want\",{\"1\":{\"33\":3}}],[\"wants\",{\"1\":{\"6\":1,\"16\":2}}],[\"wang\",{\"1\":{\"0\":1}}],[\"where\",{\"1\":{\"33\":2}}],[\"when\",{\"1\":{\"6\":1,\"33\":1}}],[\"which\",{\"1\":{\"18\":5,\"33\":3}}],[\"while\",{\"1\":{\"17\":1}}],[\"why🧐\",{\"1\":{\"33\":1}}],[\"why\",{\"1\":{\"6\":1,\"33\":2,\"39\":1}}],[\"what\",{\"0\":{\"5\":1},\"1\":{\"6\":1,\"7\":1,\"33\":1}}],[\"were\",{\"1\":{\"33\":1}}],[\"week\",{\"1\":{\"33\":1}}],[\"we\",{\"1\":{\"6\":5,\"7\":1,\"9\":1,\"33\":6,\"39\":1,\"46\":1}}],[\"highest\",{\"1\":{\"44\":1}}],[\"hire\",{\"1\":{\"33\":1}}],[\"hidden\",{\"1\":{\"18\":1}}],[\"hi\",{\"1\":{\"17\":1}}],[\"how\",{\"1\":{\"16\":1,\"55\":1}}],[\"home\",{\"1\":{\"16\":1}}],[\"headline6\",{\"0\":{\"59\":1}}],[\"headline2\",{\"0\":{\"57\":1}}],[\"headline\",{\"0\":{\"56\":1,\"58\":1}}],[\"help\",{\"1\":{\"17\":1}}],[\"hello\",{\"1\":{\"11\":2,\"12\":2,\"17\":1,\"18\":3,\"30\":2,\"32\":4,\"38\":2,\"39\":2}}],[\"here\",{\"1\":{\"3\":1,\"17\":1,\"21\":1,\"30\":1,\"32\":1,\"43\":1,\"55\":1}}],[\"hhhhhh\",{\"1\":{\"10\":1}}],[\"has\",{\"1\":{\"32\":1}}],[\"hashtag\",{\"1\":{\"7\":1}}],[\"happy\",{\"1\":{\"29\":2}}],[\"have\",{\"1\":{\"16\":2,\"39\":2,\"46\":1}}],[\"had\",{\"1\":{\"7\":1}}],[\"hand\",{\"1\":{\"48\":2}}],[\"handing\",{\"1\":{\"6\":1}}],[\"hands\",{\"1\":{\"0\":1}}],[\"editing\",{\"0\":{\"55\":1},\"2\":{\"60\":1}}],[\"equivalent\",{\"1\":{\"48\":6}}],[\"equal\",{\"1\":{\"47\":4,\"52\":2}}],[\"error\",{\"1\":{\"46\":1}}],[\"e\",{\"1\":{\"46\":1}}],[\"emphasize\",{\"1\":{\"33\":1}}],[\"empty\",{\"1\":{\"18\":1}}],[\"eg\",{\"1\":{\"30\":1,\"32\":1}}],[\"every\",{\"1\":{\"33\":1,\"39\":1}}],[\"event\",{\"1\":{\"39\":1}}],[\"even\",{\"1\":{\"27\":1,\"39\":1}}],[\"evident\",{\"1\":{\"9\":1}}],[\"element\",{\"1\":{\"27\":1,\"30\":1,\"32\":1,\"39\":1}}],[\"elements\",{\"1\":{\"27\":1,\"32\":1,\"44\":1}}],[\"elected\",{\"1\":{\"7\":1}}],[\"electrical\",{\"1\":{\"0\":1}}],[\"else\",{\"1\":{\"17\":1,\"52\":1}}],[\"elif\",{\"1\":{\"17\":1,\"52\":1}}],[\"easy\",{\"1\":{\"7\":1}}],[\"each\",{\"1\":{\"6\":5,\"9\":1,\"16\":1,\"27\":1,\"30\":1,\"32\":1,\"39\":1}}],[\"extra\",{\"1\":{\"33\":1}}],[\"execution\",{\"1\":{\"27\":1,\"30\":1,\"32\":1}}],[\"exercise\",{\"0\":{\"18\":1}}],[\"except\",{\"1\":{\"17\":1}}],[\"exchange\",{\"1\":{\"16\":1}}],[\"exclusive\",{\"1\":{\"16\":1}}],[\"exponentiation\",{\"0\":{\"51\":1},\"1\":{\"45\":1}}],[\"exploration👀\",{\"0\":{\"33\":1}}],[\"exploring\",{\"0\":{\"8\":1}}],[\"expression\",{\"1\":{\"7\":3}}],[\"experience\",{\"1\":{\"0\":1}}],[\"example🌰\",{\"1\":{\"39\":1}}],[\"example\",{\"0\":{\"6\":1},\"1\":{\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1}}],[\"examples\",{\"0\":{\"4\":1,\"24\":1,\"26\":1,\"29\":1,\"32\":1,\"35\":1,\"38\":1},\"1\":{\"36\":1,\"39\":1,\"47\":1}}],[\"enough\",{\"1\":{\"33\":2}}],[\"entered\",{\"1\":{\"27\":1}}],[\"enter\",{\"1\":{\"17\":1,\"52\":2}}],[\"english\",{\"1\":{\"17\":1}}],[\"engineering\",{\"1\":{\"0\":1}}],[\"end\",{\"0\":{\"12\":1},\"1\":{\"12\":1}}],[\"end=\",{\"1\":{\"11\":2}}],[\"ending\",{\"0\":{\"11\":1}}],[\"envelope\",{\"1\":{\"6\":4}}],[\"enjoy\",{\"1\":{\"0\":1}}],[\"26\",{\"1\":{\"46\":2}}],[\"21\",{\"1\":{\"46\":1}}],[\"20231216151331535\",{\"1\":{\"44\":1}}],[\"20231216151405069\",{\"1\":{\"30\":1}}],[\"20231214105801217\",{\"1\":{\"22\":1}}],[\"2myvar\",{\"1\":{\"18\":1}}],[\"2\",{\"0\":{\"6\":1,\"7\":1,\"10\":1,\"15\":1,\"25\":1,\"26\":1,\"27\":2,\"30\":1,\"36\":1,\"39\":1,\"45\":1,\"50\":1},\"1\":{\"0\":1,\"15\":1,\"17\":1,\"18\":6,\"30\":1,\"32\":5,\"33\":1,\"35\":2,\"38\":6,\"39\":9,\"44\":8,\"45\":7,\"46\":1,\"47\":5,\"49\":1}}],[\"f\",{\"1\":{\"52\":3}}],[\"feature\",{\"1\":{\"33\":1}}],[\"february\",{\"1\":{\"6\":2}}],[\"floor\",{\"1\":{\"45\":1}}],[\"float\",{\"0\":{\"23\":1},\"1\":{\"24\":9,\"44\":3}}],[\"flat\",{\"1\":{\"6\":1}}],[\"following\",{\"1\":{\"18\":3,\"46\":1}}],[\"for\",{\"0\":{\"10\":1,\"17\":1},\"1\":{\"0\":1,\"6\":3,\"7\":2,\"17\":1,\"18\":1,\"33\":3,\"39\":1,\"45\":1,\"46\":1}}],[\"fulfill\",{\"1\":{\"46\":1}}],[\"function\",{\"1\":{\"17\":1}}],[\"future\",{\"1\":{\"7\":1}}],[\"false\",{\"1\":{\"17\":1,\"18\":11,\"29\":2,\"38\":2,\"39\":2}}],[\"from\",{\"0\":{\"4\":1},\"1\":{\"6\":1,\"7\":2,\"9\":1,\"17\":1,\"27\":2,\"30\":3,\"32\":2,\"49\":1}}],[\"finally\",{\"1\":{\"7\":1,\"17\":1}}],[\"file\",{\"1\":{\"6\":1}}],[\"filter\",{\"1\":{\"0\":1}}],[\"figures\",{\"1\":{\"7\":3}}],[\"figure\",{\"1\":{\"0\":1,\"7\":2}}],[\"first\",{\"1\":{\"0\":1,\"46\":1,\"47\":4}}],[\"based\",{\"1\":{\"46\":1}}],[\"basic\",{\"1\":{\"18\":1,\"30\":1}}],[\"bag\",{\"1\":{\"6\":1}}],[\"built\",{\"1\":{\"17\":1}}],[\"building\",{\"1\":{\"0\":1}}],[\"but\",{\"1\":{\"17\":1,\"33\":1,\"39\":1}}],[\"break\",{\"1\":{\"17\":1}}],[\"brothers\",{\"1\":{\"16\":2}}],[\"brother\",{\"1\":{\"16\":4}}],[\"branch\",{\"1\":{\"7\":1}}],[\"b\",{\"1\":{\"9\":2,\"10\":2,\"11\":6,\"12\":2,\"14\":2,\"15\":2,\"18\":4,\"48\":12,\"49\":7}}],[\"bool\",{\"0\":{\"40\":1},\"1\":{\"40\":1}}],[\"boolean\",{\"0\":{\"40\":1}}],[\"booleans\",{\"1\":{\"36\":1,\"39\":1}}],[\"bomb\",{\"1\":{\"33\":3}}],[\"bombs\",{\"1\":{\"33\":1}}],[\"bones\",{\"1\":{\"29\":2}}],[\"both\",{\"1\":{\"16\":1}}],[\"bottom\",{\"1\":{\"7\":1}}],[\"box\",{\"1\":{\"0\":1}}],[\"because\",{\"1\":{\"33\":2}}],[\"becomes\",{\"1\":{\"27\":1}}],[\"below\",{\"1\":{\"30\":1}}],[\"before\",{\"1\":{\"18\":1}}],[\"between\",{\"1\":{\"9\":1,\"16\":1}}],[\"beginning\",{\"1\":{\"6\":1}}],[\"be\",{\"1\":{\"6\":3,\"16\":6,\"17\":3,\"18\":4,\"27\":4,\"30\":1,\"32\":1,\"33\":4,\"36\":2}}],[\"by\",{\"1\":{\"0\":1,\"7\":2,\"50\":1}}],[\"operation\",{\"0\":{\"52\":1}}],[\"operator\",{\"1\":{\"45\":8,\"47\":1,\"48\":1}}],[\"operators\",{\"0\":{\"45\":1,\"47\":1,\"48\":1},\"1\":{\"45\":1}}],[\"operands\",{\"1\":{\"47\":2}}],[\"operand\",{\"1\":{\"47\":4}}],[\"other\",{\"1\":{\"16\":1}}],[\"older\",{\"1\":{\"16\":3}}],[\"obviously\",{\"1\":{\"9\":1,\"33\":1}}],[\"original\",{\"1\":{\"46\":2}}],[\"ordered\",{\"1\":{\"39\":1}}],[\"order\",{\"1\":{\"27\":1,\"30\":1,\"32\":1,\"39\":2}}],[\"or\",{\"1\":{\"7\":1,\"17\":1,\"18\":2,\"27\":1,\"30\":1,\"32\":1,\"33\":4,\"36\":1,\"39\":2,\"46\":1,\"47\":2}}],[\"overwrite\",{\"1\":{\"7\":1}}],[\"overwritten\",{\"1\":{\"6\":1}}],[\"over\",{\"1\":{\"6\":1}}],[\"once\",{\"1\":{\"18\":1,\"27\":1,\"32\":1,\"33\":1,\"39\":1}}],[\"only\",{\"1\":{\"16\":1,\"18\":1,\"30\":1,\"33\":1,\"36\":1}}],[\"onto\",{\"1\":{\"6\":1}}],[\"one\",{\"1\":{\"6\":1,\"16\":2,\"30\":1,\"32\":1,\"33\":3,\"44\":1}}],[\"on\",{\"1\":{\"0\":1,\"6\":1,\"33\":1,\"46\":1,\"48\":1,\"55\":1}}],[\"outcome\",{\"1\":{\"29\":1}}],[\"outputs\",{\"0\":{\"10\":1},\"1\":{\"9\":1,\"47\":1}}],[\"outputting\",{\"0\":{\"9\":1},\"1\":{\"24\":4,\"26\":2,\"29\":2,\"32\":2,\"35\":2,\"38\":2}}],[\"output\",{\"0\":{\"11\":1},\"1\":{\"7\":1,\"9\":2,\"11\":2,\"12\":1,\"24\":2,\"26\":1,\"32\":1,\"35\":1,\"38\":1,\"39\":2,\"40\":1,\"46\":5,\"49\":1,\"50\":1,\"51\":1,\"52\":1}}],[\"out\",{\"0\":{\"46\":1},\"1\":{\"0\":1,\"44\":7}}],[\"of\",{\"0\":{\"27\":1,\"30\":1,\"33\":1,\"36\":1,\"39\":1,\"44\":1,\"49\":1,\"50\":1},\"1\":{\"0\":6,\"6\":2,\"7\":6,\"16\":3,\"17\":2,\"18\":8,\"27\":1,\"33\":4,\"36\":2,\"44\":1,\"46\":9,\"49\":1,\"50\":1,\"51\":1}}],[\"username\",{\"1\":{\"17\":1}}],[\"user\",{\"1\":{\"17\":1,\"33\":3}}],[\"use\",{\"1\":{\"17\":1,\"33\":1}}],[\"used\",{\"1\":{\"17\":1,\"45\":1}}],[\"using\",{\"0\":{\"12\":1},\"1\":{\"0\":2,\"7\":1,\"9\":1,\"16\":1,\"17\":1,\"18\":1,\"33\":1}}],[\"uppercase\",{\"1\":{\"17\":1}}],[\"uniqueness\",{\"1\":{\"39\":1}}],[\"university\",{\"1\":{\"0\":1}}],[\"unordered\",{\"1\":{\"36\":1,\"39\":1}}],[\"unnecessary\",{\"1\":{\"33\":1}}],[\"unchanged\",{\"1\":{\"33\":1}}],[\"underscores\",{\"1\":{\"17\":1}}],[\"understood\",{\"1\":{\"16\":6}}],[\"understanding\",{\"0\":{\"4\":1},\"1\":{\"7\":1}}],[\"utilizing\",{\"1\":{\"0\":1}}],[\"large\",{\"1\":{\"33\":1}}],[\"latitude\",{\"1\":{\"33\":2}}],[\"lambda\",{\"1\":{\"17\":1}}],[\"lst\",{\"1\":{\"29\":6,\"30\":1,\"32\":1}}],[\"location\",{\"1\":{\"33\":1}}],[\"longitude\",{\"1\":{\"33\":2}}],[\"logs📔\",{\"1\":{\"33\":1}}],[\"log\",{\"1\":{\"33\":1}}],[\"logic\",{\"1\":{\"7\":1}}],[\"lowercase\",{\"1\":{\"17\":1}}],[\"look\",{\"1\":{\"7\":1}}],[\"less\",{\"1\":{\"47\":2,\"52\":2}}],[\"left\",{\"1\":{\"7\":1,\"27\":2,\"30\":6,\"32\":6,\"48\":1}}],[\"lei\",{\"1\":{\"6\":1}}],[\"let\",{\"1\":{\"6\":1}}],[\"lego\",{\"1\":{\"0\":1}}],[\"lists\",{\"0\":{\"30\":1,\"33\":1},\"1\":{\"30\":1,\"33\":5,\"39\":1}}],[\"list\",{\"0\":{\"28\":1},\"1\":{\"17\":2,\"18\":1,\"29\":2,\"30\":1}}],[\"listing\",{\"1\":{\"6\":1}}],[\"liu\",{\"1\":{\"6\":3}}],[\"li\",{\"1\":{\"6\":1}}],[\"life\",{\"0\":{\"4\":1},\"1\":{\"7\":2}}],[\"like\",{\"1\":{\"0\":1,\"16\":1,\"33\":3}}],[\"ltspice\",{\"1\":{\"0\":1}}],[\"18\",{\"1\":{\"46\":2}}],[\"19\",{\"1\":{\"46\":2}}],[\"17\",{\"1\":{\"35\":2}}],[\"16\",{\"1\":{\"18\":1}}],[\"15\",{\"1\":{\"18\":1}}],[\"14\",{\"1\":{\"18\":1}}],[\"13\",{\"1\":{\"18\":1}}],[\"12\",{\"1\":{\"18\":1,\"46\":1,\"49\":1,\"50\":1}}],[\"123abc\",{\"1\":{\"18\":1}}],[\"123\",{\"1\":{\"17\":1,\"18\":1}}],[\"1~1~1\",{\"1\":{\"12\":1}}],[\"11\",{\"1\":{\"7\":1,\"18\":1}}],[\"10\",{\"1\":{\"7\":3,\"18\":1,\"46\":8,\"48\":6,\"49\":1}}],[\"1\",{\"0\":{\"4\":1,\"5\":2,\"6\":1,\"9\":1,\"14\":1,\"23\":1,\"24\":2,\"26\":1,\"29\":1,\"32\":1,\"35\":1,\"38\":1,\"44\":1,\"49\":1,\"56\":1},\"1\":{\"0\":1,\"7\":4,\"9\":6,\"10\":3,\"11\":15,\"12\":3,\"14\":1,\"15\":1,\"17\":7,\"18\":6,\"24\":6,\"27\":1,\"29\":4,\"30\":3,\"32\":11,\"33\":1,\"35\":10,\"38\":6,\"39\":11,\"44\":8,\"45\":6,\"46\":2,\"47\":3,\"48\":1}}],[\"during\",{\"1\":{\"27\":1,\"30\":1,\"32\":1}}],[\"deterministic\",{\"1\":{\"39\":2}}],[\"detecting\",{\"1\":{\"24\":4,\"26\":2,\"29\":2,\"32\":2,\"35\":2,\"38\":2}}],[\"description\",{\"1\":{\"45\":1,\"47\":1,\"48\":1}}],[\"descendants\",{\"1\":{\"7\":1}}],[\"destroy\",{\"1\":{\"18\":1}}],[\"deletion\",{\"1\":{\"39\":1}}],[\"deleting\",{\"1\":{\"18\":1,\"33\":1}}],[\"deleted\",{\"1\":{\"18\":1,\"30\":1,\"36\":1}}],[\"delete\",{\"1\":{\"18\":2,\"27\":1,\"32\":1,\"39\":1}}],[\"delegate\",{\"1\":{\"7\":1}}],[\"delegates\",{\"1\":{\"7\":1}}],[\"del\",{\"1\":{\"17\":1,\"18\":2}}],[\"definite\",{\"1\":{\"39\":1}}],[\"definitely\",{\"1\":{\"33\":1}}],[\"def\",{\"1\":{\"17\":1,\"18\":1}}],[\"default\",{\"1\":{\"9\":1}}],[\"defaulting\",{\"1\":{\"9\":1}}],[\"don\",{\"1\":{\"16\":1,\"33\":2}}],[\"dongmei\",{\"1\":{\"6\":1}}],[\"doesn\",{\"1\":{\"39\":2}}],[\"does\",{\"1\":{\"6\":1}}],[\"do\",{\"1\":{\"6\":2,\"16\":1,\"33\":1}}],[\"data\",{\"0\":{\"9\":1,\"21\":1,\"22\":1},\"1\":{\"6\":2,\"18\":1,\"24\":4,\"26\":2,\"29\":2,\"30\":4,\"32\":5,\"33\":3,\"35\":2,\"36\":2,\"38\":2,\"39\":2}}],[\"day\",{\"1\":{\"6\":1}}],[\"daily\",{\"0\":{\"4\":1}}],[\"dancing\",{\"1\":{\"0\":1}}],[\"divided\",{\"1\":{\"50\":1}}],[\"division\",{\"0\":{\"50\":1},\"1\":{\"44\":1,\"45\":2,\"50\":3}}],[\"difference\",{\"0\":{\"49\":1},\"1\":{\"49\":5}}],[\"different\",{\"0\":{\"15\":1},\"1\":{\"0\":4}}],[\"digits\",{\"1\":{\"46\":1}}],[\"digit\",{\"1\":{\"46\":1}}],[\"die\",{\"1\":{\"39\":2}}],[\"dict\",{\"0\":{\"34\":1},\"1\":{\"35\":2}}],[\"dictionary\",{\"0\":{\"34\":1,\"36\":1},\"1\":{\"36\":1}}],[\"directly\",{\"1\":{\"6\":1,\"24\":4,\"26\":2,\"29\":2,\"32\":2,\"33\":1,\"35\":2,\"38\":2}}],[\"didn\",{\"1\":{\"6\":1}}],[\"did\",{\"1\":{\"0\":1,\"6\":3}}],[\"d\",{\"1\":{\"0\":1,\"33\":2,\"35\":6,\"36\":1}}],[\"please\",{\"1\":{\"52\":2}}],[\"platform\",{\"1\":{\"33\":1}}],[\"placed\",{\"1\":{\"27\":1}}],[\"p\",{\"1\":{\"52\":10}}],[\"person\",{\"1\":{\"33\":1}}],[\"people\",{\"1\":{\"7\":3}}],[\"pairs\",{\"1\":{\"36\":1}}],[\"pass\",{\"1\":{\"17\":1}}],[\"passing\",{\"1\":{\"7\":1}}],[\"paper\",{\"1\":{\"6\":2}}],[\"precision\",{\"1\":{\"44\":1}}],[\"precedence\",{\"1\":{\"44\":1}}],[\"practice\",{\"0\":{\"16\":1}}],[\"prints\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1}}],[\"printed\",{\"1\":{\"17\":2}}],[\"print\",{\"0\":{\"8\":1,\"11\":1},\"1\":{\"7\":4,\"9\":2,\"10\":1,\"11\":9,\"12\":1,\"14\":1,\"15\":1,\"16\":12,\"17\":4,\"18\":2,\"24\":6,\"26\":3,\"29\":3,\"32\":3,\"35\":3,\"38\":3,\"39\":2,\"40\":2,\"46\":2,\"47\":6,\"49\":2,\"50\":2,\"51\":2,\"52\":3}}],[\"product\",{\"1\":{\"50\":4}}],[\"program\",{\"1\":{\"7\":1,\"30\":1}}],[\"project\",{\"1\":{\"0\":2}}],[\"projects\",{\"1\":{\"0\":1}}],[\"put\",{\"1\":{\"6\":1}}],[\"picoscope\",{\"1\":{\"0\":1}}],[\"python\",{\"0\":{\"63\":1},\"1\":{\"0\":1,\"17\":4,\"18\":12,\"30\":2,\"32\":1,\"36\":1,\"46\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1},\"2\":{\"19\":1,\"20\":1,\"41\":1,\"42\":1,\"53\":1,\"54\":1}}],[\"possible\",{\"1\":{\"39\":1}}],[\"possesses\",{\"1\":{\"30\":2,\"32\":1,\"36\":1}}],[\"posts\",{\"1\":{\"33\":2}}],[\"pouring\",{\"1\":{\"16\":6}}],[\"pour\",{\"1\":{\"16\":1}}],[\"points\",{\"1\":{\"6\":3}}],[\"power\",{\"1\":{\"0\":1,\"51\":4}}],[\"pop\",{\"1\":{\"0\":1}}],[\"photographing\",{\"1\":{\"0\":1}}],[\"know\",{\"1\":{\"33\":1}}],[\"keep\",{\"1\":{\"33\":1}}],[\"keeps\",{\"1\":{\"33\":1}}],[\"keys\",{\"1\":{\"36\":2}}],[\"key2\",{\"1\":{\"36\":1}}],[\"key1\",{\"1\":{\"36\":1}}],[\"key\",{\"1\":{\"36\":2}}],[\"keyboard\",{\"1\":{\"27\":1}}],[\"keyword\",{\"1\":{\"17\":2}}],[\"keywords\",{\"1\":{\"17\":3,\"18\":1}}],[\"kids\",{\"1\":{\"16\":1}}],[\"k\",{\"1\":{\"0\":1}}],[\"newmeric\",{\"0\":{\"43\":1}}],[\"new\",{\"1\":{\"33\":2,\"46\":3}}],[\"needs\",{\"1\":{\"33\":1}}],[\"need\",{\"1\":{\"6\":1,\"33\":8,\"46\":1}}],[\"num\",{\"1\":{\"24\":12,\"46\":10}}],[\"numeric\",{\"0\":{\"23\":1,\"44\":1},\"1\":{\"39\":1}}],[\"number\",{\"0\":{\"46\":1},\"1\":{\"17\":2,\"18\":1,\"46\":8}}],[\"numbers\",{\"0\":{\"49\":1,\"50\":1},\"1\":{\"17\":1,\"36\":1,\"46\":4,\"49\":1,\"50\":1,\"51\":1,\"52\":1}}],[\"nuwa\",{\"1\":{\"7\":4}}],[\"n\",{\"1\":{\"11\":3,\"17\":3,\"51\":8}}],[\"npc\",{\"1\":{\"7\":2}}],[\"naming\",{\"0\":{\"17\":1}}],[\"nameerror\",{\"1\":{\"18\":1}}],[\"names\",{\"1\":{\"17\":4,\"18\":4}}],[\"named\",{\"1\":{\"16\":2}}],[\"name2\",{\"1\":{\"7\":2}}],[\"name1\",{\"1\":{\"7\":5}}],[\"name\",{\"1\":{\"0\":1,\"7\":3,\"17\":1,\"35\":2}}],[\"national\",{\"1\":{\"7\":1}}],[\"now\",{\"1\":{\"33\":1}}],[\"nonlocal\",{\"1\":{\"17\":1}}],[\"none\",{\"1\":{\"17\":1}}],[\"note⚠️\",{\"1\":{\"27\":1,\"30\":1,\"32\":2,\"39\":1}}],[\"notes\",{\"2\":{\"20\":1,\"42\":1,\"54\":1}}],[\"notebook\",{\"0\":{\"63\":1},\"2\":{\"19\":1,\"41\":1,\"53\":1}}],[\"not\",{\"1\":{\"7\":1,\"17\":1,\"33\":4,\"39\":2,\"47\":1}}],[\"no\",{\"1\":{\"7\":1,\"18\":1,\"33\":1,\"39\":2}}],[\"novels\",{\"1\":{\"0\":1}}],[\"rolling\",{\"1\":{\"39\":1}}],[\"roll\",{\"1\":{\"39\":1}}],[\"raised\",{\"1\":{\"51\":1}}],[\"raise\",{\"1\":{\"17\":1,\"18\":1}}],[\"run\",{\"1\":{\"39\":1}}],[\"rules\",{\"0\":{\"17\":1},\"1\":{\"46\":1}}],[\"ruoyihan\",{\"1\":{\"0\":1}}],[\"right\",{\"1\":{\"7\":1,\"27\":2,\"30\":6,\"32\":6,\"48\":1}}],[\"rights\",{\"1\":{\"7\":1}}],[\"reversal\",{\"1\":{\"46\":3}}],[\"reversed\",{\"1\":{\"46\":1}}],[\"reverse\",{\"1\":{\"46\":1}}],[\"requirements\",{\"1\":{\"46\":1}}],[\"requires\",{\"1\":{\"39\":1}}],[\"respective\",{\"1\":{\"52\":1}}],[\"resulting\",{\"1\":{\"44\":1,\"47\":1}}],[\"result\",{\"1\":{\"44\":1,\"49\":4,\"50\":1,\"52\":1}}],[\"resources\",{\"1\":{\"33\":1}}],[\"repeated\",{\"1\":{\"39\":1}}],[\"representing\",{\"1\":{\"18\":1}}],[\"represents\",{\"1\":{\"7\":1,\"18\":2}}],[\"represent\",{\"1\":{\"7\":3}}],[\"recreate\",{\"1\":{\"33\":1}}],[\"recording\",{\"1\":{\"33\":1}}],[\"recorded\",{\"1\":{\"6\":1}}],[\"reminder\",{\"2\":{\"61\":1}}],[\"remainder\",{\"1\":{\"45\":2,\"51\":1}}],[\"remain\",{\"1\":{\"33\":1}}],[\"removed\",{\"1\":{\"39\":2}}],[\"remove\",{\"1\":{\"18\":1}}],[\"return\",{\"1\":{\"17\":1,\"33\":1}}],[\"refers\",{\"1\":{\"27\":1,\"30\":1,\"32\":2}}],[\"refer\",{\"1\":{\"18\":1}}],[\"reference\",{\"1\":{\"7\":1}}],[\"refrigerator\",{\"1\":{\"6\":1}}],[\"re\",{\"1\":{\"6\":3}}],[\"really\",{\"1\":{\"0\":1}}],[\"reading\",{\"1\":{\"0\":1}}],[\"typora\",{\"1\":{\"55\":1}}],[\"types\",{\"0\":{\"22\":1,\"23\":1,\"44\":1},\"1\":{\"18\":1,\"30\":3,\"32\":1,\"36\":1,\"39\":2}}],[\"type\",{\"0\":{\"43\":1},\"1\":{\"18\":2,\"24\":12,\"26\":6,\"27\":1,\"29\":6,\"30\":2,\"32\":8,\"35\":6,\"36\":1,\"38\":6,\"40\":1}}],[\"takes\",{\"1\":{\"52\":1}}],[\"tips\",{\"1\":{\"55\":1},\"2\":{\"61\":1}}],[\"tip\",{\"1\":{\"45\":1}}],[\"times\",{\"1\":{\"39\":2}}],[\"time\",{\"1\":{\"0\":1,\"33\":1,\"39\":1}}],[\"trying\",{\"0\":{\"46\":1}}],[\"try\",{\"1\":{\"17\":1,\"47\":1}}],[\"true\",{\"1\":{\"17\":1,\"18\":11,\"29\":2,\"40\":2}}],[\"transformation\",{\"0\":{\"46\":1}}],[\"translated\",{\"1\":{\"3\":1,\"21\":1,\"43\":1}}],[\"track\",{\"1\":{\"33\":4}}],[\"tracks\",{\"1\":{\"33\":1}}],[\"travelling\",{\"1\":{\"0\":1}}],[\"two\",{\"1\":{\"16\":1,\"32\":1,\"33\":1,\"46\":6,\"47\":2,\"49\":1,\"50\":1,\"51\":1,\"52\":1}}],[\"t\",{\"1\":{\"6\":2,\"16\":1,\"24\":4,\"26\":2,\"29\":2,\"32\":2,\"33\":2,\"35\":2,\"38\":2,\"39\":3}}],[\"tup\",{\"1\":{\"32\":6,\"35\":2}}],[\"tuples\",{\"0\":{\"33\":1},\"1\":{\"32\":2,\"33\":5,\"36\":1,\"39\":1}}],[\"tuple\",{\"0\":{\"31\":1},\"1\":{\"32\":3,\"33\":1}}],[\"tuning\",{\"1\":{\"0\":1}}],[\"turning\",{\"1\":{\"0\":1}}],[\"template\",{\"1\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1}}],[\"teacher\",{\"1\":{\"6\":2}}],[\"team\",{\"1\":{\"0\":1}}],[\"test\",{\"1\":{\"6\":2,\"49\":1,\"50\":1,\"51\":1}}],[\"term\",{\"1\":{\"0\":1}}],[\"top\",{\"1\":{\"7\":1}}],[\"to\",{\"0\":{\"14\":1,\"15\":1,\"21\":1},\"1\":{\"0\":2,\"6\":4,\"7\":7,\"9\":1,\"14\":1,\"17\":1,\"18\":2,\"27\":4,\"30\":8,\"32\":9,\"33\":14,\"39\":1,\"46\":2,\"47\":2,\"48\":7,\"51\":1,\"52\":2,\"55\":1}}],[\"than\",{\"1\":{\"47\":4,\"52\":4}}],[\"that\",{\"1\":{\"9\":1,\"27\":1,\"33\":2,\"49\":1,\"50\":1,\"51\":1,\"52\":1}}],[\"things\",{\"1\":{\"6\":1}}],[\"this\",{\"1\":{\"0\":1,\"6\":1,\"7\":2,\"9\":1,\"16\":6,\"39\":1}}],[\"three\",{\"0\":{\"27\":1,\"30\":1},\"1\":{\"0\":1}}],[\"these\",{\"1\":{\"46\":1}}],[\"there\",{\"1\":{\"16\":1,\"33\":5}}],[\"they\",{\"1\":{\"7\":1,\"33\":2}}],[\"their\",{\"1\":{\"7\":1,\"16\":1,\"49\":1,\"50\":1}}],[\"then\",{\"1\":{\"6\":1,\"18\":2,\"46\":3}}],[\"theory\",{\"1\":{\"0\":1}}],[\"themselves\",{\"1\":{\"7\":1}}],[\"them\",{\"1\":{\"0\":1,\"9\":1,\"18\":1,\"52\":1}}],[\"the\",{\"0\":{\"10\":1,\"11\":1,\"14\":1},\"1\":{\"0\":5,\"3\":1,\"6\":13,\"7\":14,\"9\":1,\"14\":1,\"16\":5,\"17\":2,\"18\":10,\"21\":1,\"27\":2,\"30\":2,\"32\":3,\"33\":10,\"39\":1,\"43\":1,\"44\":3,\"46\":18,\"47\":10,\"48\":3,\"49\":1,\"50\":1,\"51\":1,\"52\":2}}],[\"suppose\",{\"1\":{\"46\":3}}],[\"sum\",{\"0\":{\"49\":1},\"1\":{\"46\":4,\"49\":6}}],[\"suitable🙅\",{\"1\":{\"39\":1}}],[\"suitable\",{\"1\":{\"33\":4}}],[\"subtracted\",{\"1\":{\"49\":1}}],[\"subtraction\",{\"1\":{\"45\":1}}],[\"sub\",{\"1\":{\"27\":1}}],[\"such\",{\"1\":{\"18\":1}}],[\"sure\",{\"1\":{\"3\":1}}],[\"system\",{\"1\":{\"17\":1,\"33\":1}}],[\"sad\",{\"1\":{\"29\":2}}],[\"same\",{\"0\":{\"14\":1},\"1\":{\"14\":1,\"18\":1}}],[\"say\",{\"1\":{\"6\":2,\"7\":1,\"39\":1}}],[\"str\",{\"0\":{\"25\":1},\"1\":{\"26\":2}}],[\"string\",{\"0\":{\"25\":1},\"1\":{\"26\":6,\"27\":3,\"46\":1}}],[\"strings\",{\"0\":{\"27\":1},\"1\":{\"18\":1,\"27\":2,\"36\":1,\"39\":1}}],[\"status\",{\"1\":{\"33\":3}}],[\"static\",{\"1\":{\"18\":1}}],[\"statement\",{\"1\":{\"7\":1}}],[\"statements\",{\"0\":{\"7\":1}}],[\"starts\",{\"1\":{\"27\":2,\"30\":2,\"32\":2}}],[\"start\",{\"1\":{\"17\":2,\"18\":1}}],[\"stored\",{\"1\":{\"33\":1}}],[\"store\",{\"1\":{\"6\":1,\"18\":1,\"33\":2}}],[\"studying\",{\"1\":{\"0\":1}}],[\"student\",{\"1\":{\"0\":1,\"6\":3}}],[\"side\",{\"1\":{\"48\":2}}],[\"simultaneous\",{\"0\":{\"10\":1}}],[\"simultaneously\",{\"0\":{\"9\":1,\"12\":1,\"14\":1,\"15\":1},\"1\":{\"9\":1,\"14\":1,\"18\":1}}],[\"similar\",{\"1\":{\"7\":1,\"33\":1}}],[\"similarities\",{\"1\":{\"6\":1}}],[\"size\",{\"1\":{\"6\":1}}],[\"signal\",{\"1\":{\"0\":1}}],[\"swell\",{\"1\":{\"6\":1}}],[\"software\",{\"1\":{\"33\":1}}],[\"social\",{\"1\":{\"33\":1}}],[\"so\",{\"1\":{\"6\":2,\"7\":2,\"9\":1,\"33\":2,\"39\":1}}],[\"someone\",{\"1\":{\"33\":2}}],[\"some\",{\"1\":{\"0\":2,\"55\":1}}],[\"sheet\",{\"1\":{\"6\":1}}],[\"should\",{\"1\":{\"6\":1,\"33\":1,\"46\":3}}],[\"share\",{\"1\":{\"0\":1}}],[\"score\",{\"1\":{\"6\":3}}],[\"scores\",{\"1\":{\"6\":3}}],[\"s\",{\"1\":{\"3\":1,\"6\":7,\"7\":3,\"9\":1,\"16\":4,\"17\":2,\"21\":1,\"33\":7,\"43\":1}}],[\"second\",{\"1\":{\"46\":1,\"47\":4,\"52\":1}}],[\"secret\",{\"1\":{\"18\":1}}],[\"sets\",{\"1\":{\"39\":4}}],[\"set1\",{\"1\":{\"38\":6,\"39\":4}}],[\"set\",{\"0\":{\"37\":1,\"39\":1},\"1\":{\"38\":2,\"39\":1}}],[\"series\",{\"1\":{\"36\":1}}],[\"sensitive\",{\"1\":{\"17\":1,\"18\":1}}],[\"sensors\",{\"1\":{\"0\":1}}],[\"sep=\",{\"1\":{\"10\":1}}],[\"separator\",{\"0\":{\"10\":1}}],[\"separate\",{\"1\":{\"6\":1}}],[\"sep\",{\"0\":{\"12\":1},\"1\":{\"9\":1,\"12\":1}}],[\"see\",{\"1\":{\"6\":1,\"47\":1}}],[\"self\",{\"2\":{\"1\":1}}],[\"specifying\",{\"1\":{\"39\":1}}],[\"special\",{\"1\":{\"18\":1}}],[\"speed\",{\"1\":{\"0\":1}}],[\"spaces\",{\"1\":{\"17\":1,\"27\":1}}],[\"space\",{\"1\":{\"6\":5,\"7\":1,\"9\":2,\"33\":3}}],[\"spare\",{\"1\":{\"0\":1}}],[\"articles\",{\"1\":{\"55\":1}}],[\"article\",{\"0\":{\"55\":1,\"62\":1,\"64\":1},\"2\":{\"60\":1}}],[\"arithmetic\",{\"0\":{\"45\":1},\"1\":{\"45\":2}}],[\"are\",{\"1\":{\"7\":2,\"17\":1,\"18\":1,\"33\":4,\"39\":3,\"47\":2,\"55\":1}}],[\"age\",{\"1\":{\"35\":2}}],[\"available\",{\"1\":{\"33\":2}}],[\"avoid\",{\"1\":{\"17\":1}}],[\"addition\",{\"1\":{\"45\":1}}],[\"adding\",{\"1\":{\"33\":1}}],[\"added\",{\"1\":{\"30\":1,\"36\":1,\"39\":1}}],[\"add\",{\"1\":{\"27\":1,\"32\":1,\"33\":3}}],[\"advanced\",{\"0\":{\"13\":1}}],[\"await\",{\"1\":{\"17\":1}}],[\"a1b2c3\",{\"1\":{\"17\":1}}],[\"access\",{\"1\":{\"18\":1}}],[\"accidentally\",{\"1\":{\"16\":1}}],[\"acquired\",{\"1\":{\"0\":1,\"7\":1}}],[\"automatically\",{\"1\":{\"39\":1}}],[\"author\",{\"2\":{\"2\":1}}],[\"austin1\",{\"1\":{\"16\":4}}],[\"austin\",{\"1\":{\"16\":23}}],[\"after\",{\"1\":{\"7\":1}}],[\"atomic\",{\"1\":{\"33\":3}}],[\"attempting\",{\"1\":{\"18\":1}}],[\"at\",{\"1\":{\"7\":1,\"16\":1}}],[\"allow\",{\"1\":{\"39\":1}}],[\"allocates\",{\"1\":{\"6\":1}}],[\"allocate\",{\"1\":{\"6\":2}}],[\"also\",{\"1\":{\"6\":2,\"18\":2}}],[\"appropriate\",{\"1\":{\"6\":1}}],[\"applied\",{\"1\":{\"0\":1}}],[\"ask\",{\"1\":{\"33\":1}}],[\"async\",{\"1\":{\"17\":1}}],[\"assumption\",{\"1\":{\"33\":2}}],[\"assumptions\",{\"1\":{\"33\":1}}],[\"assert\",{\"1\":{\"17\":1,\"49\":2,\"50\":2,\"51\":2,\"52\":3}}],[\"assigns\",{\"1\":{\"48\":1}}],[\"assigned\",{\"1\":{\"7\":2,\"18\":3}}],[\"assigning\",{\"0\":{\"14\":1,\"15\":1},\"1\":{\"7\":1,\"14\":1}}],[\"assignment\",{\"0\":{\"7\":1,\"13\":1,\"48\":1},\"1\":{\"7\":1,\"16\":6,\"18\":2}}],[\"assign\",{\"1\":{\"6\":1}}],[\"as\",{\"1\":{\"6\":1,\"16\":6,\"17\":6,\"18\":1,\"27\":1,\"30\":1,\"32\":1,\"52\":1}}],[\"anything\",{\"1\":{\"27\":1}}],[\"any\",{\"1\":{\"17\":1,\"27\":3,\"30\":2,\"32\":1,\"36\":1}}],[\"annotations\",{\"1\":{\"7\":1}}],[\"an\",{\"0\":{\"6\":1},\"1\":{\"6\":2,\"16\":1,\"18\":1,\"27\":1,\"33\":2,\"39\":2,\"46\":2,\"52\":1}}],[\"and\",{\"0\":{\"12\":1,\"49\":1,\"50\":1,\"51\":1},\"1\":{\"0\":5,\"6\":5,\"7\":1,\"16\":5,\"17\":3,\"18\":1,\"24\":4,\"26\":2,\"29\":2,\"30\":2,\"32\":4,\"33\":7,\"35\":2,\"36\":1,\"38\":2,\"39\":1,\"46\":7,\"47\":1,\"49\":3,\"50\":3,\"51\":3,\"52\":2}}],[\"above\",{\"1\":{\"47\":1}}],[\"about\",{\"0\":{\"0\":1}}],[\"able\",{\"1\":{\"5\":1}}],[\"a\",{\"0\":{\"5\":1},\"1\":{\"0\":2,\"6\":3,\"7\":5,\"9\":3,\"10\":2,\"11\":6,\"12\":2,\"14\":2,\"15\":2,\"16\":1,\"17\":4,\"18\":14,\"27\":4,\"33\":15,\"36\":1,\"39\":5,\"44\":3,\"46\":1,\"48\":25,\"49\":7}}],[\"am\",{\"1\":{\"0\":1}}],[\"imagine\",{\"1\":{\"46\":1}}],[\"image\",{\"1\":{\"22\":1,\"30\":1,\"44\":1}}],[\"immutable\",{\"1\":{\"36\":1,\"39\":1}}],[\"immutability\",{\"1\":{\"27\":2,\"32\":2}}],[\"import\",{\"1\":{\"17\":1,\"18\":1}}],[\"if\",{\"1\":{\"16\":1,\"17\":1,\"18\":2,\"33\":4,\"39\":3,\"44\":1,\"47\":6,\"52\":1}}],[\"items\",{\"1\":{\"33\":1,\"39\":1}}],[\"it\",{\"0\":{\"46\":1},\"1\":{\"6\":7,\"7\":1,\"9\":1,\"18\":1,\"33\":3}}],[\"input\",{\"1\":{\"46\":4,\"52\":3}}],[\"individual\",{\"1\":{\"46\":1}}],[\"index\",{\"1\":{\"27\":3,\"30\":4,\"32\":4,\"39\":2}}],[\"involves\",{\"1\":{\"44\":1}}],[\"includes\",{\"1\":{\"30\":1}}],[\"inside\",{\"1\":{\"27\":1}}],[\"instance\",{\"1\":{\"6\":1}}],[\"inability\",{\"1\":{\"27\":1,\"32\":1}}],[\"initializing\",{\"1\":{\"7\":1}}],[\"initially\",{\"1\":{\"6\":1}}],[\"int\",{\"0\":{\"23\":1},\"1\":{\"24\":8,\"35\":2,\"52\":2}}],[\"into\",{\"1\":{\"16\":2}}],[\"introduction\",{\"0\":{\"21\":1},\"2\":{\"1\":1}}],[\"integer\",{\"1\":{\"24\":1,\"46\":2,\"52\":2}}],[\"integers\",{\"1\":{\"18\":1,\"46\":1}}],[\"integrated\",{\"1\":{\"0\":1}}],[\"interesting\",{\"1\":{\"0\":1}}],[\"in\",{\"1\":{\"0\":4,\"6\":7,\"17\":3,\"18\":11,\"30\":1,\"32\":1,\"39\":1,\"44\":8,\"55\":1}}],[\"i\",{\"1\":{\"0\":4,\"7\":1}}],[\"issues\",{\"1\":{\"44\":1}}],[\"isn\",{\"1\":{\"6\":1,\"39\":1}}],[\"is\",{\"0\":{\"5\":1},\"1\":{\"0\":1,\"6\":2,\"7\":1,\"17\":2,\"18\":5,\"24\":4,\"26\":2,\"29\":2,\"30\":2,\"32\":4,\"33\":2,\"35\":2,\"38\":2,\"39\":2,\"44\":2,\"46\":6,\"47\":4,\"48\":6,\"52\":3}}],[\"checks\",{\"1\":{\"47\":6}}],[\"changing\",{\"1\":{\"33\":1}}],[\"changeable\",{\"1\":{\"33\":1}}],[\"changed\",{\"1\":{\"18\":1,\"27\":1,\"32\":1}}],[\"change\",{\"1\":{\"5\":1,\"6\":1,\"18\":4,\"33\":1,\"39\":1}}],[\"character\",{\"1\":{\"27\":2}}],[\"characters\",{\"1\":{\"27\":2}}],[\"characteristics\",{\"0\":{\"27\":1,\"30\":1,\"36\":1,\"39\":1,\"44\":1}}],[\"cup\",{\"1\":{\"16\":4}}],[\"cups\",{\"1\":{\"16\":3}}],[\"current\",{\"1\":{\"6\":2}}],[\"currently\",{\"1\":{\"0\":1}}],[\"c\",{\"1\":{\"9\":2,\"10\":2,\"11\":6,\"12\":2,\"14\":2,\"15\":2,\"18\":4}}],[\"creates\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"create\",{\"1\":{\"33\":1}}],[\"created\",{\"1\":{\"0\":1,\"27\":1,\"32\":1,\"33\":1}}],[\"creating\",{\"0\":{\"7\":1},\"1\":{\"33\":1}}],[\"claim\",{\"1\":{\"39\":1}}],[\"class\",{\"1\":{\"6\":3,\"17\":1}}],[\"clearly\",{\"1\":{\"6\":2,\"39\":1}}],[\"counts\",{\"1\":{\"27\":1,\"30\":1,\"32\":1}}],[\"could\",{\"1\":{\"6\":1,\"33\":1}}],[\"coke\",{\"1\":{\"16\":3}}],[\"cola\",{\"1\":{\"16\":3}}],[\"code\",{\"0\":{\"24\":1,\"26\":1,\"29\":1,\"32\":1,\"35\":1,\"38\":1},\"1\":{\"7\":1,\"27\":1,\"32\":1,\"46\":4,\"49\":2,\"50\":2,\"51\":2,\"52\":2}}],[\"combination\",{\"1\":{\"17\":1}}],[\"comments\",{\"1\":{\"7\":1}}],[\"compares\",{\"1\":{\"52\":1}}],[\"comparing\",{\"0\":{\"47\":1}}],[\"comparison\",{\"0\":{\"47\":1,\"52\":1},\"1\":{\"52\":1}}],[\"comprised\",{\"1\":{\"36\":1}}],[\"composition\",{\"1\":{\"36\":1}}],[\"computer\",{\"1\":{\"6\":1}}],[\"compile\",{\"1\":{\"6\":1}}],[\"condition\",{\"1\":{\"40\":3}}],[\"content\",{\"1\":{\"18\":2}}],[\"contain\",{\"1\":{\"17\":1}}],[\"continue\",{\"1\":{\"17\":1}}],[\"controlling\",{\"1\":{\"0\":1}}],[\"congress\",{\"1\":{\"7\":1}}],[\"copy\",{\"1\":{\"6\":1}}],[\"calculates\",{\"1\":{\"45\":2,\"49\":1,\"50\":1,\"51\":1}}],[\"calculations\",{\"1\":{\"45\":1}}],[\"called\",{\"1\":{\"27\":1}}],[\"call\",{\"1\":{\"7\":1}}],[\"case\",{\"1\":{\"17\":1,\"18\":1}}],[\"cannot\",{\"1\":{\"17\":6,\"18\":1,\"27\":1,\"32\":1,\"39\":1}}],[\"can\",{\"1\":{\"6\":1,\"7\":2,\"9\":1,\"16\":6,\"17\":1,\"18\":4,\"27\":3,\"30\":1,\"33\":2,\"36\":2,\"39\":2}}],[\"capacity\",{\"1\":{\"5\":1}}],[\"cambridge\",{\"1\":{\"0\":1}}],[\"circuits\",{\"1\":{\"0\":1}}],[\"cindy\",{\"1\":{\"0\":1,\"35\":2,\"38\":2,\"39\":2}}],[\"m\",{\"1\":{\"51\":8}}],[\"mutable\",{\"1\":{\"33\":2,\"39\":1}}],[\"mutability\",{\"1\":{\"30\":1,\"36\":1,\"39\":1}}],[\"must\",{\"1\":{\"18\":1}}],[\"multiplication\",{\"0\":{\"50\":1},\"1\":{\"45\":1}}],[\"multiple\",{\"0\":{\"9\":1,\"10\":1,\"14\":1,\"15\":1},\"1\":{\"9\":1,\"14\":1,\"18\":1,\"39\":1}}],[\"multi\",{\"1\":{\"18\":1}}],[\"multimeters\",{\"1\":{\"0\":1}}],[\"mud\",{\"1\":{\"7\":4}}],[\"more\",{\"1\":{\"17\":1,\"33\":3}}],[\"modulo\",{\"1\":{\"51\":1}}],[\"modulus\",{\"0\":{\"51\":1},\"1\":{\"45\":1,\"51\":2}}],[\"modulation\",{\"1\":{\"0\":1}}],[\"modification\",{\"1\":{\"39\":1}}],[\"modified\",{\"1\":{\"30\":1,\"36\":1}}],[\"modifying\",{\"0\":{\"10\":1,\"11\":1},\"1\":{\"33\":1}}],[\"modify\",{\"1\":{\"9\":1,\"27\":1,\"32\":1}}],[\"moment\",{\"1\":{\"7\":1}}],[\"month\",{\"1\":{\"6\":2}}],[\"monthly\",{\"1\":{\"6\":1}}],[\"monitor\",{\"1\":{\"6\":2}}],[\"manager\",{\"1\":{\"33\":4}}],[\"maintenance\",{\"1\":{\"7\":1}}],[\"mathematical\",{\"1\":{\"7\":1}}],[\"mating\",{\"1\":{\"0\":1}}],[\"masses\",{\"1\":{\"7\":3}}],[\"made\",{\"1\":{\"7\":1}}],[\"march\",{\"1\":{\"6\":2}}],[\"markdown\",{\"1\":{\"3\":1,\"21\":1,\"43\":1}}],[\"ma\",{\"1\":{\"6\":1}}],[\"might\",{\"1\":{\"33\":2}}],[\"microprocessors\",{\"1\":{\"0\":1}}],[\"mindstorm\",{\"1\":{\"0\":1}}],[\"myvar2\",{\"1\":{\"18\":1}}],[\"my\",{\"1\":{\"0\":2,\"18\":6}}],[\"message\",{\"1\":{\"46\":1}}],[\"means\",{\"1\":{\"33\":1}}],[\"measuring\",{\"1\":{\"0\":1}}],[\"methods\",{\"0\":{\"13\":1}}],[\"memory\",{\"1\":{\"6\":1}}],[\"me\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2},\"/zh/\":{\"documentCount\":196,\"nextId\":196,\"documentIds\":{\"0\":\"v-858cfdd6\",\"1\":\"v-858cfdd6#介绍页\",\"2\":\"v-858cfdd6@0\",\"3\":\"v-858cfdd6@1\",\"4\":\"v-ef446a06\",\"5\":\"v-ef446a06#_1-概念题\",\"6\":\"v-ef446a06#_2-选择题\",\"7\":\"v-ef446a06#_3-填空题\",\"8\":\"v-ef446a06#_4-编程题\",\"9\":\"v-ef446a06#_4-1-定义和输出变量\",\"10\":\"v-ef446a06#_4-2-变量的赋值\",\"11\":\"v-ef446a06#_4-3-变量的覆盖\",\"12\":\"v-ef446a06#_4-4-使用-sep-和-end-参数\",\"13\":\"v-ef446a06#_4-5-同时输出多个变量\",\"14\":\"v-ef446a06#_4-6-多个变量赋予不同值和相同值\",\"15\":\"v-ef446a06@0\",\"16\":\"v-ef446a06@1\",\"17\":\"v-3d681a5c\",\"18\":\"v-3d681a5c#_1-理解变量-生活中的例子\",\"19\":\"v-3d681a5c#_1-1-什么是变量\",\"20\":\"v-3d681a5c#_1-2-一个例子\",\"21\":\"v-3d681a5c#_2-如何创建变量-赋值语句\",\"22\":\"v-3d681a5c#_3-探究print\",\"23\":\"v-3d681a5c#_3-1-同时输出多个数据\",\"24\":\"v-3d681a5c#_3-2-sep修改多个变量同时输出的间隔\",\"25\":\"v-3d681a5c#_3-3-end修改print输出结尾方式\",\"26\":\"v-3d681a5c#_3-4-end-和sep可以同时使用\",\"27\":\"v-3d681a5c#_4-进阶的赋值方法\",\"28\":\"v-3d681a5c#_4-1-多个变量同时赋相同的值\",\"29\":\"v-3d681a5c#_4-2-多个变量同时赋不同的值\",\"30\":\"v-3d681a5c#practice\",\"31\":\"v-3d681a5c#_5-变量的命名规则\",\"32\":\"v-3d681a5c#_6-练习\",\"33\":\"v-3d681a5c@0\",\"34\":\"v-3d681a5c@1\",\"35\":\"v-43e7c804\",\"36\":\"v-43e7c804#数据类型\",\"37\":\"v-43e7c804#_1-数字型「int-float」\",\"38\":\"v-43e7c804#_1-1代码示例\",\"39\":\"v-43e7c804#_2-字符串「str」\",\"40\":\"v-43e7c804#_2-1-代码示例\",\"41\":\"v-43e7c804#_2-2-字符串的三大特性\",\"42\":\"v-43e7c804#_3-列表\",\"43\":\"v-43e7c804#_3-1-代码示例\",\"44\":\"v-43e7c804#_3-2-列表的三大特性\",\"45\":\"v-43e7c804#_4-元组「tuple」\",\"46\":\"v-43e7c804#_4-1-代码示例\",\"47\":\"v-43e7c804#_5-探究👀列表-元组\",\"48\":\"v-43e7c804#_6-字典「dict」\",\"49\":\"v-43e7c804#_6-1-代码示例\",\"50\":\"v-43e7c804#_6-2-字典的特性\",\"51\":\"v-43e7c804#_7-集合「set」\",\"52\":\"v-43e7c804#_7-1-代码示例\",\"53\":\"v-43e7c804#_7-2-集合的特性\",\"54\":\"v-43e7c804#_8-布尔型「bool」\",\"55\":\"v-43e7c804@0\",\"56\":\"v-43e7c804@1\",\"57\":\"v-00f0a180\",\"58\":\"v-00f0a180#_1-数字型的特点\",\"59\":\"v-00f0a180#_2-算数运算符\",\"60\":\"v-00f0a180#_3-小试牛刀-数字变换\",\"61\":\"v-00f0a180#_4-比较运算符-比较值的大小\",\"62\":\"v-00f0a180#_4-比较运算符-比较值的大小-1\",\"63\":\"v-00f0a180#_5-赋值运算符\",\"64\":\"v-00f0a180#_7-3-1-数字和与差\",\"65\":\"v-00f0a180#_7-3-2-数字的乘法和除法\",\"66\":\"v-00f0a180#_7-3-3-求余和幂运算\",\"67\":\"v-00f0a180#_7-3-4-比较运算\",\"68\":\"v-00f0a180@0\",\"69\":\"v-00f0a180@1\",\"70\":\"v-0a8057f5\",\"71\":\"v-0a8057f5#_1-字符串的定义\",\"72\":\"v-0a8057f5#_2-创建字符串\",\"73\":\"v-0a8057f5#_3-字符串长度\",\"74\":\"v-0a8057f5#_4-字符串中字符的获取\",\"75\":\"v-0a8057f5#_4-1-获取单个字符\",\"76\":\"v-0a8057f5#_4-2-获取多个连续字符\",\"77\":\"v-0a8057f5#_4-3-获取多个不连续字符\",\"78\":\"v-0a8057f5#_4-4-字符串倒序\",\"79\":\"v-0a8057f5#_4-4-1-实现\",\"80\":\"v-0a8057f5#_4-4-2string-1-省略了\",\"81\":\"v-0a8057f5#_4-4-2-1方法\",\"82\":\"v-0a8057f5#_5-字符串内置方法\",\"83\":\"v-0a8057f5#_5-1-upper\",\"84\":\"v-0a8057f5#_5-2-lower\",\"85\":\"v-0a8057f5#_5-3-capitalize\",\"86\":\"v-0a8057f5#_5-4-title\",\"87\":\"v-0a8057f5#_5-5-startswith\",\"88\":\"v-0a8057f5#_5-6-endswith\",\"89\":\"v-0a8057f5#_5-7-count\",\"90\":\"v-0a8057f5#_5-8-find\",\"91\":\"v-0a8057f5#_5-9-index\",\"92\":\"v-0a8057f5#_5-10-isdigit\",\"93\":\"v-0a8057f5#_5-11-isalpha\",\"94\":\"v-0a8057f5#_5-12-isalnum\",\"95\":\"v-0a8057f5#_5-13-isupper\",\"96\":\"v-0a8057f5#_5-14-islower\",\"97\":\"v-0a8057f5#_5-15-isspace\",\"98\":\"v-0a8057f5#_5-16-strip\",\"99\":\"v-0a8057f5#_5-17-lstrip\",\"100\":\"v-0a8057f5#_5-18-rsrip\",\"101\":\"v-0a8057f5#_5-19-replce\",\"102\":\"v-0a8057f5#_5-20-split\",\"103\":\"v-0a8057f5#_5-21-rsplit\",\"104\":\"v-0a8057f5#_5-22-join\",\"105\":\"v-0a8057f5#_6-字符串格式化\",\"106\":\"v-0a8057f5#_6-1-format\",\"107\":\"v-0a8057f5#_6-2-f\",\"108\":\"v-0a8057f5#_6-3-格式化\",\"109\":\"v-0a8057f5#_6-4-f-和-format的优缺点\",\"110\":\"v-0a8057f5#_7-字符串的不可变性\",\"111\":\"v-0a8057f5#_8-字符串转义\",\"112\":\"v-0a8057f5#_9-字符串的连接\",\"113\":\"v-0a8057f5#_10-读取用户输入\",\"114\":\"v-0a8057f5#_10-1-input-基本使用\",\"115\":\"v-0a8057f5#_10-3-3\",\"116\":\"v-0a8057f5@0\",\"117\":\"v-0a8057f5@1\",\"118\":\"v-15346d6f\",\"119\":\"v-15346d6f@0\",\"120\":\"v-15346d6f@1\",\"121\":\"v-e2d4b804\",\"122\":\"v-e2d4b804#_1-列表结构\",\"123\":\"v-e2d4b804#_2-获取列表的某个元素\",\"124\":\"v-e2d4b804#_2-1-列表下标的组成\",\"125\":\"v-e2d4b804#_2-2-提取单个元素\",\"126\":\"v-e2d4b804#_2-3-获取列表中连续几个元素\",\"127\":\"v-e2d4b804#_2-4-获取列表中连续且特定间隔的元素\",\"128\":\"v-e2d4b804#_3-列表的切片赋值\",\"129\":\"v-e2d4b804#_4-小试牛🔪\",\"130\":\"v-e2d4b804#_5-在列表的特定位置插入元素「-insert-」\",\"131\":\"v-e2d4b804#_6-列表长度\",\"132\":\"v-e2d4b804#_7-修改列表中的元素\",\"133\":\"v-e2d4b804#_8-向列表中添加元素\",\"134\":\"v-e2d4b804#_8-1-添加单个元素「-append-」\",\"135\":\"v-e2d4b804#_8-2-添加多个元素「-extend-」\",\"136\":\"v-e2d4b804#_9-删除列表中的元素\",\"137\":\"v-e2d4b804#_9-1-del\",\"138\":\"v-e2d4b804#_9-2-pop\",\"139\":\"v-e2d4b804#_9-3-remove\",\"140\":\"v-e2d4b804#_10-两个列表相加\",\"141\":\"v-e2d4b804#_11-判断某个元素是否存在于列表里面「value-in-sequence」\",\"142\":\"v-e2d4b804#_12-获取列表中某个元素的重复次数「-count-」\",\"143\":\"v-e2d4b804#_13-获取列表中某个元素第一次出现的位置「-index-」\",\"144\":\"v-e2d4b804#_14-列表排序\",\"145\":\"v-e2d4b804#_14-1-sort-reverse-false\",\"146\":\"v-e2d4b804#_14-2-sorted-list-reverse-false\",\"147\":\"v-e2d4b804#_15-reverse\",\"148\":\"v-e2d4b804#_16-列表的深浅拷贝\",\"149\":\"v-e2d4b804#_16-1-所存在的问题\",\"150\":\"v-e2d4b804#_16-2-copy\",\"151\":\"v-e2d4b804#_16-3-copy所存在的问题「浅拷贝」\",\"152\":\"v-e2d4b804#_16-4-deepcopy-深拷贝\",\"153\":\"v-e2d4b804#_16-5-一个特例\",\"154\":\"v-e2d4b804@0\",\"155\":\"v-e2d4b804@1\",\"156\":\"v-5d1fbacd\",\"157\":\"v-5d1fbacd#_1-创建元组\",\"158\":\"v-5d1fbacd#_2-列表和元组的对比\",\"159\":\"v-5d1fbacd#_3-元素是不可变的\",\"160\":\"v-5d1fbacd#_4-元组的取值和分片操作\",\"161\":\"v-5d1fbacd#_5-元组的特点\",\"162\":\"v-5d1fbacd#_6-元组的拼接\",\"163\":\"v-5d1fbacd#_7-小试牛🔪\",\"164\":\"v-5d1fbacd#_7-2-使用sorted\",\"165\":\"v-5d1fbacd#_8-zip\",\"166\":\"v-5d1fbacd@0\",\"167\":\"v-5d1fbacd@1\",\"168\":\"v-7d189714\",\"169\":\"v-7d189714#question-01-hello-you\",\"170\":\"v-7d189714#question-01-hello-you-1\",\"171\":\"v-7d189714#question-02-some-have-gone-and-some-remain\",\"172\":\"v-7d189714#question-02-some-have-gone-and-some-remain-1\",\"173\":\"v-7d189714#question-03-penny-pinching\",\"174\":\"v-7d189714#question-03-penny-pinching-1\",\"175\":\"v-7d189714#question-04-mad-as-a-hatter-thin-as-a-dime\",\"176\":\"v-7d189714#question-04-mad-as-a-hatter-thin-as-a-dime-1\",\"177\":\"v-7d189714#question-05-bmi-calculator\",\"178\":\"v-7d189714#part-a\",\"179\":\"v-7d189714#question-05-bmi-calculator-1\",\"180\":\"v-7d189714#part-a-1\",\"181\":\"v-7d189714#part-b\",\"182\":\"v-7d189714#part-b-1\",\"183\":\"v-7d189714#question-06-don-t-believe-the-gacha\",\"184\":\"v-7d189714#question-07-collective-timetables\",\"185\":\"v-7d189714#question-07-collective-timetables-1\",\"186\":\"v-7d189714@0\",\"187\":\"v-7d189714@1\",\"188\":\"v-6930734e\",\"189\":\"v-6930734e#_1-标题编写\",\"190\":\"v-6930734e#标题2\",\"191\":\"v-6930734e#标题3\",\"192\":\"v-6930734e#标题6\",\"193\":\"v-6930734e#_2-图片插入\",\"194\":\"v-6930734e@0\",\"195\":\"v-6930734e@1\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,38],\"2\":[null,null,1],\"3\":[null,null,1],\"4\":[2],\"5\":[2,75],\"6\":[2,69],\"7\":[2,65],\"8\":[2],\"9\":[3,12],\"10\":[3,15],\"11\":[3,18],\"12\":[6,17],\"13\":[3,21],\"14\":[3,18],\"15\":[null,null,2],\"16\":[null,null,3],\"17\":[2],\"18\":[3],\"19\":[2,4],\"20\":[3,43],\"21\":[3,54],\"22\":[2],\"23\":[3,16],\"24\":[3,9],\"25\":[2,12],\"26\":[4,12],\"27\":[2],\"28\":[3,9],\"29\":[3,9],\"30\":[1,23],\"31\":[2,80],\"32\":[2,69],\"33\":[null,null,2],\"34\":[null,null,2],\"35\":[5],\"36\":[1,2],\"37\":[5],\"38\":[2,17],\"39\":[4],\"40\":[3,16],\"41\":[2,25],\"42\":[2],\"43\":[3,23],\"44\":[3,32],\"45\":[4],\"46\":[3,44],\"47\":[3,80],\"48\":[4],\"49\":[3,23],\"50\":[3,24],\"51\":[4],\"52\":[3,20],\"53\":[3,48],\"54\":[4,10],\"55\":[null,null,2],\"56\":[null,null,2],\"57\":[3],\"58\":[2,21],\"59\":[2,25],\"60\":[3,45],\"61\":[3],\"62\":[3,23],\"63\":[2,12],\"64\":[5,29],\"65\":[4,24],\"66\":[3,28],\"67\":[4,40],\"68\":[null,null,2],\"69\":[null,null,2],\"70\":[3],\"71\":[2,4],\"72\":[2,114],\"73\":[2,11],\"74\":[2],\"75\":[3,15],\"76\":[3,22],\"77\":[3,33],\"78\":[2],\"79\":[3,17],\"80\":[5,20],\"81\":[3,17],\"82\":[2],\"83\":[4,10],\"84\":[4,9],\"85\":[4,15],\"86\":[4,15],\"87\":[3,15],\"88\":[4,15],\"89\":[4,17],\"90\":[4,20],\"91\":[4,41],\"92\":[4,14],\"93\":[4,15],\"94\":[4,15],\"95\":[3,15],\"96\":[3,15],\"97\":[3,14],\"98\":[4,17],\"99\":[4,15],\"100\":[4,15],\"101\":[4,13],\"102\":[4,21],\"103\":[3,20],\"104\":[4,18],\"105\":[2,62],\"106\":[4,33],\"107\":[3,21],\"108\":[4,35],\"109\":[5,10],\"110\":[2,46],\"111\":[2,44],\"112\":[2,16],\"113\":[2],\"114\":[4,76],\"115\":[2,100],\"116\":[null,null,2],\"117\":[null,null,2],\"118\":[4,22],\"119\":[null,null,2],\"120\":[null,null,2],\"121\":[3],\"122\":[2,25],\"123\":[2],\"124\":[3,3],\"125\":[2,11],\"126\":[3,21],\"127\":[3,21],\"128\":[2,17],\"129\":[2,29],\"130\":[4,26],\"131\":[2,13],\"132\":[2,81],\"133\":[2],\"134\":[5,14],\"135\":[5,10],\"136\":[2],\"137\":[3,37],\"138\":[4,12],\"139\":[4,15],\"140\":[2,14],\"141\":[6,2],\"142\":[4,12],\"143\":[4,14],\"144\":[2],\"145\":[7,18],\"146\":[6],\"147\":[3,10],\"148\":[2],\"149\":[3,38],\"150\":[4,21],\"151\":[5,40],\"152\":[4,38],\"153\":[3,44],\"154\":[null,null,2],\"155\":[null,null,2],\"156\":[3],\"157\":[2,14],\"158\":[2,12],\"159\":[2,37],\"160\":[2,9],\"161\":[2,31],\"162\":[2,14],\"163\":[2,25],\"164\":[4,19],\"165\":[3,61],\"166\":[null,null,2],\"167\":[null,null,2],\"168\":[2],\"169\":[5,58],\"170\":[5,22],\"171\":[7,113],\"172\":[7,43],\"173\":[4,53],\"174\":[4,39],\"175\":[8,69],\"176\":[8,39],\"177\":[4,43],\"178\":[3,33],\"179\":[4],\"180\":[2,25],\"181\":[3,57],\"182\":[2,28],\"183\":[7,128],\"184\":[4,59],\"185\":[4,44],\"186\":[null,null,2],\"187\":[null,null,3],\"188\":[2],\"189\":[2],\"190\":[1],\"191\":[1,1],\"192\":[1],\"193\":[2],\"194\":[null,null,2],\"195\":[null,null,2]},\"averageFieldLength\":[3.111951418099638,28.72527100495933,0.9730564554828168],\"storedFields\":{\"0\":{\"h\":\"关于我\"},\"1\":{\"h\":\"介绍页\",\"t\":[\"咳咳，虽然想说的话不是很多，但还是简单介绍一下我～～\",\"我是王若伊晗。是这个博客的主人，你也可以叫我蝶梦，这个名字来源于一首诗中的哲学典故----“庄生晓梦迷蝴蝶，望帝春心托杜鹃” 庄周梦见自己便成了蝴蝶，从喧嚣的人生走向逍遥之境，而梦醒发现自己还是庄子。他说当梦足够真实，人没有任何能力知道自己是否是在做梦，那我们呢？我们是否能分清现实和梦境呢？综上，我给自己起了一个富有浪漫主义色彩的笔名——“蝶梦”。\",\"关于我的爱好，我喜欢读小说，跳舞（K-pop）和旅行，并热衷于交很多很多的朋友......\",\"现在的我是剑桥大学工程专业的一名学生，主修电磁学，电路分析，机械学，结构力学，数学，材料学和流体力学。对于未来的就业方向还有点迷茫，还在努力摸索中......\",\"那就先说这么多吧，等想到了再补上！\"]},\"2\":{\"c\":[\"个人简介\"]},\"3\":{\"c\":[\"作者\"]},\"4\":{\"h\":\"01 Practice\"},\"5\":{\"h\":\"1. 概念题\",\"t\":[\"此题属于概念性问题，没有明确的答案标准，请您根据你所学的知识进行回答。\",\"在 Python 中，print 函数是用来做什么的？\",\"输出/打印出代码运行结果\",\"如何在 Python 中声明一个变量？请给出一个例子。\",\"a_b_c1 = \\\"hello world\\\" \",\"如何在 Python 中进行多个变量同时赋值相同的值？请给出一个例子。\",\"a = b = c = 1 \",\"如何在 Python 中进行多个变量同时赋值不同的值？请给出一个例子。\",\"a, b, c = 1, 2, 3 \",\"在 Python 中，如果我们想要在一行中打印多个变量，应该怎么做？请给出一个例子。\",\"a, b, c = 1, 2, 3 print(a, b, c) \",\"什么是 Python 中的注释？怎么写注释？\",\"# 这是一行注释 \",\"在 Python 中，我们如何改变 print 函数中的 sep 参数，以改变多个变量的输出间隔？请给出一个例子。\",\"a = b = c = 1 print (a, b, c, sep = 'hahaha') \",\"在 Python 中 print 的 end 作用是什么？编写个代码示例。\",\"#end 的作用是改变输出时的结尾结束方式 a = b = c = 1 print (a, end = '/n/n') print (b) ''' 1 1 ''' \",\"在 Python 中，如果我们要覆盖一个变量的值，应该怎么做？请给出一个例子。\",\"a = 1 print(a) a = 2 print(a) #1 #2 \",\"在 Python 中，我们怎么样才能让计算机“看不见”一行代码？\",\"可以对当行代码进行注释\",\"当我们用 print 函数同时输出多个变量时，默认的间隔符是什么？\",\"是一个空格——— sep=‘ ’\",\"在 Python 中，一个变量可以存储什么样的数据？请给出至少三个例子。\",\"a = 1 #integer b = 1.45 #float c = \\\"hello\\\"#string \",\"在编写代码中，为什么要适当的加上空格？空格对代码有影响吗？\",\"增加代码的可读性，使代码更加规范\",\"空格对代码没有影响\",\"变量命名为什么推荐：“见名知意”？\",\"方便检查\",\"便于理解\",\"这些问题主要围绕 Python 中的变量声明、赋值、输出，以及注释的使用等基础概念展开，帮助你更好地理解和巩固这些概念。\"]},\"6\":{\"h\":\"2. 选择题\",\"t\":[\"Python 变量的命名规则中，以下哪一项是错误的？\",\"(c)\",\"a) 变量名可以由字母、数字和下划线组成\",\"b) 变量名不能以数字开头\",\"c) 变量名可以以特殊字符，如@或#，开头\",\"d) 变量名可以包含大写和小写字母\",\"在 Python 中，如何使用 print 函数打印字符串 \\\"Hello, World!\\\"？\",\"(b)\",\"a) print \\\"Hello, World!\\\"\",\"b) print(\\\"Hello, World!\\\")\",\"c) echo(\\\"Hello, World!\\\")\",\"d) print[Hello, World!]\",\"print 函数中的 end 参数用于什么？\",\"(b)\",\"a) 确定是否结束程序\",\"b) 在输出的末尾添加指定字符\",\"c) 控制输出的数量\",\"d) 确定输出的顺序\",\"如果我想在 print 函数中，用\\\",\\\"作为分隔符，应该如何操作？\",\"(a)\",\"a) 使用参数 sep = \\\",\\\"\",\"b) 使用参数 end = \\\",\\\"\",\"c) 使用参数 print = \\\",\\\"\",\"d) 使用参数 divide = \\\",\\\"\",\"如果我想在不换行的情况下输出两个变量 a 和 b，以下哪个是正确的？\",\"(a) ✅\",\"a) print(a, b, end = ' ')\",\"b) print(a, b, sep = ' ')\",\"c) print(a; b)\",\"d) print(a, b, end = '\\\\n')\",\"在 Python 中，以下哪种方法可以用来删除变量？\",\"(c)\",\"a) drop(variable)\",\"b) remove(variable)\",\"c) del variable\",\"d) delete variable\",\"在 Python 中，以下哪个语句是错误的？\",\"(c)\",\"a) x, y, z = \\\"Orange\\\", \\\"Banana\\\", \\\"Cherry\\\"\",\"b) x = y = z = \\\"Orange\\\"\",\"c) x = \\\"Orange\\\" = y\",\"d) x, y = y, x\",\"在 Python 中，以下哪个声明不是合法的变量名？\",\"(c)\",\"a) _myvar\",\"b) myVar\",\"c) 9var\",\"d) varName9\",\"下列哪个 print 函数的使用方式是正确的？\",\"(a)\",\"a) print(a, b, c, sep = ' ', end = ' ')\",\"b) print(a b c sep = ' ', end = ' ')\",\"c) print[a, b, c, sep = ' ', end = ' ']\",\"d) print{a, b, c, sep = ' ', end = ' '}\",\"Python 中的哪个函数可以用来获取变量的类型？\",\"(b)\",\"a) typeof(variable)\",\"b) type(variable)\",\"c) getType(variable)\",\"d) variable.type()\"]},\"7\":{\"h\":\"3. 填空题\",\"t\":[\"在 Python 中，___print__ 关键字用于打印一个变量的值。\",\"Python 中的变量可以是字符串、整数、浮点数或布尔类型。例如，my_str = \\\"Hello World\\\" 使 my_str 成为一个 ___变量__。\",\"在 Python 中，我们可以通过 ___print( my_var )_(my_var) 来打印变量 my_var。\",\"在 Python 中，我们可以使用 my_var = __10___ 来创建一个值为 10 的变量 my_var。\",\"如果我们有两个变量 a = 5 和 b = 10，我们可以使用 print(a, ___b__) 来打印这两个变量的值。\",\"在 Python 中，变量名可以包含字母、数字和下划线，但不能以数字开头。例如，1my_var 是一个无效的变量名，但 ___my1_var__ 是有效的。\",\"如果我有一个整数变量 my_int = 50，我可以通过在打印语句中添加 __print( “The value of my integer is ”, my_int )___ 来打印 \\\"The value of my integer is 50\\\"。\",\"在 Python 中，通过使用 __=___ 关键字，我们可以将一个变量的值分配给另一个变量。例如，如果 a = 10 和 b = a，那么 b 的值也会变为10。\",\"在 Python 中，我可以通过编写 my_str = __“Hello, Python!”___ 来创建一个包含字符串 \\\"Hello, Python!\\\" 的变量 my_str。\",\"如果我有一个浮点型变量 my_float = 5.67，我可以使用 print(__my_float___ + \\\" is my floating point number\\\") 来打印 \\\"5.67 is my floating point number\\\"。\"]},\"8\":{\"h\":\"4. 编程题\"},\"9\":{\"h\":\"4.1 定义和输出变量\",\"t\":[\"要求：定义一个变量，名字为 greeting，并将它的值设置为 \\\"Hello, World!\\\"。然后使用 print 函数将此变量的值打印出来。\",\"greeting = 'Hello, World!' print( greeting) \"]},\"10\":{\"h\":\"4.2 变量的赋值\",\"t\":[\"要求：定义一个变量，名字为 number，并将它的值设置为 10。然后定义一个新的变量，名字为 copy_number，并将它的值设置为变量 number 的值。使用 print 函数分别打印这两个变量的值。\",\"number = 10 copy_number = number print(number) print(copy_number) \"]},\"11\":{\"h\":\"4.3 变量的覆盖\",\"t\":[\"要求：定义一个变量，名字为 food，并将它的值设置为 \\\"apple\\\"。然后将变量 food 的值改为 \\\"banana\\\"。使用 print 函数打印变量 food 的值，然后解释为什么打印的结果是 \\\"banana\\\" 而不是 \\\"apple\\\"。\",\"food = \\\"apple\\\" food = \\\"banana\\\" print(food) #变量的覆盖 \"]},\"12\":{\"h\":\"4.4 使用 sep 和 end 参数\",\"t\":[\"要求：定义三个变量 a、 b、c，分别赋值为 1，2，3。使用 print 函数打印这三个变量，使得输出的结果是 1-2-3，并且在输出之后不换行。\",\"a, b, c = 1, 2 , 3 print(a, b, c, sep = \\\"-\\\") \"]},\"13\":{\"h\":\"4.5 同时输出多个变量\",\"t\":[\"要求：定义四个变量 name、age、job、hobby，并分别赋值为你的名字、年龄、职业和爱好。使用一次 print 函数将这四个变量的值同时打印出来，每个值之间用逗号隔开。\",\"name = 'Cindy' age = 17 career = 'Student' hobby = \\\"Dancing\\\" print(name, age, career, hobby, sep = ', ') \"]},\"14\":{\"h\":\"4.6 多个变量赋予不同值和相同值\",\"t\":[\"要求：定义三个变量 x、y、z，并且同时为它们赋予值 10。然后将 x 的值改为 20，y 的值改为30。使用 print 函数分别打印 x、y、z 的值。\",\"x = y = z = 10 x = 20 y = 30 print(x) print(y) print(z) \"]},\"15\":{\"c\":[\"python practice\"]},\"16\":{\"c\":[\"practice\",\"python\",\"variables\"]},\"17\":{\"h\":\"01 Variable\"},\"18\":{\"h\":\"1.理解变量--生活中的例子\"},\"19\":{\"h\":\"1.1 什么是变量\",\"t\":[\"变：变化\",\"量：大小\"]},\"20\":{\"h\":\"1.2 一个例子\",\"t\":[\"假如，你是班级当中的课代表，每个月需要统计班级中每个学生的月考成绩。月考成绩会每个月一张纸，每张纸上都会依次记录每个学生的成绩越到成绩，例如：\",\"李雷 98分\",\"马冬梅 89分\",\"刘奕彤 96分\",\"......\",\"某一天，老师要看刘奕彤 1月、2月、3月的成绩，这个时候作为课代表的你需要怎么办。——总不能直接把每个月的月考成绩单直接给老师，显然是不合适的。 我们应该把刘奕彤 1月、2月、3月的成绩抄写到单独的一张纸上，接着给老师。 那么，我们为什么不一开始直接为每一个学生分配一个信封呢？（也可以是档案袋）信封在一开始是扁的，当我们放东西（数据）进去之后，是不是鼓起来了？——是不是变化了？是不是有大小了呢？显然是的。 那么信封，是不是在我们当前所处的空间当中开辟空间，来存放数据并且说这是信封。\",\"类似的有：冰箱，不也是在我们当前所处的空间中，开辟空间。\",\"---- 变量是在计算机的内存当中开辟空间 ----变量会被覆盖\"]},\"21\":{\"h\":\"2.如何创建变量--赋值语句\",\"t\":[\"通过变量名代表或引用某个值\",\"女娲捏了泥人，泥人没有生命，女娲挥了挥手柳条，赋予给泥人生命。此时，泥人可以代表说是女娲的后人。「变量：泥人，值：女娲」\",\"全国人民代表大会，中的人大代表，是由广大人民群众投票选举出来的。他们的权利不是自己获取的，所以他们可以说：我代表的是广大人民群众的意志。「变量：人大代表，值：人民群众」\",\"初始化赋值语句： 变量名 = 表达式\",\"变量名 ：就是这个空间，我们叫它什么名字\",\"表达式： 类似数学表达\",\"程序的逻辑： 从上到下， 从右到左， 最后赋值。\",\"name1 = 'WRYH' name2 = name1 print(name2) #变量的传递 name1 = \\\"look\\\" name1 = \\\"WRYH\\\" print(name1) #变量的覆盖 \",\"x = 1 # 1 赋值给 x x = x + 10 # x 代表 1， 所以 x + 10 == 1 + 10，得到 11 后，赋值给变量x print(x) # 打印输出 # 井号是为了注释，注解，方便理解代码和后期维护。 \"]},\"22\":{\"h\":\"3.探究print\"},\"23\":{\"h\":\"3.1 同时输出多个数据\",\"t\":[\"a = 1 b = 1 c = 1 print(a, b, c) #output 1 1 1 \",\"从输出的结果可以看出，print 同时输出多个变量，每个值之间默认以空格间隔。 那么，我们可以修改这个默认空格间隔么？——答案显然是可以的。 使用 sep。\"]},\"24\":{\"h\":\"3.2 sep修改多个变量同时输出的间隔\",\"t\":[\"a = 1 b = 1 c = 1 print(a, b, c,sep=\\\".hhhhhh.\\\") \"]},\"25\":{\"h\":\"3.3 end修改print输出结尾方式\",\"t\":[\"a = 1 b = 1 c = 1 print(a) print(b) print(c) #--out-- # 1 # 1 # 1 \",\"a = 1 b = 1 c = 1 print(a, end=\\\"\\\\n\\\\n\\\\n\\\") print(b) print(c) #--output-- # 1 # 1 # 1 \",\"a = 1 b = 1 c = 1 print(a, end=\\\"hello hello\\\") print(b) print(c) \"]},\"26\":{\"h\":\"3.4 end 和sep可以同时使用\",\"t\":[\"a = 1 b = 1 c = 1 print(a, b, c, sep = \\\"~\\\", end = \\\" Hello\\\") #1~1~1 Hello \"]},\"27\":{\"h\":\"4.进阶的赋值方法\"},\"28\":{\"h\":\"4.1 多个变量同时赋相同的值\",\"t\":[\"a = b =c = 1 print (a, b, c,) #多个变量同时赋相同值 \"]},\"29\":{\"h\":\"4.2 多个变量同时赋不同的值\",\"t\":[\"a, b, c = 1, 2, 3 print(a, b, c) \"]},\"30\":{\"h\":\"practice\",\"t\":[\"假如你有两个小孩，哥哥叫：Austin，弟弟叫：Jaden。\",\"Austin 想喝果汁，Jaden 想喝可乐。哥哥和弟弟都有专属的杯子，不喜欢用对方的杯子。\",\"家中仅剩一杯果汁、一杯可乐，你不小心把哥哥的杯子装了可乐，弟弟的杯子装了果汁。\",\"问：如何交换哥哥与弟弟杯中的果汁？\",\"Austin = \\\"Coke\\\" # 该赋值可以理解为倒果汁的过程 Jaden = \\\"juice\\\" # 该赋值可以理解为倒果汁的过程 print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) Austin1 = Jaden Jaden1 = Austin Austin = Austin1 Jaden = Jaden1 print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) \",\"Austin = \\\"Coke\\\" # 该赋值可以理解为倒果汁的过程 Jaden = \\\"juice\\\" # 该赋值可以理解为倒果汁的过程 print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) Austin1 = Austin Austin = Jaden Jaden = Austin1 print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) \",\"Austin = \\\"Coke\\\" # 该赋值可以理解为倒果汁的过程 Jaden = \\\"juice\\\" # 该赋值可以理解为倒果汁的过程 print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) Austin, Jaden = Jaden, Austin print(\\\"Austin\\\", Austin) print(\\\"Jaden\\\", Jaden) \"]},\"31\":{\"h\":\"5.变量的命名规则\",\"t\":[\"大小写，英文，数字和__的组合，且不能用数字开头；\",\"a1b2c3 = 1 #数字不可以开头 \",\"系统关键词不能做变量名使用；\",\"as = 1 #不可以print出来 As = 1 aS = 1 a_s = 1 \",\"获取关键词列表：help(‘keywords’)\",\"Here is a list of the Python keywords. Enter any keyword to get more help. False class from or None continue global pass True def if raise and del import return as elif in try assert else is while async except lambda with await finally nonlocal yield break for not \",\"python中的变量名区别大小写\",\"n = 1 N = 2 print (n) #1 \",\"变量名不能包含空格，但可以用下划线\",\"user_name = \\\"hello\\\" username = \\\"hi\\\" \",\"不要使用python的内置函数名作为名称\",\"print = \\\"123\\\" print(print) #不能print出来 \"]},\"32\":{\"h\":\"6. 练习\",\"t\":[\"在 Python 中，变量名可以以数字开始。\",\" 对\",\" 错\",\"在 Python 中，以下哪个变量名是有效的？\",\" 2myVar\",\" myVar2\",\" my-var\",\" my var\",\"在Python中，变量名区分大小写。\",\" 对\",\" 错\",\"在Python中，my_var 和 myVar 是同一个变量。\",\" 对\",\" 错\",\"变量名可以是 Python 中的关键字。\",\" 对\",\" 错\",\"None 是Python中的特殊类型，表示没有值或空值。\",\" 对\",\" 错\",\"在Python中，以下哪个是有效的变量赋值？\",\" 123abc = \\\"hello\\\"\",\" for = \\\"world\\\"\",\" _hidden = \\\"secret\\\"\",\" import = 123\",\"在Python中，一个变量可以同时被赋予多个值。\",\" 对\",\" 错\",\"在Python中，以下哪个是多变量赋值？\",\" a, b, c = 1, 2, 3\",\" a = 1, b = 2, c = 3\",\" a; b; c = 1; 2; 3\",\" a = 1; b = 2; c = 3;\",\"变量在使用之前必须被赋值。\",\" 对\",\" 错\",\"Python中变量的类型是静态的，一旦赋值就不能改变。\",\" 对\",\" 错\",\"在Python中，以下哪个表示全局变量？\",\" var = \\\"hello\\\"\",\" global var\",\" var(global)\",\" def var():\",\"以下哪个表示删除变量？\",\" delete x\",\" del x\",\" remove x\",\" destroy x\",\"my_variable = \\\"Hello, World!\\\" print(my_variable) # 删除变量 del my_variable # 尝试访问已删除的变量将引发 NameError # print(my_variable) \",\"x = 5 之后 y = x，现在改变 y 的值，x 的值也会改变。\",\" 对\",\" 错\",\"x = [1, 2, 3] 之后 y = x，现在改变 y 的列表内容，x 的内容也会改变。❌\",\" 对\",\" 错\",\"在Python中，变量只能存储基本数据类型的值，如整数或字符串。\",\" 对\",\" 错\"]},\"33\":{\"c\":[\"python notebook\"]},\"34\":{\"c\":[\"notes\",\"python\"]},\"35\":{\"h\":\"02 Introduction to Tata Types\"},\"36\":{\"h\":\"数据类型\",\"t\":[\"image-20231209231442947\"]},\"37\":{\"h\":\"1.数字型「int, float」\"},\"38\":{\"h\":\"1.1代码示例\",\"t\":[\"整形\",\"int_num = 1 t = type(int_num) print(int_num) print(\\\"int num type is: >>>\\\", t) print(\\\"直接检测数据类型并输出\\\", type(int_num)) #output 1 int num type is: >>> <class 'int'> 直接检测数据类型并输出 <class 'int'> \",\"浮点型\",\"float_num = 1.1 t = type(float_num) print(float_num) print(\\\"int num type is: >>>\\\", t) print(\\\"直接检测数据类型并输出\\\", type(float_num)) #output 1.1 int num type is: >>> <class 'float'> 直接检测数据类型并输出 <class 'float'> \"]},\"39\":{\"h\":\"2.字符串「str」\"},\"40\":{\"h\":\"2.1 代码示例\",\"t\":[\"string = \\\"Vervevividness\\\" t = type(string) print(string) print(\\\"int num type is: >>>\\\", t) print(\\\"直接检测数据类型并输出\\\", type(string)) #output Vervevividness int num type is: >>> <class 'str'> 直接检测数据类型并输出 <class 'str'> \"]},\"41\":{\"h\":\"2.2 字符串的三大特性\",\"t\":[\"有序性\",\"「从左到右，下标是从0开始」；\",\"「从右到左，下标是从-1开始」\",\"引号里面出现的都算一个下标（空格也算）；\",\"不可变性\",\"字符串被创建出来后，就不能被改变；\",\"注意⚠️：不可变是指在代码运行的过程当中，不能对字符串修改，添加，删除之类的操作。\",\"任意字符：\",\"键盘上可以输入的字符，都可以是字符串的元素\",\"字符放到字符串中，都将成为字符串类型。「也就是：里面的每一个元素都可以称为：子字符」\"]},\"42\":{\"h\":\"3. 列表\"},\"43\":{\"h\":\"3.1 代码示例\",\"t\":[\"lst = [\\\"Vervevividness\\\", 1, 0.1, (\\\"happy\\\", \\\"sad\\\", 31), [31, \\\"bones\\\"], True, False] t = type (lst) print(lst) print(\\\"lst type is:>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", type(lst)) #outcome ['Vervevividness', 1, 0.1, ('happy', 'sad', 31), [31, 'bones'], True, False] lst type is:>>> <class 'list'> 直接检测数据类型，并输出:>>> <class 'list'> \"]},\"44\":{\"h\":\"3.2 列表的三大特性\",\"t\":[\"有序性\",\"「从左到右，下标是从0开始」；\",\"「从右到左，下标是从-1开始」\",\"列表里的每个元素算一个；\",\"eg. lst = [\\\"Hello\\\", 31] ;\",\"Hello是下标0（从左到右），也是下标-2（从右到左）；\",\"31是下标1（从左到右），也是下标-1（从右到左）；\",\"可变性：在程序运行的过程中，列表可以「添加，删除，修改」\",\"任意数据类型：注意⚠️，这里说的任意数据类型，指的是python所拥有的数据类型；\",\"Python 所拥有的数据类型「下面只包含了基础类型」\",\"image-20231209234829891\"]},\"45\":{\"h\":\"4. 元组「tuple」\"},\"46\":{\"h\":\"4.1 代码示例\",\"t\":[\"tup = (1, 2, 3, 4, \\\"Hello\\\", 1.1, [1, 2, 3, 4]) t = type(tup) print(tup) print(\\\"tup type is :>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", type(tup)) #output (1, 2, 3, 4, 'Hello', 1.1, [1, 2, 3, 4]) tup type is :>>> <class 'tuple'> 直接检测数据类型，并输出:>>> <class 'tuple'> \",\"有序性\",\"「从左到右，下标是从0开始」；\",\"「从右到左，下标是从-1开始」\",\"元组里的每个元素算一个；\",\"eg. lst = [\\\"Hello\\\", 31] ;有两个元素\",\"Hello是下标0（从左到右），也是下标-2（从右到左）；\",\"31是下标1（从左到右），也是下标-1（从右到左）；\",\"不可变性\",\"元组被创建出来之后，就不能被改变；\",\"注意⚠️：不可变，是在代码运行的过程中，不能对元组修改，添加，删除之类的操作；\",\"任意数据类型：注意⚠️，这里的数据类型，指的是python所拥有的数据类型\"]},\"47\":{\"h\":\"5. 探究👀列表&元组\",\"t\":[\"为什么🧐有列表后，还需要元组\",\"列表和元组到底用哪一个呢？\",\"如果存储的数据或数量是可变的，比如社交平台上的一个日志功能，是统计一个用户在一周之内看了哪些用户的帖子——那么则用列表更合适。\",\"如果存储的数据和数量不变，比如你有一个系统（软件），需要返回的是一个地点的经纬度，然后直接传给用户查看——那么肯定选用元组更合适。\",\"假设\",\"假设1：现在有一个仓库，你要向仓库添加物品。仓库很大，现有的物品也很多，你不知道还有没有位置可以存放。此时我们是不是需要聘请一个仓库管理员，这样我们就可以直接问仓库管理员：里面还有哪个位置（是否有位置？）仓库管理员会告诉你，并且你可以直接把你的物品，添加进去。\",\"问题来了，仓库管理员为什么知道仓库是否有位置？——因为仓库管理员会一直跟踪这个仓库的状态；\",\"假设2：现在有一个原子弹的仓库，仓库创建之后，只能存放一个原子弹。那么，我们需要设立一个专门的人员跟踪：原子弹仓库的状态吗？——不需要，此时在聘请一个就显得浪费了。（不然，领导没油水了～hhhhh）\",\"Why？\",\"用户日志📔，是不是会一直变动（记录📝看了哪些帖子），我们是不是需要有一个类似仓库管理员的“人”，来跟踪并且知道：是否有位置（是否有空间/内存），还需要知道在哪里添加。——列表更合适，因为列表可变。「可变意味着：添加、删除、修改」 \",\"元组为什么不合适？——因为，你每当需要添加数据的时候，就得重新创建一个新的元组。（就类似于：你创建原子弹的仓库，肯定是刚刚好可以存放一个，那么你想存放两个的时候，只能重新再创建一个仓库。）\",\"经纬度会改变吗？显然是不会的，那么就不需要一个多余的“人”去跟踪状态。——用列表可以吗？可以！但是没必要。「因为我们不需要仓库管理员」用列表有点浪费资源了。元组的功能刚刚好够用。\",\"我们讲究：不浪费，合适就好。\"]},\"48\":{\"h\":\"6. 字典「dict」\"},\"49\":{\"h\":\"6.1 代码示例\",\"t\":[\"d = {\\\"name\\\": \\\"Cindy\\\", \\\"age\\\": 17, 1: \\\"int\\\", 1.1 : 1, \\\"tup\\\" : (1, 2, 3)} t = type(d) print(d) print(\\\"d type is :>>>\\\", t) print(\\\"直接检测数据类型，并输出:>>>\\\", type(d)) #output {'name': 'Cindy', 'age': 17, 1: 'int', 1.1: 1, 'tup': (1, 2, 3)} d type is :>>> <class 'dict'> 直接检测数据类型，并输出:>>> <class 'dict'> \"]},\"50\":{\"h\":\"6.2 字典的特性\",\"t\":[\"无序性\",\"字典的组成：是由一系列的key和value组成。d = {\\\"key1\\\":\\\"value1,\\\"key2\\\":\\\"value2\\\".....}\",\"Key:\",\"不可变的数据类型，才可以当作字典的key；\",\"比如：字符串，数字，布尔，元组；\",\"value：任意数据类型，python所拥有的数据类型；\",\"可变性：可以添加，修改，删除键对值\"]},\"51\":{\"h\":\"7.集合「set」\"},\"52\":{\"h\":\"7.1 代码示例\",\"t\":[\"set1 = {1, 2, \\\"Cindy\\\", 1.2, \\\"hello\\\", (1, 2, 3), False} t = type(set1) print(set1) print(\\\"set1 type is :>>>\\\", type(set1)) print(\\\"直接检测数据类型，并输出:>>>\\\", t) #output {False, 1, 2, 1.2, 'hello', (1, 2, 3), 'Cindy'} set1 type is :>>> <class 'set'> 直接检测数据类型，并输出:>>> <class 'set'> \"]},\"53\":{\"h\":\"7.2 集合的特性\",\"t\":[\"无序性：集合是没有顺序的，也就是：没有下标；\",\"set1 = {1, 2, \\\"Cindy\\\", 1.2, \\\"hello\\\", (1, 2, 3), False} print(set1) #output {False, 1, 2, 1.2, 'hello', (1, 2, 3), 'Cindy'} \",\"注意\",\"如果你运行集合很多次，或者其中某一次，集合顺序没有改变，我们也不能说集合是有序的。\",\"Why？你掷骰子，500次都是 6 点，你能说掷骰子是确定性事件吗？——显然是不行的🙅。\",\"确定性：\",\"集合的每一个值都是确定的；「也就是需要不可变的数据类型」\",\"比如：数字型，布尔，元组，字符串\",\"举个例子🌰：列表可变，所以不行🙅\",\"互异性：出现重复的不会报错，会自动去掉重复的；\",\"set1 = {1, 2, 1, 1, 2, 1} print(set1) #{1,2} \",\"4.可变性：可以对集合添加，删除数据，但是不能修改输出。「注意⚠️：删除是无法制定下标删除的元素」\"]},\"54\":{\"h\":\"8.布尔型「bool」\",\"t\":[\"condition = True print(condition) print(type(condition)) #output True <class 'bool'> \"]},\"55\":{\"c\":[\"python notebook\"]},\"56\":{\"c\":[\"notes\",\"python\"]},\"57\":{\"h\":\"03 Newmeric Type\"},\"58\":{\"h\":\"1.数字型的特点\",\"t\":[\"image-20231212075658808\",\"In [3]: 1 + 1 Out[3]: 2 In [4]: 1 + 1.0 Out[4]: 2.0 In [5]: 2 -1 Out[5]: 1 In [6]: 2 - 1.0 Out[6]: 1.0 In [7]: 2 * 2 Out[7]: 4 In [8]: 2* 2.0 Out[8]: 4.0 In [9]: 9/3 Out[9]: 3.0 #如果其中有一个元素是浮点数的话，最后的结果就是浮点数「优先级最高」 #除法涉及精度问题，所以最后得到浮点数。 \"]},\"59\":{\"h\":\"2.算数运算符\",\"t\":[\"算术运算符： 用于算术计算。\",\"运算符\",\"描述\",\"例子\",\"+\",\"加法运算符\",\"1 + 1 = 2\",\"-\",\"减法运算符\",\"2 - 1 = 1\",\"*\",\"乘法运算符\",\"2 * 3 = 6\",\"/\",\"除法运算符\",\"9 / 3 = 3.0\",\"**\",\"指数运算符\",\"2 ** 3 = 8\",\"%\",\"取余运算符，计算余数\",\"9 % 2 = 1\",\"//\",\"除法取整运算符，计算商并去除其小数部分\",\"9 // 2 = 4\",\"tips: 9 / 2 = 4......1\"]},\"60\":{\"h\":\"3. 小试牛刀：数字变换\",\"t\":[\"假设你有一个两位的整数，我们需要通过以下规则产生两个新的数字：\",\"第一个新数字是原数字的两位数中的各个数字的和；\",\"第二个新数字是原数字的反转（如原数字为 21，反转后的数字为 12）。\",\"请你编写 Python 代码，实现以上要求。\",\"输入：\",\"一个整数 num （10 ≤ num ≤ 99）\",\"输出：\",\"两个整数，或者一个错误信息字符串。\",\"示例：\",\"假设输入的数字 num 为 91，那么你的代码应当输出两个数字：10（9和1的和）和19（91的反转）。\",\"假设输入的数字 num 为 26，那么你的代码应当输出两个数字：8（2和6的和）和62（26的反转）。\",\"假设输入的数字 num 为 18，那么你的代码应当输出两个数字：9（1和8的和）和81（18的反转）。\",\"num = 91 print(num // 10 + num % 10) print(10 * (num % 10) + num // 10) #output 10 19 \"]},\"61\":{\"h\":\"4.比较运算符：比较值的大小\"},\"62\":{\"h\":\"4. 比较运算符：比较值的大小\",\"t\":[\"运算符\",\"描述\",\"例子\",\">\",\"判断第一个运算对象是否大于第二个运算对象\",\"print(1 > 2)\",\"<\",\"判断第一个运算对象是否小于第二个运算对象\",\"print(1 < 2)\",\">=\",\"判断第一个运算对象是否大于或等于第二个运算对象\",\"print(3 >= 3)\",\"<=\",\"判断第一个运算对象是否小于或等于第二个运算对象\",\"print(3 <= 4)\",\"==\",\"判断两个运算对象是否相同\",\"print(2 == 2)\",\"!=\",\"判断两个运算对象是否不相同\",\"print(2 != 1)\",\"试一试上面的例子，看看会输出上面结果？\"]},\"63\":{\"h\":\"5. 赋值运算符\",\"t\":[\"运算符\",\"描述\",\"例子\",\"=\",\"把右侧的运算对象赋值给左侧的运算对象\",\"a = 1\",\"+=\",\"a += b 等同于 a = a + b\",\"a += 10\",\"-=\",\"a -= b 等同于 a = a - b\",\"a -= 10\",\"*=\",\"a *= b 等同于 a = a * b\",\"a *= 10\",\"/=\",\"a /= b 等同于 a = a / b\",\"a /= 10\",\"**=\",\"a **= b 等同于 a = a ** b\",\"a **= 10\",\"//=\",\"a //= b 等同于 a = a // b\",\"a //= 10\"]},\"64\":{\"h\":\"7.3.1 数字和与差：\",\"t\":[\"编写一段 Python 代码，创建两个数字 a 和 b，计算并打印出它们的和以及 a 减去 b 的结果。\",\"代码模版\",\"a = 10 b = 12 sum_result = a + b difference = a - b print(\\\"sum: \\\", sum_result) print(\\\"dofference: \\\", difference) # 测试 assert sum_result == a + b assert difference == a - b \",\"输出示例：\",\"Sum: 8 Difference: 2 \"]},\"65\":{\"h\":\"7.3.2 数字的乘法和除法\",\"t\":[\"编写一段 Python 代码，创建两个数字 x 和 y，计算并打印出它们的乘积和除法结果。\",\"代码模版\",\"x = 3 y = 4 print(\\\"product: \\\", x * y) print(\\\"division: \\\", x / y) # 测试 assert product == x * y assert division == x / y \",\"输出示例：\",\"Product: 12 Division: 3.0 \"]},\"66\":{\"h\":\"7.3.3 求余和幂运算\",\"t\":[\"编写一段 Python 代码，创建两个数字 m 和 n，计算并打印出 m 对 n 取余的结果和 m 的 n 次幂。\",\"代码模版\",\"m = 3 n = 4 print(\\\"Remainder: \\\", m%n) print(\\\"Power: \\\", m**n) # 测试 assert remainder == m % n assert power == m ** n \",\"输出示例：\",\"Remainder: 1 Power: 81 \"]},\"67\":{\"h\":\"7.3.4 比较运算\",\"t\":[\"编写一段 Python 代码，输入两个数字 p 和 q，比较它们的大小并打印出相应的比较结果（大于、小于、等于）。\",\"代码模版\",\" p = int(input(\\\"please enter a integer: \\\")) q = int(input(\\\"please enter the second integer: \\\")) if p > q: print(f\\\"{p} is greater than {q}\\\") assert p > q elif p < q: print(f\\\"{p} is less than {q}\\\") assert p < q else: print(f\\\"{p} is equal to {q}\\\") assert p == q \",\"输出示例：\",\"4 is less than 5 \"]},\"68\":{\"c\":[\"python notebook\"]},\"69\":{\"c\":[\"notes\",\"python\"]},\"70\":{\"h\":\"04 Python string\"},\"71\":{\"h\":\"1.字符串的定义\",\"t\":[\"字符串是由字母，数字和特殊字符组成的特殊序列\",\"image-20231214083505664\"]},\"72\":{\"h\":\"2.创建字符串\",\"t\":[\"如何创建字符串？\",\"——使用单引号，双引号或者三引号\",\"name = ‘Cindy’ number = “31” paragraph = '''Hello everyone! hello Cindy!''' \",\"为什么python同时支持三种创建字符串的方法\",\"双引号和单引号在一起可以避免歧义\",\"可以双引号中需要引号的部分使用单引号\",\"三个引号可以分行，不用重复打引号\",\"但是英文当中可以缩写如下：\",\"string = 'I'm bornforthis.' # 在英文当中也可以这样缩写 print(string) # 输出 File \\\"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py\\\", line 15 string = 'I'm bornforthis.' # 在英文当中也可以这样缩写 ^ SyntaxError: invalid syntax \",\"因为，开头是单引号，所以 Python 会寻找到下一个第一次出现的单引号进行匹配。而第一个单引号不在字符串的末尾，所以导致整个字符串异常。（没有完全包裹字符串全部内容）\",\"如何解决上面描述的问题呢？——使用双引号。\",\"string = \\\"I'm bornforthis.\\\" # 外面使用双引号进行包裹即可 print(string) # 输出 I'm bornforthis. \",\"有时候我们需要字符串里面有单引号或双引号，此时发挥作用： 单双引号混用，是第一个原因\",\"那么三引号呢？\",\"假设我们现在需要存储如下文本：\",\"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝 起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。 先实现功能，再去优化，否则一切会很乱。——AI悦创 凡是你不能清晰写下来的东西，都是你还没有真正理解的东西 \",\"放入字符串，我们如何在 Python 代码实现呢？\",\"string = \\\"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝 起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。 先实现功能，再去优化，否则一切会很乱。——AI悦创 凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\\\" # 外面使用双引号进行包裹即可 print(string) # 输出 File \\\"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py\\\", line 15 string = \\\"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 ^ SyntaxError: EOL while scanning string literal \",\"常规的单引号、双引号是不支持多行文本，但是有一个方法可以间接实现看似多行文本，但实际是单行，在每一行的末尾添加 \\\\：\",\"string = \\\"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \\\\ \\\\ 浅者见浅，深者见深——黄家宝\\\\ \\\\ 起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\\\\ \\\\ 先实现功能，再去优化，否则一切会很乱。——AI悦创\\\\ \\\\ 凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\\\" # 外面使用双引号进行包裹即可 print(string) # 输出 我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。先实现功能，再去优化，否则一切会很乱。——AI悦创凡是你不能清晰写下来的东西，都是你还没有真正理解的东西 \",\"从上面的输出可知，每行结尾添加 \\\\ 只能实现看起来换行，实际上还是一行。「就是：一行显示不完，换行显示而已，但是本身还是一行」\",\"image-20231215074000023\",\"此时，我们使用三引号测试：\",\"string = \\\"\\\"\\\"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝 起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。 先实现功能，再去优化，否则一切会很乱。——AI悦创 凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\\\"\\\"\\\" # 外面使用双引号进行包裹即可 print(string) # 输出 我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝 起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。 先实现功能，再去优化，否则一切会很乱。——AI悦创 凡是你不能清晰写下来的东西，都是你还没有真正理解的东西 \",\"可以从上面的输出可知，原本什么格式，输出就是什么格式。「原样输出」「三个单引号的效果和上面一样」\",\"三个单引号或者三个双引号，实现原样输出。\",\"多行注释\",\"单双三引号混用（代码略）\",\"image-20231215074315872\"]},\"73\":{\"h\":\"3. 字符串长度\",\"t\":[\"如何获取字符串长度？ —— len()\",\"len():返回字符串中字符长度或字符数。\",\"paragraph = \\\"Hello everyone!\\\" print(len(paragraph)) \",\"在使用len获取字符串长度时，是从数字1开始的。\"]},\"74\":{\"h\":\"4. 字符串中字符的获取\"},\"75\":{\"h\":\"4.1 获取单个字符\",\"t\":[\"string = \\\"bornforthis\\\" select = string[0] print(select) select_1 = string[-1] select_2 = string[10] select_3 = len(string) print(string[select_3 - 1]) #output b s \"]},\"76\":{\"h\":\"4.2 获取多个连续字符\",\"t\":[\"string = \\\"bornforthis\\\" \\\"\\\"\\\" 语法：string = \\\"bornforthis\\\" select = string[start:end] PS: end 要+1 \\\"\\\"\\\" #获取字符串bor select = string[0:3] print(select) select_1 = string[4:7] select_2 = string[-4:] print(select_1) print(select_2) #output bor for this \"]},\"77\":{\"h\":\"4.3 获取多个不连续字符\",\"t\":[\"string = \\\"0123456789\\\" \\\"\\\"\\\" 语法：string = \\\"0123456789\\\" select = string[start: end: sep] PS: end 要+1 \\\"\\\"\\\" #获取字符串bor select = string[0: len(string): 2] print(select) \",\"string = \\\"0123456789\\\" \\\"\\\"\\\" 语法：string = \\\"0123456789\\\" select = string[start: end: sep] PS: end 要+1 \\\"\\\"\\\" #获取字符串bor select = string[0: len(string): 2] select_1 = string[1: len(string) : 2] string_1 = \\\"bornforthis\\\" select_2 = string_1[1: len(string_1): 3] select_3 = string_1[0: len(string_1): 3] print(select) print(select_1) print(select_2) print(select_3) #output 02468 13579 ofts bnri \",\"优化方法，从0开始，默认不需要写，到结尾，也可以不写\",\"所以从开始到结尾，打印步长为2的所有数\",\"string = \\\"0123456789\\\" select = string[:: 2] print(select) \",\"如果不是从[0]开始，就不可以省略\"]},\"78\":{\"h\":\"4.4 字符串倒序\"},\"79\":{\"h\":\"4.4.1 实现\",\"t\":[\"字符串的第三个位置，控制的是字符的提取方向。默认正数为1，如果改成-1，则会变成反方向。\",\"注意\",\"正负控制方向，数字大小控制步长\",\"string = \\\"Vervevividness\\\" select = string[::-1] print(select) #output ssendivivevreV \"]},\"80\":{\"h\":\"4.4.2 string[::1] 省略了\",\"t\":[\"string = \\\"Vervevividness\\\" select = string[0: 15: -1] print(select)#无结果 \",\"方向相互冲突，所以没有结果\",\"image-20231215083113492\",\"string = \\\"Vervevividness\\\" select = string[len(string):0:-1] print(select) #output ssendivivevre \",\"0+1 = 1 仍然取不到[0]的数值\",\"可以通过省略0来解决这个问题\"]},\"81\":{\"h\":\"4.4.2.1方法\",\"t\":[\"重写开始结尾\",\"string = \\\"Vervevividness\\\" select = string[-1:-15:-1] print(select) #output ssendivivevreV \",\"image-20231215083057643\",\"string = \\\"bornforthis\\\" #rofn select = string[-5: -9: -1] print(select) #output rofn \"]},\"82\":{\"h\":\"5. 字符串内置方法\"},\"83\":{\"h\":\"5.1 .upper()\",\"t\":[\"将字符串内容，全部转成大写\",\"string = \\\"bornforthis\\\" upper_string = string.upper() print(upper_string) #output BORNFORTHIS \"]},\"84\":{\"h\":\"5.2 .lower()\",\"t\":[\"将字符串的内容全部转成小写\",\"string = \\\"BORNFORTHIS\\\" lower_string = string.lower() print(lower_string) #output bornforthis \"]},\"85\":{\"h\":\"5.3 .capitalize()\",\"t\":[\"将字符串首字母转换成大写（只有首字母）\",\"string = \\\"hello, I am Lisa\\\" capitalize_string = string.capitalize() print(capitalize_string) #output Hello, i am lisa \"]},\"86\":{\"h\":\"5.4 .title()\",\"t\":[\"将字符串的每个单词的首字母大写（无论什么间隔）\",\"string = \\\"hello, I-am-lisa\\\" title_string = string.title() print(title_string) #output Hello, I-Am-Lisa \"]},\"87\":{\"h\":\"5.5 .startswith()\",\"t\":[\"string = \\\"hello, I-am-lisa\\\" new_string = string.startswith(\\\"h\\\") print(new_string) new_string1 = string.startswith(\\\"he\\\") print(new_string1) #output True True \"]},\"88\":{\"h\":\"5.6 .endswith()\",\"t\":[\"string = \\\"hello, I-am-lisa\\\" new_string = string.endswith(\\\"-lisa\\\") print(new_string) new_string_1 = string.endswith(\\\"s\\\") print(new_string_1) #output True False \"]},\"89\":{\"h\":\"5.7 .count()\",\"t\":[\"检测目标（特定）字符出现的次数\",\"string = \\\"bornforthis\\\" new_string = string.count(\\\"r\\\") print(new_string) string = \\\"I like apple apple apple apple\\\" new_string = string.count(\\\"apple\\\") print(new_string) #output 2 4 \"]},\"90\":{\"h\":\"5.8 .find()\",\"t\":[\"寻找目标字符或单词在特定字符串中，第一次出现的下标。如果是查找单词，那么find( ) 返回目标单词第一个字母的下标。\",\"如果查询的字符或单词不存在，则返回“-1”\",\"string = \\\"bornforthis\\\" new_string = string.find(\\\"b\\\") print(new_string) #output 0 \",\"string = \\\"bornforthis\\\" new_string = string.find(\\\"a\\\") print(new_string) #output -1 \",\"string = \\\"bornforthis\\\" new_string = string.find(\\\"orn\\\") print(new_string) #output 1 \"]},\"91\":{\"h\":\"5.9 .index()\",\"t\":[\"寻找目标字符或单词在特定字符串，第一次出现的下标。如果是查找单词，那么index（）返回目标单词的第一个字符的下标\",\"如果查询的单词不存在，则报错\",\"string = \\\"bornforthis\\\" new_string = string.index(\\\"orn\\\") print(new_string) #output 1 string = \\\"bornforthis\\\" new_string_1 = string.index(\\\"q\\\") print(new_string_1) #output Traceback (most recent call last): File \\\"/Users/wangruoyihan/PycharmProjects/pythonProject/python 11.12.py\\\", line 95, in <module> new_string_1 = string.index(\\\"q\\\") ^^^^^^^^^^^^^^^^^ ValueError: substring not found \"]},\"92\":{\"h\":\"5.10 .isdigit()\",\"t\":[\"判断字符串是不是纯数字字符串，字符串中只要有一个字符是非数字，则返回false。\",\"string = \\\"12345678\\\" result = string.isdigit() print(result) #output True string = \\\"12345678a\\\" result = string.isdigit() print(result) #output false \"]},\"93\":{\"h\":\"5.11 .isalpha()\",\"t\":[\"判断字符串是不是纯字母字符串，字符串中只要有一个字符是非字母字，则返回false。\",\"string = \\\"Verveviviness\\\" result = string.isalpha() print(result) #output True string = \\\"Verve vividness\\\" result = string.isalpha() print(result) #output false \"]},\"94\":{\"h\":\"5.12 .isalnum()\",\"t\":[\"判断字符串是不是纯数字或者纯字母，纯数字字母字符串，字符串中但凡出现非数字字母元素，则返回False\",\"string = \\\"Verveviviness\\\" result = string.isalnum() print(result) #output True string = \\\"123456\\\" result = string.isalnum() print(result) #output True string = \\\"Verveviviness1234\\\" result = string.isalnum() print(result) #output True \"]},\"95\":{\"h\":\"5.13 .isupper\",\"t\":[\"判断字符串是否全部大写，字符串中只要有一个字符是非大写，则返回false。\",\"string = \\\"HELLO\\\" boolean = string.isupper() print(boolean) #output True string = \\\"HELLOa\\\" boolean = string.isupper() print(boolean) #output False string = \\\"HELLO$$\\\" boolean = string.isupper() print(boolean) #output True \"]},\"96\":{\"h\":\"5.14 .islower\",\"t\":[\"判断字符串是否全部小写，字符串中只要有一个字符是非小写，则返回false。\",\"string = \\\"hello\\\" boolean = string.islower() print(boolean) #output True string = \\\"Helloa\\\" boolean = string.islower() print(boolean) #output False string = \\\"hello$$\\\" boolean = string.islower() print(boolean) #output True \"]},\"97\":{\"h\":\"5.15 .isspace\",\"t\":[\"判断字符串是否为纯空格，多少个空格都可以。纯空格返回True，否则返回False\",\"string = \\\" \\\" boolean = string.isspace() print(boolean) #output True string = \\\" \\\" boolean = string.isspace() print(boolean) #output True string = \\\"hello$$\\\" boolean = string.isspace() print(boolean) #output False \"]},\"98\":{\"h\":\"5.16 .strip()\",\"t\":[\"默认去掉目标字符串的前后空白字符，如果指定参数，则去掉指定字符。\",\"string = \\\" Vervevividness \\\" strip_string = string.strip() print(\\\"原本字符串\\\", string) print(\\\"去掉空白后的\\\", strip_string) #output 原本字符串 Vervevividness 去掉空白后的 Vervevividness string = \\\" --Vervevividness-- \\\" strip_string = string.strip(\\\"- \\\")# 如果只打-，只会去除连续的减号 print(\\\"原本字符串\\\", string) print(\\\"去掉-和空白后的\\\", strip_string) #没有先后顺序 #output 原本字符串 --Vervevividness-- 去掉-和空白后的 Vervevividness \"]},\"99\":{\"h\":\"5.17 .lstrip()\",\"t\":[\"默认去掉字符串左边的空白字符，如果指定参数，则去掉左边的指定字符。\",\"string = \\\" bornforthis \\\" lstrip_string = string.lstrip() print(\\\"原本的字符串:\\\", string) print(\\\"去掉左边空白字符后:\\\", lstrip_string) # ---output--- 原本的字符串: bornforthis 去掉左边空白字符后: bornforthis string = \\\"----bornforthis----\\\" lstrip_string = string.lstrip('-') print(\\\"原本的字符串:\\\", string) print(\\\"去掉左边 '-' 后:\\\", lstrip_string) # ---output--- 原本的字符串: ----bornforthis---- 去掉左边 '-' 后: bornforthis---- string = \\\"-- --bornforthis----\\\" lstrip_string = string.lstrip('- ') # 不分先后顺序 print(\\\"原本的字符串:\\\", string) print(\\\"去掉左边 '- ' 后:\\\", lstrip_string) # ---output--- 原本的字符串: -- --bornforthis---- 去掉左边 '- ' 后: bornforthis---- \"]},\"100\":{\"h\":\"5.18 .Rsrip()\",\"t\":[\"默认去掉字符串右边的空白字符，如果指定参数，则去掉右边的指定字符。\",\"string = \\\" bornforthis \\\" rstrip_string = string.rstrip() print(\\\"原本的字符串:\\\", string) print(\\\"去掉右边空白字符后:\\\", rstrip_string) # ---output--- 原本的字符串: bornforthis 去掉右边空白字符后: bornforthis string = \\\"----bornforthis----\\\" rstrip_string = string.rstrip('-') print(\\\"原本的字符串:\\\", string) print(\\\"去掉右边 '-' 后:\\\", rstrip_string) # ---output--- 原本的字符串: ----bornforthis---- 去掉右边 '-' 后: ----bornforthis string = \\\"----bornforthis-- --\\\" rstrip_string = string.rstrip('- ') # 不分先后顺序 print(\\\"原本的字符串:\\\", string) print(\\\"去掉右边 '- ' 后:\\\", rstrip_string) # ---output--- 原本的字符串: ----bornforthis-- -- 去掉右边 '- ' 后: ----bornforthis \"]},\"101\":{\"h\":\"5.19 .replce()\",\"t\":[\"string = \\\" Vervevividness \\\" replace_string = string.replace(' ', '@', 1) print(\\\"原本的： \\\", string) print(\\\"改后的： \\\", replace_string) #output 原本的： Vervevividness 改后的： @ Vervevividness string = \\\" Vervevividness \\\" replace_string = string.replace(' ', '@',) print(\\\"原本的： \\\", string) print(\\\"改后的： \\\", replace_string) #output 原本的： Vervevividness 改后的： @@Vervevividness@@ string = \\\" 11--Vervevividness--11 \\\" replace_string = string.replace('1-', 'ai-',) print(\\\"原本的： \\\", string) print(\\\"改后的： \\\", replace_string) #output 原本的： 11--Vervevividness--11 改后的： 1ai--Vervevividness--11 \"]},\"102\":{\"h\":\"5.20 .split()\",\"t\":[\".split(sep, maxsplit)以特定字符进行分割，默认空格分割。如果传入参数「sep」，则以参数进行分割。返回分割后的列表。maxsplit用于控制分割几次。\",\"string = \\\"hello bornforthis ok\\\" string_split = string.split() print(\\\"原本的字符串: \\\", string) print(\\\"分割后的: \\\", string_split) string = \\\"hello-bornforthis-ok\\\" string_split = string.split('-') print(\\\"原本的字符串: \\\", string) print(\\\"分割后的: \\\", string_split) string = \\\"hello-bornforthis-ok\\\" string_split = string.split(sep='-', maxsplit=1) print(\\\"原本的字符串: \\\", string) print(\\\"分割后的: \\\", string_split) #output 原本的字符串: hello bornforthis ok 分割后的: ['hello', 'bornforthis', 'ok'] 原本的字符串: hello-bornforthis-ok 分割后的: ['hello', 'bornforthis', 'ok'] 原本的字符串: hello-bornforthis-ok 分割后的: ['hello', 'bornforthis-ok'] \"]},\"103\":{\"h\":\"5.21 rsplit\",\"t\":[\".rsplit(sep, maxsplit) 从字符串右边进行分割，也可以传入参数「sep」，进行指定分割。返回分割后的列表。maxsplit 指定分割次数。\",\"string = \\\"hello bornforthis ok\\\" string_split = string.rsplit() print(\\\"原本的字符串: \\\", string) print(\\\"分割后的: \\\", string_split) string = \\\"hello-bornforthis-ok\\\" string_split = string.rsplit('-') print(\\\"原本的字符串: \\\", string) print(\\\"分割后的: \\\", string_split) string = \\\"hello-bornforthis-ok\\\" string_split = string.rsplit('-', 1) print(\\\"原本的字符串: \\\", string) print(\\\"分割后的: \\\", string_split) #output 原本的字符串: hello bornforthis ok 分割后的: ['hello', 'bornforthis', 'ok'] 原本的字符串: hello-bornforthis-ok 分割后的: ['hello', 'bornforthis', 'ok'] 原本的字符串: hello-bornforthis-ok 分割后的: ['hello-bornforthis', 'ok'] \"]},\"104\":{\"h\":\"5.22 join()\",\"t\":[\"以特定字符使字符串间隔。\",\"string = \\\"Vervevividness\\\" join_string = '-'.join(string) print(\\\"原本的字符串:\\\" ,string) print(\\\"添加之后的:\\\", join_string) #output 原本的字符串: Vervevividness 添加之后的: V-e-r-v-e-v-i-v-i-d-n-e-s-s \"]},\"105\":{\"h\":\"6. 字符串格式化\",\"t\":[\"string = 'Hi bornforthis, welcome to here' print(string) \",\"所存在的问题：需要换一个人名或者地区，就需要重新创建一个全新的字符串。\",\"我们更希望有类似模版，让我们不同的人名、地面填写进去。而不是每个人都从头创建一个新字符串。\",\"当然，这个时候有可能会想到使用字符串的加法，但字符串加法存在问题。\",\"str1 = \\\"Hi \\\" str2 = \\\"welcome to here\\\" n = str1 + \\\"Cindy, \\\" + str2 print(n) #output Hi Cindy, welcome to here \",\"由上面的代码可知，虽然实现了。但是很繁琐，如果更复杂的字符就不合适了。\",\"另一个问题是，在python中不同的数据类型不能直接相加，除非强制转化为字符串：\",\"string = \\\"Money is: \\\" + 190 print(string) #output Traceback (most recent call last): File \\\"/Users/wangruoyihan/PycharmProjects/pythonProject/python 11.12.py\\\", line 98, in <module> string = \\\"Money is: \\\" + 190 ~~~~~~~~~~~~~^~~~~ TypeError: can only concatenate str (not \\\"int\\\") to str string = \\\"Money is: \\\" +str(190) print(string) \",\"—format就应运而生了\"]},\"106\":{\"h\":\"6.1 format()\",\"t\":[\"单个花括号\",\"string = \\\"Hello {}, Welcome to Vervevividness.\\\".format(\\\"Sam\\\") print(string) template_string = \\\"Hi {}, Welcome to Vervevividness\\\" print(template_string.format(\\\"Cindy\\\")) new_string = template_string.format(\\\"guys\\\") print(new_string) #output Hello Sam, Welcome to Vervevividness. Hi Cindy, Welcome to Vervevividness Hi guys, Welcome to Vervevividness \",\"多个花括号，按照顺序填充\",\"string = \\\"Hello {}, Welcome to {}.\\\".format(\\\"Sam\\\", \\\"Vervevividness\\\") print(string) template_string = \\\"Hi {}, Welcome to {}\\\" print(template_string.format(\\\"Cindy\\\", \\\"Shanghai\\\")) new_string = template_string.format(\\\"guys\\\", \\\"here\\\") print(new_string) #output Hello Sam, Welcome to Vervevividness. Hi Cindy, Welcome to Shanghai Hi guys, Welcome to here \",\"多个花括号指定位置\",\"string = \\\"Hello {1}, Welcome to {0}.\\\".format(\\\"Vervevividness\\\", \\\"Sam\\\") print(string) template_string = \\\"Hi {1}, Welcome to {0}\\\" print(template_string.format(\\\"Shanghai\\\", \\\"Cindy\\\")) new_string = template_string.format(\\\"here\\\", \\\"guys\\\") print(new_string) #output Hello Sam, Welcome to Vervevividness. Hi Cindy, Welcome to Shanghai Hi guys, Welcome to here \",\"参数指定\",\"string = \\\"Hello {name}, Welcome to {region}.\\\".format(name = \\\"Sam\\\", region = \\\"Vervevividness\\\") print(string) template_string = \\\"Hi {name}, Welcome to {region}\\\" print(template_string.format(name = \\\"Cindy\\\", region = \\\"Shanghai\\\")) new_string = template_string.format(name = \\\"guys\\\", region = \\\"here\\\") print(new_string) #output Hello Sam, Welcome to Vervevividness. Hi Cindy, Welcome to Shanghai Hi guys, Welcome to here \",\"保留指定小数位\",\"string = \\\"Money is {:.3f}.\\\".format(190) print(string) #output Money is 190.000. \"]},\"107\":{\"h\":\"6.2 f\",\"t\":[\"直接读取变量\",\"name = \\\"Cindy\\\" region = \\\"Vervevividness\\\" string = f\\\"Hi {name}, welcome to {region}.\\\" print(string) #output Hi Cindy, welcome to Vervevividness. \",\"保留小数位\",\"money = 200 string = f\\\"Money is {money:.3f}.\\\" print(string) #output Money is 200.000. \"]},\"108\":{\"h\":\"%6.3 格式化\",\"t\":[\"%d:整数\",\"%s:字符串\",\"%f:浮点数\",\"单个位置传入\",\"string = \\\"Money is %d\\\" new_s = string % 13 print(new_s) print(string % 19) string = \\\"Money is %d\\\" %19 print(string) #output Money is 13 Money is 19 Money is 19 \",\"多个位置传入\",\"string = \\\"Money is %d %s\\\" new_s = string % (13, \\\"hello\\\") print(new_s) print(string % (19, \\\"HI\\\")) string = \\\"Money is %d %s\\\" %(19, \\\"haha\\\") print(string) #output Money is 13 hello Money is 19 HI Money is 19 haha \",\"string = \\\"Money is %d %s\\\" new_s = string % (13, 'make a million') print(new_s) print(string % (888, 'sudden wealth')) string = \\\"Money is %d %s\\\" % (190, 'super rich') print(string) # ---output--- Money is 13 make a million Money is 888 sudden wealth Money is 190 super rich \",\"保留小数位\",\"string = \\\"Money is %.3f\\\" new_s = string % 19 print(new_s) print(string % 18) string = \\\"Money is %.3f\\\" % 180 print(string) # ---output--- Money is 19.000 Money is 18.000 Money is 180.000 \"]},\"109\":{\"h\":\"6.4 f 和 format的优缺点\",\"t\":[\"format 和 % 都像模版，提前做好模版后面有需要试可以直接使用；\",\"而 f 就像在银行当中，柜员边问你边登记，不能提前做好模版。\"]},\"110\":{\"h\":\"7. 字符串的不可变性\",\"t\":[\"字符串是不可变的，不可以改变字符串中的任何元素，如需改变字符串中的元素，则需要新建一个字符串。\",\"s = \\\"Verevevividness\\\" s[0] = \\\"c\\\" #output Traceback (most recent call last): File \\\"/Users/wangruoyihan/PycharmProjects/pythonProject/python 11.12.py\\\", line 98, in <module> s[0] = \\\"c\\\" ~^^^ TypeError: 'str' object does not support item assignment \",\"除了使用replace还可以使用字符串拼接：\",\"s = \\\"vervevividness\\\" new = \\\"a\\\"+ s[1:] print(new) #output aervevividness \"]},\"111\":{\"h\":\"8. 字符串转义\",\"t\":[\"转义字符\",\"含义\",\"例子\",\"\\\\\\\\\",\"反斜杠符号，为了在字符串中得到 \\\\\",\"s = \\\"bor\\\\\\\\nforthis\\\"\",\"\\\\b\",\"退格，类似删除键\",\"s = \\\"bornff\\\\borthis\\\"\",\"\\\\n\",\"换行\",\"s = \\\"bornfor\\\\nthis\\\"\",\"\\\\t\",\"制表符\",\"s = \\\"born\\\\tfor\\\\tthis\\\"\",\"r\",\"取消转义「R和r」都可以\",\"s = r\\\"born\\\\nforthis\",\"示例代码：\",\"s = \\\"Vervevividness\\\" print(s) s= \\\"Verve\\\\nvividness\\\" print(s) s= r\\\"Verve\\\\nvividness\\\" print(s) s = \\\"Verve\\\\bvividness\\\" print(s) s = \\\"Verve\\\\\\\\nvividness\\\" print(s) s = \\\"a\\\\tb\\\\tc\\\\td\\\" print(s) #output Vervevividness Verve vividness Verve\\\\nvividness Vervvividness Verve\\\\nvividness a b c d \"]},\"112\":{\"h\":\"9. 字符串的连接\",\"t\":[\"s1 = \\\"Verve\\\" s2 = \\\"vividness\\\" print(s1 +s2) print(s1, s2) #output Vervevividness Verve vividness s1 = '*-love-' print(s1 *10) *-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love- \",\"在末尾输出一个*\",\"s1 = '*-love-' print(s1 * 10 + s1[0]) print(s1 * 10, end = '*') \"]},\"113\":{\"h\":\"10. 读取用户输入\"},\"114\":{\"h\":\"10.1 input()基本使用\",\"t\":[\"使用input()获取用户输入\",\"user_input = input() print(user_input) # ---output--- bornforthis bornforthis \",\"input() 使用输入提示\",\"但是上面的代码，有点小问题：在运行的时候并不能很直观的知道，程序需要我们输入，何况非程序员用户呢？\",\"image-20231225075451181\",\"如何解决？——使用输入提示。\",\"input() 函数里面支持我们写入字符串进行提示。\",\"user_input = input('Enter your name:>>>') print(\\\"user input name:\\\", user_input) # ---output--- Enter your name:>>>bornforthis user input name: bornforthis \",\"user_input = input(\\\"please input your information: \\\") print(user_input) #output please input your indormation: hello hello \",\"In [5]: type(input(':>>>')) :>>>(1, 2, 3, 4) Out[5]: str In [6]: type(input(':>>>')) :>>>\\\"hello\\\" Out[6]: str In [7]: type(input(':>>>')) :>>>{ 'a' : 10, 'b' : 20 } Out[7]: str In [8]: type(input(':>>>')) :>>>True Out[8]: str \",\"通过上面的代码示例，我们可以知道：通过 input() 获取用户输入，得到的数据类型都是字符串。\",\"得知 input() 的特点后，如何解决这个问题呢？——用户如何实现：直接输入原有的类型并得到原有的类型。\",\"In [9]: n = int(input(':>>>')) :>>>12 In [10]: typr(n) In [11]: type(n) Out[11]: int In [12]: #存在一些问题 In [13]: s = list(input('>>>')) >>>[1, 2, 3, 4] In [14]: print(s) ['[', '1', ',', ' ', '2', ',', ' ', '3', ',', ' ', '4', ']'] \",\"适合：数字「整数，浮点数」，字符串，布尔形\",\"不适合：列表，元组，字典，集合\"]},\"115\":{\"h\":\"10.3.3\",\"t\":[\"In [15]: s = eval(input('>>>')) >>>12 In [16]: type(s),s Out[16]: (int, 12) In [17]: s = eval(input('>>>')) >>>[1, 2, 3] In [18]: type(s),s Out[18]: (list, [1, 2, 3]) In [19]: s = eval(input('>>>')) >>>{1, 2, 3} In [20]: type Out[20]: type In [21]: type(s),s Out[21]: (set, {1, 2, 3}) In [23]: s = eval(input('>>>')) >>>{'a': 10, 'b' : 12} In [24]: type(s),s Out[24]: (dict, {'a': 10, 'b': 12}) \",\"eval()伴随的问题\",\"In [25]: s = eval(input('>>>')) >>>string --------------------------------------------------------------------------- NameError Traceback (most recent call last) Cell In[25], line 1 ----> 1 s = eval(input('>>>')) File <string>:1 NameError: name 'string' is not defined \",\"稍微分析一下 eval() 的功能“大概”实现原因：\",\"input 获取用户输入，得到字符串类型。\",\"In [44]: s = input(':>>>') :>>>[1, 2, 3] In [45]: s Out[45]: '[1, 2, 3]' \",\"从上面的代码可以得知，eval 大概率实现的是去掉字符串左右两边的引号。「这个地方 eval 或许不是按我说的实现，但是为了让你们更好理解原理，先这样来。」\",\"所以，为什么会导致上面的报错呢？\",\"获取用户输入：s = eval(input(\\\":>>>\\\"))\",\"其中input会得到‘string’,而通过eval转换之后，就类似于string变量。但是在之前的代码中，并没有创建string这个变量。\",\"解决方法： \",\"在获取用户输入之前提前创建一个叫做string的变量；「但不是我们想要的」\",\"输入时，有意加上单引号或双引号\",\"In [50]: string = 'hello this string' In [51]: s = eval(input(':>>>')) :>>>string In [52]: s Out[52]: 'hello this string' In [53]: num = 12 In [54]: s = eval(input(':>>>')) :>>>num In [55]: type(s), s Out[55]: (int, 12) In [56]: s = eval(input(':>>>')) :>>>'string' In [57]: type(s), s Out[57]: (str, 'string') \",\"eval()小技巧\",\"In [27]: eval(input('>>>')) >>>1 + 1 Out[27]: 2 In [28]: eval(input('>>>')) >>>2 - 1 Out[28]: 1 In [29]: eval(input('>>>')) >>>9 * 8 Out[29]: 72 In [30]: eval(input('>>>')) >>>9 / 3 Out[30]: 3.0 \"]},\"116\":{\"c\":[\"python notebook\"]},\"117\":{\"c\":[\"notes\",\"python\"]},\"118\":{\"h\":\"05 Python list__Exercise\",\"t\":[\"image-20231230164639809\",\"numbers = list('132569874') numbers_even_position = numbers[::2] numbers_even_position.sort(reverse=True) numbers[::2] = numbers_even_position print(numbers) #output ['8', '3', '6', '5', '4', '9', '2', '7', '1'] \"]},\"119\":{\"c\":[\"python notebook\"]},\"120\":{\"c\":[\"notes\",\"python\"]},\"121\":{\"h\":\"05 Python list\"},\"122\":{\"h\":\"1. 列表结构\",\"t\":[\"利用中括号表示列表\",\"列表内元素用逗号隔开\",\"注意是英文输入法下的逗号\",\"student1 = ['lilei', 18, 'class01', 201901] student2 = ['hanmeimei', 19, 'class02', 201902] \",\"列表的可变性：可以修改列表里面的内容。\",\"list (\\\"Hello\\\") print(list) #output ['H', 'e', 'l', 'l', 'o'] \",\"字符串强制转换成列表\"]},\"123\":{\"h\":\"2. 获取列表的某个元素\"},\"124\":{\"h\":\"2.1 列表下标的组成\",\"t\":[\"编程语言中通常第一个位置的编号是0\",\"image-20231226083502602\"]},\"125\":{\"h\":\"2.2 提取单个元素\",\"t\":[\"grade = [ 97, 98, 99, 100] print(grade[0]) print(grade[0] +grade[3]) \"]},\"126\":{\"h\":\"2.3 获取列表中连续几个元素\",\"t\":[\"中括号内用 起始位置:结束位置 描述\",\"注意：不包括结束位置的那个元素\",\"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(numbers[2:6]) #[3, 4, 5, 6] \",\"image-20231226084414787\"]},\"127\":{\"h\":\"2.4 获取列表中连续且特定间隔的元素\",\"t\":[\"更细致的用法**起始位置:结束位置:步长**\",\"注意： 不包括结束位置的元素\",\"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(numbers[1:7:2]) #[2, 4, 6] \",\"image-20231226084812892\"]},\"128\":{\"h\":\"3. 列表的切片赋值\",\"t\":[\"In [18]: numbers = [1,5] In [19]: numbers[1:1] Out[19]: [] In [20]: numbers[1:1]=[2,3,4] In [21]: numbers Out[21]: [1, 2, 3, 4, 5] In [22]: numbers[1:4] Out[22]: [2, 3, 4] In [24]: numbers[1:4]=[] In [25]: numbers Out[25]: [1, 5] \"]},\"129\":{\"h\":\"4. 小试牛🔪\",\"t\":[\"获取用户输入两个值，一个是要插入的位置，一个是要插入这个位置的值。\",\"给定下面列表：\",\"numbers = [1, 2, 3, 5, 6] \",\"numbers = [1, 2, 3, 5, 6] #given list get_position = int(input(\\\"please enter the position that you want to insert the value: \\\")) get_number = int(input(\\\"please enter the number that you want to insert: \\\")) numbers[get_position:get_position] = [get_number] print(numbers) #please enter the position that you want to insert the value: 3 please enter the number that you want to insert: 2 [1, 2, 3, 2, 5, 6] \"]},\"130\":{\"h\":\"5. 在列表的特定位置插入元素「.insert()」\",\"t\":[\".insert(index, element) 是一个列表的基本方法，用于在列表的指定位置插入一个元素。\",\"它的基本语法是：\",\"list.insert(index, element) \",\"index: 指定要插入元素的位置。索引从 0 开始。如果指定的索引超出了列表的当前长度「不会报错」，则元素将被添加到列表的末尾。\",\"element: 这是你想要插入列表的元素。\",\"它的基本语法是\",\"list.insert(index, object) \",\"numbers = [1, 2, 3, 5, 6] numbers.insert(3, 4) print(numbers) #[1, 2, 3, 4, 5, 6] \"]},\"131\":{\"h\":\"6. 列表长度\",\"t\":[\"获取列表长度，使用len():\",\"grade = [98, 99, 95, 80] print(len(grade)) #output 4 \"]},\"132\":{\"h\":\"7. 修改列表中的元素\",\"t\":[\"image-20231230083540506\",\"单个元素修改\",\"grade = [98, 99, 100] print(\\\"before editing: \\\", grade) grade[0] = 97 print(\\\"after editing: \\\", grade) #output before editing: [98, 99, 100] after editing: [97, 99, 100] \",\"多个元素修改\",\"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 8, 10] print(\\\"before editing: \\\", numbers) numbers[1:5] = [\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\"] print(\\\"after editing: \\\", numbers) #output before editing: [1, 2, 3, 4, 5, 6, 7, 8, 8, 10] after editing: [1, '1', '2', '3', '4', '5', 6, 7, 8, 8, 10] \",\"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(\\\"before editing: \\\", numbers) numbers[1:5] = [\\\"1\\\", \\\"2\\\"] print(\\\"after editing: \\\", numbers) #output before editing: [1, 2, 3, 4, 5, 6, 7, 9, 8, 10] after editing: [1, '1', '2', 6, 7, 8, 9, 10] \",\"多个修改的对象也可以是字符串\",\"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(\\\"before editing: \\\", numbers) numbers[1:5] = \\\"NICE TO MEET YOU\\\" print(\\\"after editing: \\\", numbers) #output before editing: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] after editing: [1, 'N', 'I', 'C', 'E', ' ', 'T', 'O', ' ', 'M', 'E', 'E', 'T', ' ', 'Y', 'O', 'U', 6, 7, 8, 8, 10] \",\"多个元素修改情况下，可以使用的对象：\",\"列表\",\"元组\",\"集合\",\"字符串\",\"字典「放进去的是 key」\",\"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(\\\"before editing: \\\", numbers) numbers[1:5] = {'a':1, 'b':2} print(\\\"after editing: \\\", numbers) #output before editing: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] after editing: [1, 'a', 'b', 6, 7, 8, 9, 10] \",\"多个元素修改的情况下，不可以的对象：\",\"布尔型\",\"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(\\\"before editing: \\\", numbers) numbers[1:5] = True print(\\\"after editing: \\\", numbers) #output before editing: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Traceback (most recent call last): File \\\"/Users/wangruoyihan/PycharmProjects/pythonProject/python homework.py\\\", line 103, in <module> numbers[1:5] = True ~~~~~~~^^^^^ TypeError: can only assign an iterable \"]},\"133\":{\"h\":\"8. 向列表中添加元素\"},\"134\":{\"h\":\"8.1 添加单个元素「.append( )」\",\"t\":[\"image-20231230085025936\",\"lst = [1, 2] print(\\\"before:\\\", lst) lst.append(3) print(\\\"after: \\\", lst) #output before: [1, 2] after: [1, 2, 3] numbers = [1, 2, 3] numbers.append([1, 2]) print(numbers) #output [1, 2, 3, [1, 2]] \"]},\"135\":{\"h\":\"8.2 添加多个元素「 .extend() 」\",\"t\":[\"numbers = [1, 2, 3] numbers.extend([1, 2]) #也可以使用tuple print(numbers) #output [1, 2, 3, 1, 2] \"]},\"136\":{\"h\":\"9. 删除列表中的元素\"},\"137\":{\"h\":\"9.1 del\",\"t\":[\"del需要指定列表中要删除的单个元素或者多个元素。\",\"numbers = [1, 2, 3, 4] del numbers[0] print(numbers) #output [2, 3, 4] \",\"如果不指定删除的元素，则删除整个变量。\",\"numbers = [1, 2, 3, 4] del numbers[] print(numbers) #output Traceback (most recent call last): File \\\"/Users/wangruoyihan/PycharmProjects/pythonProject/python homework.py\\\", line 102, in <module> print(numbers) ^^^^^^^ NameError: name 'numbers' is not defined \"]},\"138\":{\"h\":\"9.2 pop( )\",\"t\":[\"pop()函数默认删除列表中的最后一个元素，也可以传参数指定要删除的元素下标\",\"numbers = [1, 2, 3] numbers.pop() print(numbers) numbers.pop(0) print(numbers) #output [1, 2] [2] \"]},\"139\":{\"h\":\"9.3 remove( )\",\"t\":[\"remove()指定删除列表中某个元素，例如：remove('hello')则指定删除列表中的‘hello’元素\",\"numbers = [1, 2, 3, 4] numbers.remove(1) print(numbers) #output [2, 3, 4] \"]},\"140\":{\"h\":\"10.两个列表相加\",\"t\":[\"直接使用加号就可以\",\"numbers1 = [1, 2, 3] numbers2 = [4, 5, 6] print(numbers1 + numbers2) #output [1, 2, 3, 4, 5, 6] \"]},\"141\":{\"h\":\"11. 判断某个元素是否存在于列表里面「Value in Sequence」\",\"t\":[\"image-20231230091110993\"]},\"142\":{\"h\":\"12. 获取列表中某个元素的重复次数「.count()」\",\"t\":[\"numbers = [1, 2, 3, 4, 2, 5, 7, 1, 3, 2] print(numbers.count(2)) #output 3 \"]},\"143\":{\"h\":\"13. 获取列表中某个元素第一次出现的位置「.index()」\",\"t\":[\"用 列表.index(元素) 来获取\",\"numbers = [1, 2, 3] print(numbers.index(1)) #output 0 \"]},\"144\":{\"h\":\"14. 列表排序\"},\"145\":{\"h\":\"14.1 sort (reverse = False)\",\"t\":[\"list.sort()使列表内的元素从小到大排序，直接修改列表本身。如果里面指定reverse = True则列表降序排列\",\"numbers = [2, 3, 4, 1, 6, 4, 8, 9] numbers.sort() print(numbers) #[1, 2, 3, 4, 4, 6, 8, 9] numbers = [2, 3, 4, 1, 6, 4, 8, 9] numbers.sort(reverse=True) print(numbers) \"]},\"146\":{\"h\":\"14.2 sorted(list, reverse=False)\"},\"147\":{\"h\":\"15. reverse()\",\"t\":[\"反转列表中的元素\",\"lst = ['毒药', '解药', '感冒药'] lst.reverse() print(lst) #output ['感冒药', '解药', '毒药'] \"]},\"148\":{\"h\":\"16. 列表的深浅拷贝\"},\"149\":{\"h\":\"16.1 所存在的问题\",\"t\":[\"x = ['香蕉', '苹果', '葡萄'] x = ['香蕉', '苹果', '葡萄'] y = x print(f'原本的x：\\\\n\\\\t{x}\\\\n\\\\t{y}\\\\n\\\\t{id(y)}') #id 用来获取变量的物理地址 y[0] = '鸭梨' print(f'修改后的x：\\\\n\\\\t{x}\\\\n\\\\t{y}\\\\n\\\\t{id(x)}') #output 原本的x： ['香蕉', '苹果', '葡萄'] ['香蕉', '苹果', '葡萄'] 4300547008 修改后的x： ['鸭梨', '苹果', '葡萄'] ['鸭梨', '苹果', '葡萄'] 4300547008 \",\"会发现修改 y 的列表，但是会同时影响 x 列表。为什么会产生这个呢？\",\"是因为在进行y = x的时候，只是进行了列表地址的复制， x , y 实际上是同一个列表\",\"原因一，Python id用来检测变量物理地址（也就是在计算机中所在的位置）\",\"image-20231230233914160\",\"从上面的代码结果可知：x，y指向的是同一个列表\",\"——如何解决？copy()\"]},\"150\":{\"h\":\"16.2 copy()\",\"t\":[\"x = ['香蕉', '苹果', '葡萄'] y = x.copy() print(f'原本的x：\\\\n\\\\t{x}\\\\n\\\\t{y}\\\\n\\\\t{id(y)}') #id 用来获取变量的物理地址 y[0] = '鸭梨' print(f'修改后的x：\\\\n\\\\t{x}\\\\n\\\\t{y}\\\\n\\\\t{id(x)}') #output 原本的x： ['香蕉', '苹果', '葡萄'] ['香蕉', '苹果', '葡萄'] 4335526720 修改后的x： ['香蕉', '苹果', '葡萄'] ['鸭梨', '苹果', '葡萄'] 4337283712 \"]},\"151\":{\"h\":\"16.3 copy所存在的问题「浅拷贝」\",\"t\":[\"x = ['香蕉', '苹果', '葡萄',[1, 2, 3]] y = x.copy() print(f'原本的x：\\\\n\\\\t{x}\\\\n\\\\ty: {y}\\\\n\\\\tid_x: {id(x)}\\\\tid_children: {id(x[3])}') #id 用来获取变量的物理地址 y[0] = '鸭梨' print(f'修改y以后：\\\\n\\\\t{x}\\\\n\\\\ty: {y}\\\\n\\\\tid_x: {id(x)}\\\\tid_children: {id(x[3])}') y[3][0] = '苹果' print(f'修改y的子列表以后：\\\\n\\\\t{x}\\\\n\\\\ty: {y}\\\\n\\\\tid_x: {id(x)}\\\\tid_children: {id(x[3])}') #output 原本的x： ['香蕉', '苹果', '葡萄', [1, 2, 3]] y: ['香蕉', '苹果', '葡萄', [1, 2, 3]] id_x: 4310037312 id_children: 4309050176 修改y以后： ['香蕉', '苹果', '葡萄', [1, 2, 3]] y: ['鸭梨', '苹果', '葡萄', [1, 2, 3]] id_x: 4310037312 id_children: 4309050176 修改y的子列表以后： ['香蕉', '苹果', '葡萄', ['苹果', 2, 3]] y: ['鸭梨', '苹果', '葡萄', ['苹果', 2, 3]] id_x: 4310037312 id_children: 4309050176 \",\"原因一：从上面代码可知，子列表的id都是相同的，代表x和y的子列表是同一个列表\",\"原因二：可视化\",\"image-20231230235556480\",\"所以，copy实现的是浅拷贝，只拷贝列表的第一层，嵌套的列表不会被拷贝。\"]},\"152\":{\"h\":\"16.4 deepcopy()深拷贝\",\"t\":[\"使用深拷贝需要导入库：\",\"from copy import deepcopy \",\"具体实现：\",\"x = ['香蕉', '苹果', '葡萄',[1, 2, 3]] y = deepcopy(x) print(f'原本的x：\\\\n\\\\t{x}\\\\n\\\\ty: {y}\\\\n\\\\tid_x: {id(x)}\\\\tid_children: {id(x[3])}') #id 用来获取变量的物理地址 y[0] = '鸭梨' print(f'修改y以后：\\\\n\\\\t{x}\\\\n\\\\ty: {y}\\\\n\\\\tid_x: {id(x)}\\\\tid_children: {id(x[3])}') y[3][0] = '苹果' print(f'修改y的子列表以后：\\\\n\\\\t{x}\\\\n\\\\ty: {y}\\\\n\\\\tid_x: {id(x)}\\\\tid_children: {id(y[3])}') #--output-- 原本的x： ['香蕉', '苹果', '葡萄', [1, 2, 3]] y: ['香蕉', '苹果', '葡萄', [1, 2, 3]] id_x: 4371819008 id_children: 4371822272 修改y以后： ['香蕉', '苹果', '葡萄', [1, 2, 3]] y: ['鸭梨', '苹果', '葡萄', [1, 2, 3]] id_x: 4371819008 id_children: 4371822272 修改y的子列表以后： ['香蕉', '苹果', '葡萄', [1, 2, 3]] y: ['鸭梨', '苹果', '葡萄', ['苹果', 2, 3]] id_x: 4371819008 id_children: 4371843072 \",\"子列表id不一样了，所以不会被修改了；\",\"可视化\",\"image-20231231000556404\"]},\"153\":{\"h\":\"16.5 一个特例\",\"t\":[\"我们上面说了列表的深浅拷贝，但是浅拷贝的时候，虽然子列表没有完全 copy 出来，但是有一种情况下是不会互相影响。\",\"思考一下🤔：也就是说，在浅拷贝的代码中，什么情况下修改子列表不会互相影响。\",\"浅拷贝代码\",\"x = ['毒药', '感冒药', '解药', ['香蕉', '瓜子', '八宝粥']] y = x.copy() print(f'Original:\\\\n\\\\tx: {x}\\\\n\\\\ty: {y}\\\\n\\\\tid:\\\\n\\\\t\\\\tid_x: {id(x)}\\\\n\\\\t\\\\tid_y: {id(y)}\\\\n\\\\t\\\\tid_children x[3]: {id(x[3])}\\\\n\\\\t\\\\tid_children y[3]: {id(y[3])}') # id 用来获取变量的物理地址 y[0] = '消炎药' print(f'After 1:\\\\n\\\\tx: {x}\\\\n\\\\ty: {y}\\\\n\\\\tid:\\\\n\\\\t\\\\tid_x: {id(x)}\\\\n\\\\t\\\\tid_y: {id(y)}\\\\n\\\\t\\\\tid_children x[3]: {id(x[3])}\\\\n\\\\t\\\\tid_children y[3]: {id(y[3])}') y[3] = '苹果' print(f'After 2:\\\\n\\\\tx: {x}\\\\n\\\\ty: {y}\\\\n\\\\tid:\\\\n\\\\t\\\\tid_x: {id(x)}\\\\n\\\\t\\\\tid_y: {id(y)}\\\\n\\\\t\\\\tid_children x[3]: {id(x[3])}\\\\n\\\\t\\\\tid_children y[3]: {id(y[3])}') #---output--- Original: x: ['毒药', '感冒药', '解药', ['香蕉', '瓜子', '八宝粥']] y: ['毒药', '感冒药', '解药', ['香蕉', '瓜子', '八宝粥']] id: id_x: 4346606016 id_y: 4346571136 id_children x[3]: 4345603008 id_children y[3]: 4345603008 After 1: x: ['毒药', '感冒药', '解药', ['香蕉', '瓜子', '八宝粥']] y: ['消炎药', '感冒药', '解药', ['香蕉', '瓜子', '八宝粥']] id: id_x: 4346606016 id_y: 4346571136 id_children x[3]: 4345603008 id_children y[3]: 4345603008 After 2: x: ['毒药', '感冒药', '解药', ['香蕉', '瓜子', '八宝粥']] y: ['消炎药', '感冒药', '解药', '苹果'] id: id_x: 4346606016 id_y: 4346571136 id_children x[3]: 4345603008 id_children y[3]: 4346455088 \",\"直接修改y的三号位\"]},\"154\":{\"c\":[\"python notebook\"]},\"155\":{\"c\":[\"notes\",\"python\"]},\"156\":{\"h\":\"06 Python tuple\"},\"157\":{\"h\":\"1.创建元组\",\"t\":[\"使用小括号创建\",\"里面的元素用英文逗号隔开\",\"tup = ('毒药', '解药', '感冒药') print(tup, type(tup)) #output ('毒药', '解药', '感冒药') <class 'tuple'> \"]},\"158\":{\"h\":\"2. 列表和元组的对比\",\"t\":[\"image-20240102084728982\",\"列表中：元素用方括号包裹[]；在元组中，元素用圆括号包裹 ()\",\"列表中的元素可以被修改，添加，删除，即列表是可变的数据类型，元组是不可变的数据类型。\"]},\"159\":{\"h\":\"3. 元素是不可变的\",\"t\":[\"但凡想要修改元组，是会报错：\",\"tup = ('毒药', '解药', '感冒药') tup[0] = '苹果' #output Traceback (most recent call last): File \\\"/Users/wangruoyihan/PycharmProjects/pythonProject/python homework.py\\\", line 101, in <module> tup[0] = '苹果' ~~~^^^ TypeError: 'tuple' object does not support item assignment \"]},\"160\":{\"h\":\"4. 元组的取值和分片操作\",\"t\":[\"tup = (2, 'lilei', 19) print(tup[1]) print(tup[::2]) print(tup[-2::-1]) ## print(tup[-2:-4:-1]) #('lilei', 2) \"]},\"161\":{\"h\":\"5. 元组的特点\",\"t\":[\"思考一下：如果元组只有一个元素，是什么类型？\",\"tup = (2) print(type(tup)) #output <class 'int'> \",\"代码运行后，我们可知：如果元组只有一个元素，那么元素本身的类型。\",\"为什么会是这个结果呢？\",\"我们常规在数学计算中括号是在运算的时候用来保证优先级和在适当的情况下，可以直接去掉。\",\"(1 + 2) * (2 + 1) = (3) * (3) = 3 * 3 = 9 所以，你可以发现 (3) * (3) = 3 * 3 左边的 (3) 不就是上面所说的“元组只有一个元素的情况”。也就类似于数学表达式中括号可以直接省去。\",\"如何解决呢？\",\"tup = (2,) print(type(tup)) #output <class 'tuple'> \"]},\"162\":{\"h\":\"6. 元组的拼接\",\"t\":[\"直接用加法拼接\",\"tup1 = (1, 2, 3) tup2 = (2, 3, 4) new_tup = tup1 +tup2 print(new_tup) #output (1, 2, 3, 2, 3, 4) \"]},\"163\":{\"h\":\"7. 小试牛🔪\",\"t\":[\"对下列元素排序：\",\"tup = (9, 7, 5, 3, 1, 2, 4, 6, 8, 0) \",\"思路：\",\"因为元组不可变，所以先把元组转换成列表；\",\"然后进行排序\",\"接着进行转换回元组；\",\"tup = (9, 7, 5, 3, 1, 2, 4, 6, 8, 0) new_list = list(tup) new_list.sort() new_tup = tuple(new_list) print(new_tup) #output (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) \"]},\"164\":{\"h\":\"7.2 使用sorted()\",\"t\":[\"实际上sorted实现的也就是上面的流程\",\"tup = (9, 7, 5, 3, 1, 2, 4, 6, 8, 0) lst = sorted(tup) print(lst) tup = tuple(lst) print(tup) #---output--- [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) \"]},\"165\":{\"h\":\"8. Zip()\",\"t\":[\"zip() 是一个内置函数，用于将多个可迭代对象（如列表、元组或字符串）的相应元素配对并返回一个元组的迭代器。如果你有两个或更多的列表，并且想要根据它们的相应元素创建一个新的迭代器，那么 zip() 函数就非常有用。\",\"假设有两个列表\",\"lst1 = [1, 2, 3] lst2 = ['a','b','c'] \",\"可以使用zip()来配对这些列表的元素：\",\"zipped = zip(lst1, lst2) \",\"zipped现在是一个包含元组的迭代器，每个元组都是由两个列表的相应元素组成。例如：\",\"list1 = [1, 2, 3] list2 = ['a', 'b', 'c'] zipped = zip(list1, list2) print(zipped) # 是一个 zip 对象、迭代器地址 print(list(zipped)) # 转换成列表查看，也可以转换成元组 # print(*zipped) # * 号用来解包 # 当然也可以用循环，但是目前不涉及。 # 上面的代码中，你用了列表，后面就用不了 *，因为数据已经被提取走了。 # ---output--- <zip object at 0x10343e280> [(1, 'a'), (2, 'b'), (3, 'c')] \",\"可以使用循环来遍历这个迭代器：\",\"for num, letter in zipped: print(f\\\"Number:{num}, Letter: {letter}\\\") #---output---: Number:1, Letter: a Number:2, Letter: b Number:3, Letter: c \",\"元组同理：\",\"tup1 = (1, 2, 3) tup2 = ('a', 'b', 'c') zipped = zip(tup1, tup2) print(zipped) # 是一个迭代器地址 print(list(zipped)) # 转换成列表查看，也可以转换成元组 # print(*zipped) # * 号用来解包 # ---output--- <zip object at 0x104f0d400> [(1, 'a'), (2, 'b'), (3, 'c')] \"]},\"166\":{\"c\":[\"python notebook\"]},\"167\":{\"c\":[\"notes\",\"python\"]},\"168\":{\"h\":\"Python Exercises\"},\"169\":{\"h\":\"Question 01: Hello,You!\",\"t\":[\"Write a program that asks for the user's name, their age and prints a personalized welcome message for them.\",\"For example, an execution could look like this:\",\"Please enter your name: Aika Please enter your age: 29 Aika, 29, is taking CS-UY 1114. \",\"The format of your output need not look exactly the same as ours, but it must still ask the user for their name and age, and print them out as part of some sort of sentence.\"]},\"170\":{\"h\":\"Question 01 Hello, You!\",\"t\":[\"user_input_1 = input(\\\"Please input your name: \\\") user_input_2 = input(\\\"please enter your age: \\\") print(f\\\"{user_input_1}, {user_input_2}, is taking CS-UY 1114.\\\") #output Please input your name: Cindy please enter your age: 17 Cindy, 17, is taking CS-UY 1114. \"]},\"171\":{\"h\":\"Question 02: Some Have Gone and Some Remain\",\"t\":[\"The U.S. Census provides information on its web page Census.gov about the current U.S. population as well as approximate rates of change. Four rates of change are provided:\",\"There is a birth every 7 seconds.\",\"There is a death every 15 seconds.\",\"There is a new immigrant every 42 seconds.\",\"There is a new emigration (i.e. somebody moves out of the country) every 1.25 minutes.\",\"These are, naturally, approximations of birth, death, and immigration rates, but they can assist in providing population estimates in the near term.\",\"Write a program that takes a year as input (an integer—you may assume that this will value will always be greater than or equal to 2023) and prints out an estimated population (as an integer). Assume that the current population is 330,109,174, and assume that there are always exactly 365 days in a year.\",\"Sample execution:\",\"Please enter a year greater than 2023: 2042 The population in year 2042 will be 382038453 \",\"The format of your output need not look exactly the same as ours, but it must still ask the user to enter an integer representing a year, and it must always output the estimated population of that year.\"]},\"172\":{\"h\":\"Question 02 Some Have Gone and Some Remain\",\"t\":[\"# Question02 user_message = input(\\\"Please enter a year greater than 2023: \\\") number_of_seconds = (int(user_message) - 2023) * 365 * 24 * 3600 new_birth = number_of_seconds // 7 death = -number_of_seconds // 15 new_immigrant = number_of_seconds // 42 emigration = -number_of_seconds // ( 1.25 * 60 ) new_population = int(330109174 + new_birth + death + new_immigrant + emigration) print(f\\\"The population in year {user_message} will be {new_population}\\\") #output Please enter a year greater than 2023: 2042 The population in year 2042 will be 382038453 \"]},\"173\":{\"h\":\"Question 03: Penny Pinching\",\"t\":[\"Write a program that asks the user to enter a number of quarters, dimes, nickels and pennies and then outputs the monetary value of the coins in the format of dollars and remaining cents.\",\"Your program should interact with the user, and output its results, exactly as it is shown in the following example:\",\"Please enter number of coins: Number of quarters: 13 Number of dimes: 4 Number of nickels: 11 Number of pennies: 17 The total is 4 dollar(s) and 37 cent(s) \"]},\"174\":{\"h\":\"Question 03 Penny Pinching\",\"t\":[\"print(\\\"PLease enter the number of coins: \\\") message_1 = input(\\\"Number of quarters: \\\") message_2 = input(\\\"Number of dimes: \\\") message_3 = input(\\\"Number of nickels: \\\") message_4 = input(\\\"Number of pennies: \\\") total_cents = int(message_1) * 25 + int(message_2) * 10 + int(message_3) * 5 + int(message_4) dollars = total_cents // 100 remained_cents = total_cents - 100 * dollars print(f\\\"The total is {dollars} dollar(s) and {remained_cents} cent(s)\\\") #output PLease enter the number of coins: Number of quarters: 10 Number of dimes: 2 Number of nickels: 6 Number of pennies: 2 The total is 3 dollar(s) and 2 cent(s) \"]},\"175\":{\"h\":\"Question 04: Mad as a Hatter, Thin as a Dime\",\"t\":[\"Write a program that asks the user to enter an amount of money in the format of dollars and remaining cents. The program should calculate and print the minimum number of coins (quarters, dimes, nickels and pennies) that are equivalent to the amount input by the user.\",\"Your program should interact with the user, and display its results, exactly as it shows in the following example:\",\"Please enter your amount of dollars and cents, in two separate lines. 4 37 4 dollars and 37 cents are: 17 quarters, 1 dimes, 0 nickels and 2 pennies \",\"Hint: In order to find the minimum number of coins, first find the maximum number of quarters that fit within the amount of money input by the user, then find the maximum number of dimes that fit in the remaining amount, and so on.\"]},\"176\":{\"h\":\"Question 04 Mad as a Hatter, Thin as a Dime\",\"t\":[\"print(\\\"Please enter total amount of dollars and cents, in two separate lines\\\") dollars = input(\\\"\\\") cents = input(\\\"\\\") total_cents = (100 * int(dollars) + int(cents)) quarters = total_cents // 25 dimes = (total_cents - 25 * quarters) // 10 nickle = (total_cents - 25 * quarters - 10 * dimes) // 5 pennies = total_cents % 5 print(f\\\"{dollars} dollars and {cents} cents are : {quarters} quarters, {dimes} dimes, {nickle} nickles and {pennies} pennies. \\\") #output Please enter tour amount of dollars nad cents, in teo separate lines 4 37 4 dollars and 37 cents are : 17 quarters, 1 dimes, 0 nickles and 2 pennies. \"]},\"177\":{\"h\":\"Question 05: BMI Calculator\",\"t\":[\"Body mass index (BMI) is a number calculated from a person’s weight and height. The BMI is a convenient rule of thumb used to broadly categorize the weight of a person based on tissue mass (muscle, body fat, and bone) and height (although it's really rather unreliable otherwise). The formula for BMI is the following:\",\"BMI calculation formula\",\"BMI = weight / height - squared\"]},\"178\":{\"h\":\"PART A:\",\"t\":[\"Write a program that prompts for metric weight and height and outputs the BMI. For example, an execution could look like this:\",\"Please enter weight in kilograms: 50 Please enter height in meters: 1.58 BMI is: 20.0288415 \"]},\"179\":{\"h\":\"Question 05 BMI Calculator\"},\"180\":{\"h\":\"Part A\",\"t\":[\"user_message_1 = input(\\\"Please enter weight in kilograms: \\\") user_message_2 = input(\\\"Please enter height in meters: \\\") BMI = float(user_message_1) / float(user_message_2)**2 print(f\\\"BMI is : {BMI:.3f}\\\") #output Please enter weight in kilograms: 51 Please enter height in meters: 1.70 BMI is : 17.647 \"]},\"181\":{\"h\":\"PART B:\",\"t\":[\"Write a program that prompts for weight in pounds and height in inches, converts the values to metric, and then calculates the BMI.\",\"Note: 1 pound is equal to 0.453592 kilograms and 1 inch is equal to 0.0254 meters.\",\"For example, an execution could look like this:\",\"Please enter weight in pounds: 135 Please enter height in inches: 71 BMI is: 18.82849431 \",\"Both part A and part B must be written in two separate py files.\"]},\"182\":{\"h\":\"Part B\",\"t\":[\"user_message_1 = input(\\\"Please enter weight in pounds: \\\") user_message_2 = input(\\\"Please enter height in inches: \\\") BMI = ( 0.453592 * float(user_message_1)) / (0.0254 * float(user_message_2)) ** 2 print(f\\\"BMI is {BMI:.3f}\\\") #output Please enter weight in pounds: 135 Please enter height in inches: 71 BMI is 18.828 \"]},\"183\":{\"h\":\"Question 06: Don't Believe The Gacha\",\"t\":[\"In certain video games, you can spend either in-game currency or real money to get a series of often-random items to \\\"improve\\\" your gameplay experience. These mechanics are commonly referred to as gacha, or loot boxes, and are some of the most controversial topics in video game development.\",\"Let's pretend that the chances of getting a rare item in a video game are from 0% to 100%, and our video game has a player start at level 1 and end at level 5 . At level 1 , the player has an 100% chance of getting a rare item. At level 2 the player has an 80% chance of getting a rare item. At level 3 , 60%. At level 4 , 40%, and at level 5 , only 20%.\",\"Write a program that asks the user for their current level in the video game, determines whether they have received a rare item in a loot box, and lets them know in a message.\",\"What is your level? 1 Your loot box contains a rare item: True What is your level? 2 Your loot box contains a rare item: False What is your level? 3 Your loot box contains a rare item: True What is your level? 4 Your loot box contains a rare item: False What is your level? 5 Your loot box contains a rare item: False \",\"Note: random\",\"random_num = random(1, 100) \",\"import random random_num = random.randint(1, 100) user_message =int(input(\\\"What is your level? \\\")) possibility = (5 - user_message + 1) * 20 camparison = random_num <= possibility user_message_1 = print(f\\\"Your loot box contains a rare item: {camparison}\\\") #output What is your level? 2 Your loot box contains a rare item: False \",\"import random def gacha_result(level): # 根据等级计算获得稀有物品的概率（每升一级，减少20%概率） chance = 120 - 20 * level # 随机生成一个1到100的数字，如果这个数字小于或等于计算出的概率，则返回True（表示获得稀有物品） return random.randint(1, 100) <= chance # 获取用户输入的等级 user_level = int(input(\\\"What is your level? \\\")) # 调用函数判断是否获得稀有物品 got_rare_item = gacha_result(user_level) # 输出结果 print(f\\\"Your loot box contains a rare item: {got_rare_item}\\\") \"]},\"184\":{\"h\":\"Question 07: Collective Timetables\",\"t\":[\"Suppose Semi and Ollie worked for some time, and we want to calculate the total time both of them worked.\",\"Write a program that reads a number of days, hours, and minutes minutes each of them worked,and prints the total time both of them worked together as days, hours, and minutes.\",\"For example, an execution could look like this:\",\"Please enter the number of days Semi has worked: 2 Please enter the number of hours Semi has worked: 12 Please enter the number of minutes Semi has worked: 15 Please enter the number of days Ollie has worked: 3 Please enter the number of hours Ollie has worked: 15 Please enter the number of minutes Ollie has worked: 20 The total time both of them worked together is: 6 days, 3 hours and 35 minutes. \",\"Note: There are 24 hours in a day and 60 minutes in an hour.\"]},\"185\":{\"h\":\"Question 07 Collective Timetables\",\"t\":[\"a1 = int(input(\\\"Please enter the number of days Semi has worked: \\\")) a2 = int(input(\\\"Please enter the number of hours Semi has worked: \\\")) a3 = int(input(\\\"Please enter the number of minutes Semi has worked: \\\")) a4 = int(input(\\\"Please enter the number of days Ollie has worked: \\\")) a5 = int(input(\\\"Please enter the number of hours Ollie has worked: \\\")) a6 = int(input(\\\"Please enter the number of minutes Ollie has worked: \\\")) total_minutes = (a6 +a3) % 60 total_hours = (a2 + a5 + (a6 + a3) // 60) % 24 total_days = a1 +a4 + (a2 + a5 + (a6 + a3) // 60) //24 print(f\\\"The total time both of them worked together is: {total_days} days, {total_hours} hours, {total_minutes} minutes.\\\") #output Please enter the number of days Semi has worked: 2 Please enter the number of hours Semi has worked: 12 Please enter the number of minutes Semi has worked: 15 Please enter the number of days Ollie has worked: 3 Please enter the number of hours Ollie has worked: 15 Please enter the number of minutes Ollie has worked: 20 The total time both of them worked together is: 6 days, 3 hours, 35 minutes. \"]},\"186\":{\"c\":[\"python practice\"]},\"187\":{\"c\":[\"practice\",\"python\",\"variables\"]},\"188\":{\"h\":\"Article editing\"},\"189\":{\"h\":\"1.标题编写\"},\"190\":{\"h\":\"标题2\"},\"191\":{\"h\":\"标题3\",\"t\":[\"……\"]},\"192\":{\"h\":\"标题6\"},\"193\":{\"h\":\"2.图片插入\"},\"194\":{\"c\":[\"article editing\"]},\"195\":{\"c\":[\"reminder\",\"tips\"]}},\"dirtCount\":0,\"index\":[[\"图片插入\",{\"0\":{\"193\":1}}],[\"标题6\",{\"0\":{\"192\":1}}],[\"标题3\",{\"0\":{\"191\":1}}],[\"标题2\",{\"0\":{\"190\":1}}],[\"标题编写\",{\"0\":{\"189\":1}}],[\"调用函数判断是否获得稀有物品\",{\"1\":{\"183\":1}}],[\"随机生成一个1到100的数字\",{\"1\":{\"183\":1}}],[\"概率\",{\"1\":{\"183\":1}}],[\"概念题\",{\"0\":{\"5\":1}}],[\"根据等级计算获得稀有物品的概率\",{\"1\":{\"183\":1}}],[\"上面的代码中\",{\"1\":{\"165\":1}}],[\"号用来解包\",{\"1\":{\"165\":2}}],[\"转换成列表查看\",{\"1\":{\"165\":2}}],[\"转义字符\",{\"1\":{\"111\":1}}],[\"迭代器地址\",{\"1\":{\"165\":1}}],[\"接着进行转换回元组\",{\"1\":{\"163\":1}}],[\"接着给老师\",{\"1\":{\"20\":1}}],[\"思路\",{\"1\":{\"163\":1}}],[\"思考一下\",{\"1\":{\"161\":1}}],[\"思考一下🤔\",{\"1\":{\"153\":1}}],[\"左边的\",{\"1\":{\"161\":1}}],[\"即列表是可变的数据类型\",{\"1\":{\"158\":1}}],[\"消炎药\",{\"1\":{\"153\":3}}],[\"八宝粥\",{\"1\":{\"153\":6}}],[\"瓜子\",{\"1\":{\"153\":6}}],[\"什么情况下修改子列表不会互相影响\",{\"1\":{\"153\":1}}],[\"什么是变量\",{\"0\":{\"19\":1}}],[\"什么是\",{\"1\":{\"5\":1}}],[\"出来\",{\"1\":{\"153\":1}}],[\"出现重复的不会报错\",{\"1\":{\"53\":1}}],[\"具体实现\",{\"1\":{\"152\":1}}],[\"深拷贝\",{\"0\":{\"152\":1}}],[\"深者见深\",{\"1\":{\"72\":6}}],[\"嵌套的列表不会被拷贝\",{\"1\":{\"151\":1}}],[\"子列表id不一样了\",{\"1\":{\"152\":1}}],[\"子列表的id都是相同的\",{\"1\":{\"151\":1}}],[\"子字符\",{\"1\":{\"41\":1}}],[\"浅拷贝代码\",{\"1\":{\"153\":1}}],[\"浅拷贝\",{\"0\":{\"151\":1}}],[\"浅者见浅\",{\"1\":{\"72\":6}}],[\"鸭梨\",{\"1\":{\"149\":3,\"150\":2,\"151\":3,\"152\":3}}],[\"葡萄\",{\"1\":{\"149\":6,\"150\":5,\"151\":7,\"152\":7}}],[\"苹果\",{\"1\":{\"149\":6,\"150\":5,\"151\":10,\"152\":9,\"153\":2,\"159\":2}}],[\"香蕉\",{\"1\":{\"149\":4,\"150\":4,\"151\":5,\"152\":5,\"153\":6}}],[\"感冒药\",{\"1\":{\"147\":2,\"153\":7,\"157\":2,\"159\":1}}],[\"解药\",{\"1\":{\"147\":2,\"153\":7,\"157\":2,\"159\":1}}],[\"解决方法\",{\"1\":{\"115\":1}}],[\"毒药\",{\"1\":{\"147\":2,\"153\":5,\"157\":2,\"159\":1}}],[\"两个列表相加\",{\"0\":{\"140\":1}}],[\"两个整数\",{\"1\":{\"60\":1}}],[\"元素是不可变的\",{\"0\":{\"159\":1}}],[\"元素用圆括号包裹\",{\"1\":{\"158\":1}}],[\"元素用方括号包裹\",{\"1\":{\"158\":1}}],[\"元素\",{\"1\":{\"139\":1,\"143\":1}}],[\"元组同理\",{\"1\":{\"165\":1}}],[\"元组或字符串\",{\"1\":{\"165\":1}}],[\"元组只有一个元素的情况\",{\"1\":{\"161\":1}}],[\"元组的拼接\",{\"0\":{\"162\":1}}],[\"元组的特点\",{\"0\":{\"161\":1}}],[\"元组的取值和分片操作\",{\"0\":{\"160\":1}}],[\"元组的功能刚刚好够用\",{\"1\":{\"47\":1}}],[\"元组是不可变的数据类型\",{\"1\":{\"158\":1}}],[\"元组为什么不合适\",{\"1\":{\"47\":1}}],[\"元组被创建出来之后\",{\"1\":{\"46\":1}}],[\"元组里的每个元素算一个\",{\"1\":{\"46\":1}}],[\"元组\",{\"0\":{\"45\":1,\"47\":1},\"1\":{\"50\":1,\"53\":1,\"114\":1,\"132\":1}}],[\"向列表中添加元素\",{\"0\":{\"133\":1}}],[\"放进去的是\",{\"1\":{\"132\":1}}],[\"放入字符串\",{\"1\":{\"72\":1}}],[\"索引从\",{\"1\":{\"130\":1}}],[\"它的基本语法是\",{\"1\":{\"130\":2}}],[\"给定下面列表\",{\"1\":{\"129\":1}}],[\"步长\",{\"1\":{\"127\":1}}],[\"更细致的用法\",{\"1\":{\"127\":1}}],[\"结束位置\",{\"1\":{\"126\":1,\"127\":1}}],[\"结构力学\",{\"1\":{\"1\":1}}],[\"起始位置\",{\"1\":{\"126\":1,\"127\":1}}],[\"起的最早的是理想主义者\",{\"1\":{\"72\":5}}],[\"提取单个元素\",{\"0\":{\"125\":1}}],[\"提前做好模版后面有需要试可以直接使用\",{\"1\":{\"109\":1}}],[\"利用中括号表示列表\",{\"1\":{\"122\":1}}],[\"其中input会得到\",{\"1\":{\"115\":1}}],[\"先这样来\",{\"1\":{\"115\":1}}],[\"先实现功能\",{\"1\":{\"72\":6}}],[\"稍微分析一下\",{\"1\":{\"115\":1}}],[\"伴随的问题\",{\"1\":{\"115\":1}}],[\"适合\",{\"1\":{\"114\":1}}],[\"存在一些问题\",{\"1\":{\"114\":1}}],[\"得知\",{\"1\":{\"114\":1}}],[\"得到字符串类型\",{\"1\":{\"115\":1}}],[\"得到的数据类型都是字符串\",{\"1\":{\"114\":1}}],[\"得到\",{\"1\":{\"21\":1}}],[\"何况非程序员用户呢\",{\"1\":{\"114\":1}}],[\"程序需要我们输入\",{\"1\":{\"114\":1}}],[\"程序的逻辑\",{\"1\":{\"21\":1}}],[\"基本使用\",{\"0\":{\"114\":1}}],[\"读取用户输入\",{\"0\":{\"113\":1}}],[\"取消转义\",{\"1\":{\"111\":1}}],[\"取余的结果和\",{\"1\":{\"66\":1}}],[\"取余运算符\",{\"1\":{\"59\":1}}],[\"制表符\",{\"1\":{\"111\":1}}],[\"换行\",{\"1\":{\"111\":1}}],[\"换行显示而已\",{\"1\":{\"72\":1}}],[\"退格\",{\"1\":{\"111\":1}}],[\"反转列表中的元素\",{\"1\":{\"147\":1}}],[\"反转后的数字为\",{\"1\":{\"60\":1}}],[\"反斜杠符号\",{\"1\":{\"111\":1}}],[\"含义\",{\"1\":{\"111\":1}}],[\"柜员边问你边登记\",{\"1\":{\"109\":1}}],[\"格式化\",{\"0\":{\"108\":1}}],[\"保留小数位\",{\"1\":{\"107\":1,\"108\":1}}],[\"保留指定小数位\",{\"1\":{\"106\":1}}],[\"直接用加法拼接\",{\"1\":{\"162\":1}}],[\"直接修改y的三号位\",{\"1\":{\"153\":1}}],[\"直接修改列表本身\",{\"1\":{\"145\":1}}],[\"直接使用加号就可以\",{\"1\":{\"140\":1}}],[\"直接输入原有的类型并得到原有的类型\",{\"1\":{\"114\":1}}],[\"直接读取变量\",{\"1\":{\"107\":1}}],[\"直接检测数据类型\",{\"1\":{\"43\":2,\"46\":2,\"49\":2,\"52\":2}}],[\"直接检测数据类型并输出\",{\"1\":{\"38\":4,\"40\":2}}],[\"按照顺序填充\",{\"1\":{\"106\":1}}],[\"单个元素修改\",{\"1\":{\"132\":1}}],[\"单个位置传入\",{\"1\":{\"108\":1}}],[\"单个花括号\",{\"1\":{\"106\":1}}],[\"单双三引号混用\",{\"1\":{\"72\":1}}],[\"单双引号混用\",{\"1\":{\"72\":1}}],[\"除了使用replace还可以使用字符串拼接\",{\"1\":{\"110\":1}}],[\"除非强制转化为字符串\",{\"1\":{\"105\":1}}],[\"除法取整运算符\",{\"1\":{\"59\":1}}],[\"除法运算符\",{\"1\":{\"59\":1}}],[\"除法涉及精度问题\",{\"1\":{\"58\":1}}],[\"另一个问题是\",{\"1\":{\"105\":1}}],[\"虽然子列表没有完全\",{\"1\":{\"153\":1}}],[\"虽然实现了\",{\"1\":{\"105\":1}}],[\"虽然想说的话不是很多\",{\"1\":{\"1\":1}}],[\"由上面的代码可知\",{\"1\":{\"105\":1}}],[\"当然也可以用循环\",{\"1\":{\"165\":1}}],[\"当然\",{\"1\":{\"105\":1}}],[\"当我们放东西\",{\"1\":{\"20\":1}}],[\"当我们用\",{\"1\":{\"5\":1}}],[\"地面填写进去\",{\"1\":{\"105\":1}}],[\"让我们不同的人名\",{\"1\":{\"105\":1}}],[\"需要换一个人名或者地区\",{\"1\":{\"105\":1}}],[\"需要返回的是一个地点的经纬度\",{\"1\":{\"47\":1}}],[\"分割后的\",{\"1\":{\"102\":6,\"103\":6}}],[\"分别赋值为\",{\"1\":{\"12\":1}}],[\"改后的\",{\"1\":{\"101\":6}}],[\"去掉右边\",{\"1\":{\"100\":4}}],[\"去掉右边空白字符后\",{\"1\":{\"100\":2}}],[\"去掉左边\",{\"1\":{\"99\":4}}],[\"去掉左边空白字符后\",{\"1\":{\"99\":2}}],[\"去掉\",{\"1\":{\"98\":2}}],[\"去掉空白后的\",{\"1\":{\"98\":2}}],[\"去跟踪状态\",{\"1\":{\"47\":1}}],[\"否则返回false\",{\"1\":{\"97\":1}}],[\"否则一切会很乱\",{\"1\":{\"72\":6}}],[\"纯空格返回true\",{\"1\":{\"97\":1}}],[\"纯数字字母字符串\",{\"1\":{\"94\":1}}],[\"寻找目标字符或单词在特定字符串\",{\"1\":{\"91\":1}}],[\"寻找目标字符或单词在特定字符串中\",{\"1\":{\"90\":1}}],[\"则指定删除列表中的\",{\"1\":{\"139\":1}}],[\"则删除整个变量\",{\"1\":{\"137\":1}}],[\"则元素将被添加到列表的末尾\",{\"1\":{\"130\":1}}],[\"则需要新建一个字符串\",{\"1\":{\"110\":1}}],[\"则以参数进行分割\",{\"1\":{\"102\":1}}],[\"则去掉右边的指定字符\",{\"1\":{\"100\":1}}],[\"则去掉左边的指定字符\",{\"1\":{\"99\":1}}],[\"则去掉指定字符\",{\"1\":{\"98\":1}}],[\"则报错\",{\"1\":{\"91\":1}}],[\"则返回true\",{\"1\":{\"183\":1}}],[\"则返回false\",{\"1\":{\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1}}],[\"则返回\",{\"1\":{\"90\":1}}],[\"则会变成反方向\",{\"1\":{\"79\":1}}],[\"返回分割后的列表\",{\"1\":{\"102\":1,\"103\":1}}],[\"返回目标单词的第一个字符的下标\",{\"1\":{\"91\":1}}],[\"返回目标单词第一个字母的下标\",{\"1\":{\"90\":1}}],[\"返回字符串中字符长度或字符数\",{\"1\":{\"73\":1}}],[\"特定\",{\"1\":{\"89\":1}}],[\"检测目标\",{\"1\":{\"89\":1}}],[\"只拷贝列表的第一层\",{\"1\":{\"151\":1}}],[\"只是进行了列表地址的复制\",{\"1\":{\"149\":1}}],[\"只会去除连续的减号\",{\"1\":{\"98\":1}}],[\"只有首字母\",{\"1\":{\"85\":1}}],[\"只能实现看起来换行\",{\"1\":{\"72\":1}}],[\"只能重新再创建一个仓库\",{\"1\":{\"47\":1}}],[\"只能存放一个原子弹\",{\"1\":{\"47\":1}}],[\"将字符串的每个单词的首字母大写\",{\"1\":{\"86\":1}}],[\"将字符串的内容全部转成小写\",{\"1\":{\"84\":1}}],[\"将字符串首字母转换成大写\",{\"1\":{\"85\":1}}],[\"将字符串内容\",{\"1\":{\"83\":1}}],[\"全部转成大写\",{\"1\":{\"83\":1}}],[\"全国人民代表大会\",{\"1\":{\"21\":1}}],[\"unreliable\",{\"1\":{\"177\":1}}],[\"used\",{\"1\":{\"177\":1}}],[\"users\",{\"1\":{\"72\":2,\"91\":1,\"105\":1,\"110\":1,\"132\":1,\"137\":1,\"159\":1}}],[\"username\",{\"1\":{\"31\":1}}],[\"user\",{\"1\":{\"31\":1,\"114\":8,\"169\":2,\"170\":4,\"171\":1,\"172\":3,\"173\":2,\"175\":4,\"180\":4,\"182\":4,\"183\":6}}],[\"uy\",{\"1\":{\"169\":1,\"170\":2}}],[\"u\",{\"1\":{\"132\":1,\"171\":2}}],[\"upper\",{\"0\":{\"83\":1},\"1\":{\"83\":3}}],[\"重写开始结尾\",{\"1\":{\"81\":1}}],[\"仍然取不到\",{\"1\":{\"80\":1}}],[\"方向相互冲突\",{\"1\":{\"80\":1}}],[\"方便理解代码和后期维护\",{\"1\":{\"21\":1}}],[\"方便检查\",{\"1\":{\"5\":1}}],[\"无论什么间隔\",{\"1\":{\"86\":1}}],[\"无结果\",{\"1\":{\"80\":1}}],[\"无序性\",{\"1\":{\"50\":1,\"53\":1}}],[\"省略了\",{\"0\":{\"80\":1}}],[\"正负控制方向\",{\"1\":{\"79\":1}}],[\"控制的是字符的提取方向\",{\"1\":{\"79\":1}}],[\"控制输出的数量\",{\"1\":{\"6\":1}}],[\"到结尾\",{\"1\":{\"77\":1}}],[\"默认空格分割\",{\"1\":{\"102\":1}}],[\"默认去掉字符串右边的空白字符\",{\"1\":{\"100\":1}}],[\"默认去掉字符串左边的空白字符\",{\"1\":{\"99\":1}}],[\"默认去掉目标字符串的前后空白字符\",{\"1\":{\"98\":1}}],[\"默认正数为1\",{\"1\":{\"79\":1}}],[\"默认不需要写\",{\"1\":{\"77\":1}}],[\"默认的间隔符是什么\",{\"1\":{\"5\":1}}],[\"优化方法\",{\"1\":{\"77\":1}}],[\"优先级最高\",{\"1\":{\"58\":1}}],[\"要+1\",{\"1\":{\"76\":1,\"77\":2}}],[\"要求\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1}}],[\"语法\",{\"1\":{\"76\":1,\"77\":2}}],[\"获取列表中某个元素第一次出现的位置\",{\"0\":{\"143\":1}}],[\"获取列表中某个元素的重复次数\",{\"0\":{\"142\":1}}],[\"获取列表中连续且特定间隔的元素\",{\"0\":{\"127\":1}}],[\"获取列表中连续几个元素\",{\"0\":{\"126\":1}}],[\"获取列表长度\",{\"1\":{\"131\":1}}],[\"获取列表的某个元素\",{\"0\":{\"123\":1}}],[\"获取用户输入的等级\",{\"1\":{\"183\":1}}],[\"获取用户输入两个值\",{\"1\":{\"129\":1}}],[\"获取用户输入\",{\"1\":{\"114\":2,\"115\":2}}],[\"获取多个不连续字符\",{\"0\":{\"77\":1}}],[\"获取多个连续字符\",{\"0\":{\"76\":1}}],[\"获取字符串bor\",{\"1\":{\"76\":1,\"77\":2}}],[\"获取单个字符\",{\"0\":{\"75\":1}}],[\"获取关键词列表\",{\"1\":{\"31\":1}}],[\"多个修改的对象也可以是字符串\",{\"1\":{\"132\":1}}],[\"多个元素修改的情况下\",{\"1\":{\"132\":1}}],[\"多个元素修改情况下\",{\"1\":{\"132\":1}}],[\"多个元素修改\",{\"1\":{\"132\":1}}],[\"多个位置传入\",{\"1\":{\"108\":1}}],[\"多个花括号指定位置\",{\"1\":{\"106\":1}}],[\"多个花括号\",{\"1\":{\"106\":1}}],[\"多个变量同时赋不同的值\",{\"0\":{\"29\":1}}],[\"多个变量同时赋相同值\",{\"1\":{\"28\":1}}],[\"多个变量同时赋相同的值\",{\"0\":{\"28\":1}}],[\"多个变量赋予不同值和相同值\",{\"0\":{\"14\":1}}],[\"多少个空格都可以\",{\"1\":{\"97\":1}}],[\"多行注释\",{\"1\":{\"72\":1}}],[\"三个单引号或者三个双引号\",{\"1\":{\"72\":1}}],[\"三个单引号的效果和上面一样\",{\"1\":{\"72\":1}}],[\"三个引号可以分行\",{\"1\":{\"72\":1}}],[\"原因二\",{\"1\":{\"151\":1}}],[\"原因一\",{\"1\":{\"149\":1,\"151\":1}}],[\"原本的x\",{\"1\":{\"149\":2,\"150\":2,\"151\":2,\"152\":2}}],[\"原本的\",{\"1\":{\"101\":6}}],[\"原本的字符串\",{\"1\":{\"99\":6,\"100\":6,\"102\":6,\"103\":6,\"104\":2}}],[\"原本字符串\",{\"1\":{\"98\":4}}],[\"原本什么格式\",{\"1\":{\"72\":1}}],[\"原样输出\",{\"1\":{\"72\":1}}],[\"原子弹仓库的状态吗\",{\"1\":{\"47\":1}}],[\"实际上sorted实现的也就是上面的流程\",{\"1\":{\"164\":1}}],[\"实际上是同一个列表\",{\"1\":{\"149\":1}}],[\"实际上还是一行\",{\"1\":{\"72\":1}}],[\"实现原因\",{\"1\":{\"115\":1}}],[\"实现原样输出\",{\"1\":{\"72\":1}}],[\"实现\",{\"0\":{\"79\":1}}],[\"实现以上要求\",{\"1\":{\"60\":1}}],[\"常规的单引号\",{\"1\":{\"72\":1}}],[\"凡是你不能清晰写下来的东西\",{\"1\":{\"72\":5}}],[\"再去优化\",{\"1\":{\"72\":6}}],[\"疯狂往里冲的是韭菜\",{\"1\":{\"72\":6}}],[\"害怕错过一切\",{\"1\":{\"72\":6}}],[\"跑的最快的是骗子\",{\"1\":{\"72\":6}}],[\"黄家宝起的最早的是理想主义者\",{\"1\":{\"72\":1}}],[\"黄家宝\",{\"1\":{\"72\":5}}],[\"外面使用双引号进行包裹即可\",{\"1\":{\"72\":4}}],[\"会发现修改\",{\"1\":{\"149\":1}}],[\"会寻找到下一个第一次出现的单引号进行匹配\",{\"1\":{\"72\":1}}],[\"会自动去掉重复的\",{\"1\":{\"53\":1}}],[\"^^^^^^^\",{\"1\":{\"137\":1}}],[\"^^^^^^^^^^^^^^^^^\",{\"1\":{\"91\":1}}],[\"^\",{\"1\":{\"72\":2}}],[\"双引号是不支持多行文本\",{\"1\":{\"72\":1}}],[\"双引号和单引号在一起可以避免歧义\",{\"1\":{\"72\":1}}],[\"双引号或者三引号\",{\"1\":{\"72\":1}}],[\"创建元组\",{\"0\":{\"157\":1}}],[\"创建字符串\",{\"0\":{\"72\":1}}],[\"创建两个数字\",{\"1\":{\"64\":1,\"65\":1,\"66\":1}}],[\"小试牛🔪\",{\"0\":{\"129\":1,\"163\":1}}],[\"小试牛刀\",{\"0\":{\"60\":1}}],[\"小技巧\",{\"1\":{\"115\":1}}],[\"小于\",{\"1\":{\"67\":1}}],[\"大概率实现的是去掉字符串左右两边的引号\",{\"1\":{\"115\":1}}],[\"大概\",{\"1\":{\"115\":1}}],[\"大于\",{\"1\":{\"67\":1}}],[\"大小写\",{\"1\":{\"31\":1}}],[\"大小\",{\"1\":{\"19\":1}}],[\"quarters\",{\"1\":{\"173\":2,\"174\":2,\"175\":3,\"176\":6}}],[\"question02\",{\"1\":{\"172\":1}}],[\"question\",{\"0\":{\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"179\":1,\"183\":1,\"184\":1,\"185\":1}}],[\"q\",{\"1\":{\"67\":10,\"91\":2}}],[\"次幂\",{\"1\":{\"66\":1}}],[\"求余和幂运算\",{\"0\":{\"66\":1}}],[\"测试\",{\"1\":{\"64\":1,\"65\":1,\"66\":1}}],[\"减少20\",{\"1\":{\"183\":1}}],[\"减去\",{\"1\":{\"64\":1}}],[\"减法运算符\",{\"1\":{\"59\":1}}],[\"等于\",{\"1\":{\"67\":1}}],[\"等同于\",{\"1\":{\"63\":6}}],[\"等想到了再补上\",{\"1\":{\"1\":1}}],[\"把右侧的运算对象赋值给左侧的运算对象\",{\"1\":{\"63\":1}}],[\"看看会输出上面结果\",{\"1\":{\"62\":1}}],[\"看不见\",{\"1\":{\"5\":1}}],[\"试一试上面的例子\",{\"1\":{\"62\":1}}],[\"判断某个元素是否存在于列表里面\",{\"0\":{\"141\":1}}],[\"判断字符串是否为纯空格\",{\"1\":{\"97\":1}}],[\"判断字符串是否全部小写\",{\"1\":{\"96\":1}}],[\"判断字符串是否全部大写\",{\"1\":{\"95\":1}}],[\"判断字符串是不是纯数字或者纯字母\",{\"1\":{\"94\":1}}],[\"判断字符串是不是纯数字字符串\",{\"1\":{\"92\":1}}],[\"判断字符串是不是纯字母字符串\",{\"1\":{\"93\":1}}],[\"判断两个运算对象是否不相同\",{\"1\":{\"62\":1}}],[\"判断两个运算对象是否相同\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否小于或等于第二个运算对象\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否小于第二个运算对象\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否大于或等于第二个运算对象\",{\"1\":{\"62\":1}}],[\"判断第一个运算对象是否大于第二个运算对象\",{\"1\":{\"62\":1}}],[\"<zip\",{\"1\":{\"165\":2}}],[\"<string>\",{\"1\":{\"115\":1}}],[\"<module>\",{\"1\":{\"91\":1,\"105\":1,\"110\":1,\"132\":1,\"137\":1,\"159\":1}}],[\"<=\",{\"1\":{\"62\":2,\"183\":2}}],[\"<\",{\"1\":{\"62\":2,\"67\":2}}],[\"<class\",{\"1\":{\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"49\":2,\"52\":2,\"54\":1,\"157\":1,\"161\":2}}],[\"比较它们的大小并打印出相应的比较结果\",{\"1\":{\"67\":1}}],[\"比较运算\",{\"0\":{\"67\":1}}],[\"比较运算符\",{\"0\":{\"61\":1,\"62\":1}}],[\"比较值的大小\",{\"0\":{\"61\":1,\"62\":1}}],[\"比如\",{\"1\":{\"50\":1,\"53\":1}}],[\"比如你有一个系统\",{\"1\":{\"47\":1}}],[\"比如社交平台上的一个日志功能\",{\"1\":{\"47\":1}}],[\"为了在字符串中得到\",{\"1\":{\"111\":1}}],[\"为\",{\"1\":{\"60\":3}}],[\"为什么会是这个结果呢\",{\"1\":{\"161\":1}}],[\"为什么会产生这个呢\",{\"1\":{\"149\":1}}],[\"为什么会导致上面的报错呢\",{\"1\":{\"115\":1}}],[\"为什么python同时支持三种创建字符串的方法\",{\"1\":{\"72\":1}}],[\"为什么🧐有列表后\",{\"1\":{\"47\":1}}],[\"为什么要适当的加上空格\",{\"1\":{\"5\":1}}],[\"示例代码\",{\"1\":{\"111\":1}}],[\"示例\",{\"1\":{\"60\":1}}],[\"≤\",{\"1\":{\"60\":2}}],[\"输入时\",{\"1\":{\"115\":1}}],[\"输入两个数字\",{\"1\":{\"67\":1}}],[\"输入\",{\"1\":{\"60\":1}}],[\"输出结果\",{\"1\":{\"183\":1}}],[\"输出就是什么格式\",{\"1\":{\"72\":1}}],[\"输出示例\",{\"1\":{\"64\":1,\"65\":1,\"66\":1,\"67\":1}}],[\"输出\",{\"1\":{\"5\":2,\"60\":1,\"72\":5}}],[\"第一次出现的下标\",{\"1\":{\"90\":1,\"91\":1}}],[\"第一个新数字是原数字的两位数中的各个数字的和\",{\"1\":{\"60\":1}}],[\"第二个新数字是原数字的反转\",{\"1\":{\"60\":1}}],[\"计算并打印出\",{\"1\":{\"66\":1}}],[\"计算并打印出它们的乘积和除法结果\",{\"1\":{\"65\":1}}],[\"计算并打印出它们的和以及\",{\"1\":{\"64\":1}}],[\"计算商并去除其小数部分\",{\"1\":{\"59\":1}}],[\"计算余数\",{\"1\":{\"59\":1}}],[\"指定删除列表中某个元素\",{\"1\":{\"139\":1}}],[\"指定要插入元素的位置\",{\"1\":{\"130\":1}}],[\"指定分割次数\",{\"1\":{\"103\":1}}],[\"指数运算符\",{\"1\":{\"59\":1}}],[\"指的是python所拥有的数据类型\",{\"1\":{\"44\":1,\"46\":1}}],[\"乘法运算符\",{\"1\":{\"59\":1}}],[\"加法运算符\",{\"1\":{\"59\":1}}],[\"例子\",{\"1\":{\"59\":1,\"62\":1,\"63\":1,\"111\":1}}],[\"例如\",{\"1\":{\"7\":3,\"20\":1,\"139\":1,\"165\":1}}],[\"描述\",{\"1\":{\"59\":1,\"62\":1,\"63\":1,\"126\":1}}],[\"运算符\",{\"1\":{\"59\":1,\"62\":1,\"63\":1}}],[\"算术运算符\",{\"1\":{\"59\":1}}],[\"算数运算符\",{\"0\":{\"59\":1}}],[\"最后的结果就是浮点数\",{\"1\":{\"58\":1}}],[\"最后赋值\",{\"1\":{\"21\":1}}],[\"828\",{\"1\":{\"182\":1}}],[\"82849431\",{\"1\":{\"181\":1}}],[\"80\",{\"1\":{\"131\":1,\"183\":1}}],[\"888\",{\"1\":{\"108\":2}}],[\"81\",{\"1\":{\"66\":1}}],[\"8\",{\"0\":{\"54\":1,\"90\":1,\"111\":1,\"133\":1,\"134\":1,\"135\":1,\"165\":1},\"1\":{\"58\":2,\"59\":1,\"60\":1,\"64\":1,\"114\":2,\"115\":1,\"118\":1,\"126\":1,\"127\":1,\"132\":18,\"145\":3,\"163\":3,\"164\":3}}],[\"89分\",{\"1\":{\"20\":1}}],[\"互异性\",{\"1\":{\"53\":1}}],[\"举个例子🌰\",{\"1\":{\"53\":1}}],[\"点\",{\"1\":{\"53\":1}}],[\"没有先后顺序\",{\"1\":{\"98\":1}}],[\"没有完全包裹字符串全部内容\",{\"1\":{\"72\":1}}],[\"没有下标\",{\"1\":{\"53\":1}}],[\"没有明确的答案标准\",{\"1\":{\"5\":1}}],[\"集合的每一个值都是确定的\",{\"1\":{\"53\":1}}],[\"集合的特性\",{\"0\":{\"53\":1}}],[\"集合顺序没有改变\",{\"1\":{\"53\":1}}],[\"集合是没有顺序的\",{\"1\":{\"53\":1}}],[\"集合\",{\"0\":{\"51\":1},\"1\":{\"114\":1,\"132\":1}}],[\"71\",{\"1\":{\"181\":1,\"182\":1}}],[\"70\",{\"1\":{\"180\":1}}],[\"72\",{\"1\":{\"115\":1}}],[\"7\",{\"0\":{\"51\":1,\"52\":1,\"53\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"89\":1,\"110\":1,\"132\":1,\"163\":1,\"164\":1},\"1\":{\"58\":2,\"76\":1,\"114\":2,\"118\":1,\"126\":1,\"127\":2,\"132\":14,\"142\":1,\"163\":3,\"164\":3,\"171\":1,\"172\":1}}],[\"布尔形\",{\"1\":{\"114\":1}}],[\"布尔型\",{\"0\":{\"54\":1},\"1\":{\"132\":1}}],[\"布尔\",{\"1\":{\"50\":1,\"53\":1}}],[\"才可以当作字典的key\",{\"1\":{\"50\":1}}],[\"字典的组成\",{\"1\":{\"50\":1}}],[\"字典的特性\",{\"0\":{\"50\":1}}],[\"字典\",{\"0\":{\"48\":1},\"1\":{\"114\":1,\"132\":1}}],[\"字符出现的次数\",{\"1\":{\"89\":1}}],[\"字符放到字符串中\",{\"1\":{\"41\":1}}],[\"字符串强制转换成列表\",{\"1\":{\"122\":1}}],[\"字符串转义\",{\"0\":{\"111\":1}}],[\"字符串是不可变的\",{\"1\":{\"110\":1}}],[\"字符串是由字母\",{\"1\":{\"71\":1}}],[\"字符串格式化\",{\"0\":{\"105\":1}}],[\"字符串中但凡出现非数字字母元素\",{\"1\":{\"94\":1}}],[\"字符串中只要有一个字符是非小写\",{\"1\":{\"96\":1}}],[\"字符串中只要有一个字符是非大写\",{\"1\":{\"95\":1}}],[\"字符串中只要有一个字符是非字母字\",{\"1\":{\"93\":1}}],[\"字符串中只要有一个字符是非数字\",{\"1\":{\"92\":1}}],[\"字符串中字符的获取\",{\"0\":{\"74\":1}}],[\"字符串内置方法\",{\"0\":{\"82\":1}}],[\"字符串倒序\",{\"0\":{\"78\":1}}],[\"字符串长度\",{\"0\":{\"73\":1}}],[\"字符串的连接\",{\"0\":{\"112\":1}}],[\"字符串的不可变性\",{\"0\":{\"110\":1}}],[\"字符串的第三个位置\",{\"1\":{\"79\":1}}],[\"字符串的定义\",{\"0\":{\"71\":1}}],[\"字符串的三大特性\",{\"0\":{\"41\":1}}],[\"字符串被创建出来后\",{\"1\":{\"41\":1}}],[\"字符串\",{\"0\":{\"39\":1},\"1\":{\"50\":1,\"53\":1,\"108\":1,\"114\":1,\"132\":1}}],[\"合适就好\",{\"1\":{\"47\":1}}],[\"经纬度会改变吗\",{\"1\":{\"47\":1}}],[\"肯定是刚刚好可以存放一个\",{\"1\":{\"47\":1}}],[\"因为数据已经被提取走了\",{\"1\":{\"165\":1}}],[\"因为元组不可变\",{\"1\":{\"163\":1}}],[\"因为我们不需要仓库管理员\",{\"1\":{\"47\":1}}],[\"因为\",{\"1\":{\"47\":1,\"72\":1}}],[\"因为列表可变\",{\"1\":{\"47\":1}}],[\"因为仓库管理员会一直跟踪这个仓库的状态\",{\"1\":{\"47\":1}}],[\"内存\",{\"1\":{\"47\":1}}],[\"记录📝看了哪些帖子\",{\"1\":{\"47\":1}}],[\"领导没油水了～hhhhh\",{\"1\":{\"47\":1}}],[\"仓库创建之后\",{\"1\":{\"47\":1}}],[\"仓库管理员为什么知道仓库是否有位置\",{\"1\":{\"47\":1}}],[\"仓库管理员会告诉你\",{\"1\":{\"47\":1}}],[\"仓库很大\",{\"1\":{\"47\":1}}],[\"里面的元素用英文逗号隔开\",{\"1\":{\"157\":1}}],[\"里面的每一个元素都可以称为\",{\"1\":{\"41\":1}}],[\"里面还有哪个位置\",{\"1\":{\"47\":1}}],[\"现有的物品也很多\",{\"1\":{\"47\":1}}],[\"现在有一个原子弹的仓库\",{\"1\":{\"47\":1}}],[\"现在有一个仓库\",{\"1\":{\"47\":1}}],[\"现在改变\",{\"1\":{\"32\":2}}],[\"现在的我是剑桥大学工程专业的一名学生\",{\"1\":{\"1\":1}}],[\"假设有两个列表\",{\"1\":{\"165\":1}}],[\"假设我们现在需要存储如下文本\",{\"1\":{\"72\":1}}],[\"假设输入的数字\",{\"1\":{\"60\":3}}],[\"假设你有一个两位的整数\",{\"1\":{\"60\":1}}],[\"假设2\",{\"1\":{\"47\":1}}],[\"假设1\",{\"1\":{\"47\":1}}],[\"假设\",{\"1\":{\"47\":1}}],[\"假如你有两个小孩\",{\"1\":{\"30\":1}}],[\"假如\",{\"1\":{\"20\":1}}],[\"软件\",{\"1\":{\"47\":1}}],[\"还需要知道在哪里添加\",{\"1\":{\"47\":1}}],[\"还需要元组\",{\"1\":{\"47\":1}}],[\"还在努力摸索中\",{\"1\":{\"1\":1}}],[\"探究👀列表\",{\"0\":{\"47\":1}}],[\"探究print\",{\"0\":{\"22\":1}}],[\"有意加上单引号或双引号\",{\"1\":{\"115\":1}}],[\"有点小问题\",{\"1\":{\"114\":1}}],[\"有时候我们需要字符串里面有单引号或双引号\",{\"1\":{\"72\":1}}],[\"有两个元素\",{\"1\":{\"46\":1}}],[\"有序性\",{\"1\":{\"41\":1,\"44\":1,\"46\":1}}],[\"所存在的问题\",{\"0\":{\"149\":1},\"1\":{\"105\":1}}],[\"所拥有的数据类型\",{\"1\":{\"44\":1}}],[\"所以先把元组转换成列表\",{\"1\":{\"163\":1}}],[\"所以不会被修改了\",{\"1\":{\"152\":1}}],[\"所以不行🙅\",{\"1\":{\"53\":1}}],[\"所以没有结果\",{\"1\":{\"80\":1}}],[\"所以从开始到结尾\",{\"1\":{\"77\":1}}],[\"所以导致整个字符串异常\",{\"1\":{\"72\":1}}],[\"所以最后得到浮点数\",{\"1\":{\"58\":1}}],[\"所以\",{\"1\":{\"21\":1,\"72\":1,\"115\":1,\"151\":1,\"161\":1}}],[\"所以他们可以说\",{\"1\":{\"21\":1}}],[\"任意数据类型\",{\"1\":{\"44\":1,\"46\":1,\"50\":1}}],[\"任意字符\",{\"1\":{\"41\":1}}],[\"修改y的子列表以后\",{\"1\":{\"151\":2,\"152\":2}}],[\"修改y以后\",{\"1\":{\"151\":2,\"152\":2}}],[\"修改后的x\",{\"1\":{\"149\":2,\"150\":2}}],[\"修改列表中的元素\",{\"0\":{\"132\":1}}],[\"修改\",{\"1\":{\"44\":1,\"47\":1,\"50\":1}}],[\"可视化\",{\"1\":{\"151\":1,\"152\":1}}],[\"可能还没有入场\",{\"1\":{\"72\":6}}],[\"可以使用循环来遍历这个迭代器\",{\"1\":{\"165\":1}}],[\"可以使用zip\",{\"1\":{\"165\":1}}],[\"可以使用的对象\",{\"1\":{\"132\":1}}],[\"可以直接去掉\",{\"1\":{\"161\":1}}],[\"可以修改列表里面的内容\",{\"1\":{\"122\":1}}],[\"可以通过省略0来解决这个问题\",{\"1\":{\"80\":1}}],[\"可以从上面的输出可知\",{\"1\":{\"72\":1}}],[\"可以双引号中需要引号的部分使用单引号\",{\"1\":{\"72\":1}}],[\"可以对集合添加\",{\"1\":{\"53\":1}}],[\"可以对当行代码进行注释\",{\"1\":{\"5\":1}}],[\"可以添加\",{\"1\":{\"50\":1}}],[\"可以\",{\"1\":{\"47\":1}}],[\"可变意味着\",{\"1\":{\"47\":1}}],[\"可变性\",{\"1\":{\"44\":1,\"50\":1,\"53\":1}}],[\"列表中的元素可以被修改\",{\"1\":{\"158\":1}}],[\"列表中\",{\"1\":{\"158\":1}}],[\"列表和元组的对比\",{\"0\":{\"158\":1}}],[\"列表和元组到底用哪一个呢\",{\"1\":{\"47\":1}}],[\"列表排序\",{\"0\":{\"144\":1}}],[\"列表长度\",{\"0\":{\"131\":1}}],[\"列表下标的组成\",{\"0\":{\"124\":1}}],[\"列表的深浅拷贝\",{\"0\":{\"148\":1}}],[\"列表的切片赋值\",{\"0\":{\"128\":1}}],[\"列表的可变性\",{\"1\":{\"122\":1}}],[\"列表的三大特性\",{\"0\":{\"44\":1}}],[\"列表内元素用逗号隔开\",{\"1\":{\"122\":1}}],[\"列表结构\",{\"0\":{\"122\":1}}],[\"列表可变\",{\"1\":{\"53\":1}}],[\"列表可以\",{\"1\":{\"44\":1}}],[\"列表更合适\",{\"1\":{\"47\":1}}],[\"列表里的每个元素算一个\",{\"1\":{\"44\":1}}],[\"列表\",{\"0\":{\"42\":1},\"1\":{\"114\":1,\"132\":1,\"143\":1,\"149\":1}}],[\"也就类似于数学表达式中括号可以直接省去\",{\"1\":{\"161\":1}}],[\"也就是说\",{\"1\":{\"153\":1}}],[\"也就是在计算机中所在的位置\",{\"1\":{\"149\":1}}],[\"也就是需要不可变的数据类型\",{\"1\":{\"53\":1}}],[\"也就是\",{\"1\":{\"41\":1,\"53\":1}}],[\"也可以转换成元组\",{\"1\":{\"165\":2}}],[\"也可以传参数指定要删除的元素下标\",{\"1\":{\"138\":1}}],[\"也可以传入参数\",{\"1\":{\"103\":1}}],[\"也可以使用tuple\",{\"1\":{\"135\":1}}],[\"也可以不写\",{\"1\":{\"77\":1}}],[\"也可以是档案袋\",{\"1\":{\"20\":1}}],[\"也要去思考选择项以外的答案\",{\"1\":{\"72\":7}}],[\"也是下标\",{\"1\":{\"44\":2,\"46\":2}}],[\"都可以\",{\"1\":{\"111\":1}}],[\"都可以是字符串的元素\",{\"1\":{\"41\":1}}],[\"都像模版\",{\"1\":{\"109\":1}}],[\"都是你还没有真正理解的东西\",{\"1\":{\"72\":6}}],[\"都将成为字符串类型\",{\"1\":{\"41\":1}}],[\"键盘上可以输入的字符\",{\"1\":{\"41\":1}}],[\"删除列表中的元素\",{\"0\":{\"136\":1}}],[\"删除是无法制定下标删除的元素\",{\"1\":{\"53\":1}}],[\"删除数据\",{\"1\":{\"53\":1}}],[\"删除键对值\",{\"1\":{\"50\":1}}],[\"删除\",{\"1\":{\"44\":1,\"47\":1,\"158\":1}}],[\"删除之类的操作\",{\"1\":{\"41\":1,\"46\":1}}],[\"删除变量\",{\"1\":{\"32\":1}}],[\"添加多个元素\",{\"0\":{\"135\":1}}],[\"添加单个元素\",{\"0\":{\"134\":1}}],[\"添加之后的\",{\"1\":{\"104\":2}}],[\"添加进去\",{\"1\":{\"47\":1}}],[\"添加\",{\"1\":{\"41\":1,\"44\":1,\"46\":1,\"47\":1,\"158\":1}}],[\"注意是英文输入法下的逗号\",{\"1\":{\"122\":1}}],[\"注意\",{\"1\":{\"53\":1,\"79\":1,\"126\":1,\"127\":1}}],[\"注意⚠️\",{\"1\":{\"41\":1,\"44\":1,\"46\":2,\"53\":1}}],[\"注解\",{\"1\":{\"21\":1}}],[\"就像在银行当中\",{\"1\":{\"109\":1}}],[\"就需要重新创建一个全新的字符串\",{\"1\":{\"105\":1}}],[\"就不可以省略\",{\"1\":{\"77\":1}}],[\"就不能被改变\",{\"1\":{\"41\":1,\"46\":1}}],[\"就是\",{\"1\":{\"72\":1}}],[\"就是这个空间\",{\"1\":{\"21\":1}}],[\"就类似于string变量\",{\"1\":{\"115\":1}}],[\"就类似于\",{\"1\":{\"47\":1}}],[\"就得重新创建一个新的元组\",{\"1\":{\"47\":1}}],[\"空格也算\",{\"1\":{\"41\":1}}],[\"空格对代码没有影响\",{\"1\":{\"5\":1}}],[\"空格对代码有影响吗\",{\"1\":{\"5\":1}}],[\"引号里面出现的都算一个下标\",{\"1\":{\"41\":1}}],[\"下面只包含了基础类型\",{\"1\":{\"44\":1}}],[\"下标是从\",{\"1\":{\"41\":1,\"44\":1,\"46\":1}}],[\"下标是从0开始\",{\"1\":{\"41\":1,\"44\":1,\"46\":1}}],[\"下列哪个\",{\"1\":{\"6\":1}}],[\"video\",{\"1\":{\"183\":5}}],[\"vividness\",{\"1\":{\"93\":1,\"111\":1,\"112\":2}}],[\"vervvividness\",{\"1\":{\"111\":1}}],[\"verve\",{\"1\":{\"93\":1,\"111\":7,\"112\":2}}],[\"verveviviness1234\",{\"1\":{\"94\":1}}],[\"verveviviness\",{\"1\":{\"93\":1,\"94\":1}}],[\"vervevividness\",{\"1\":{\"40\":2,\"43\":2,\"79\":1,\"80\":2,\"81\":1,\"98\":6,\"101\":9,\"104\":2,\"106\":11,\"107\":2,\"110\":1,\"111\":2,\"112\":1}}],[\"verevevividness\",{\"1\":{\"110\":1}}],[\"v\",{\"1\":{\"104\":4}}],[\"values\",{\"1\":{\"181\":1}}],[\"valueerror\",{\"1\":{\"91\":1}}],[\"value2\",{\"1\":{\"50\":1}}],[\"value1\",{\"1\":{\"50\":1}}],[\"value\",{\"0\":{\"141\":1},\"1\":{\"7\":2,\"50\":1,\"129\":2,\"171\":1,\"173\":1}}],[\"var\",{\"1\":{\"7\":7,\"32\":7}}],[\"varname9\",{\"1\":{\"6\":1}}],[\"variables\",{\"2\":{\"16\":1,\"187\":1}}],[\"variable\",{\"0\":{\"17\":1},\"1\":{\"6\":8,\"32\":4}}],[\"代码运行后\",{\"1\":{\"161\":1}}],[\"代码略\",{\"1\":{\"72\":1}}],[\"代码实现呢\",{\"1\":{\"72\":1}}],[\"代码模版\",{\"1\":{\"64\":1,\"65\":1,\"66\":1,\"67\":1}}],[\"代码\",{\"1\":{\"60\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1}}],[\"代码示例\",{\"0\":{\"40\":1,\"43\":1,\"46\":1,\"49\":1,\"52\":1}}],[\"代表x和y的子列表是同一个列表\",{\"1\":{\"151\":1}}],[\"代表\",{\"1\":{\"21\":1}}],[\"浮点数\",{\"1\":{\"108\":1,\"114\":1}}],[\"浮点数或布尔类型\",{\"1\":{\"7\":1}}],[\"浮点型\",{\"1\":{\"38\":1}}],[\">=\",{\"1\":{\"62\":2}}],[\">\",{\"1\":{\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"49\":2,\"52\":2,\"54\":1,\"62\":2,\"67\":2,\"115\":1,\"157\":1,\"161\":2}}],[\">>>9\",{\"1\":{\"115\":2}}],[\">>>2\",{\"1\":{\"115\":1}}],[\">>>1\",{\"1\":{\"115\":1}}],[\">>>12\",{\"1\":{\"114\":1,\"115\":1}}],[\">>>num\",{\"1\":{\"115\":1}}],[\">>>string\",{\"1\":{\"115\":2}}],[\">>>true\",{\"1\":{\"114\":1}}],[\">>>bornforthis\",{\"1\":{\"114\":1}}],[\">>>\",{\"1\":{\"38\":4,\"40\":2,\"43\":4,\"46\":4,\"49\":4,\"52\":4,\"114\":11,\"115\":20}}],[\"整形\",{\"1\":{\"38\":1}}],[\"整数\",{\"1\":{\"7\":1,\"108\":1,\"114\":1}}],[\"07\",{\"0\":{\"184\":1,\"185\":1}}],[\"0x104f0d400>\",{\"1\":{\"165\":1}}],[\"0x10343e280>\",{\"1\":{\"165\":1}}],[\"06\",{\"0\":{\"156\":1,\"183\":1}}],[\"05\",{\"0\":{\"118\":1,\"121\":1,\"177\":1,\"179\":1}}],[\"000\",{\"1\":{\"106\":1,\"107\":1,\"108\":3}}],[\"0+1\",{\"1\":{\"80\":1}}],[\"04\",{\"0\":{\"70\":1,\"175\":1,\"176\":1}}],[\"03\",{\"0\":{\"57\":1,\"173\":1,\"174\":1}}],[\"0\",{\"1\":{\"43\":2,\"58\":7,\"59\":1,\"65\":1,\"75\":1,\"76\":1,\"77\":4,\"80\":3,\"90\":1,\"106\":2,\"110\":2,\"112\":1,\"115\":1,\"125\":2,\"130\":1,\"132\":1,\"137\":1,\"138\":1,\"143\":1,\"149\":1,\"150\":1,\"151\":2,\"152\":2,\"153\":1,\"159\":2,\"163\":3,\"164\":3,\"175\":1,\"176\":1,\"181\":2,\"182\":2,\"183\":1}}],[\"0254\",{\"1\":{\"181\":1,\"182\":1}}],[\"0288415\",{\"1\":{\"178\":1}}],[\"02468\",{\"1\":{\"77\":1}}],[\"02\",{\"0\":{\"35\":1,\"171\":1,\"172\":1}}],[\"0123456789\",{\"1\":{\"77\":5}}],[\"01\",{\"0\":{\"4\":1,\"17\":1,\"169\":1,\"170\":1}}],[\"❌\",{\"1\":{\"32\":1}}],[\"之后\",{\"1\":{\"32\":2}}],[\"尝试访问已删除的变量将引发\",{\"1\":{\"32\":1}}],[\"表示获得稀有物品\",{\"1\":{\"183\":1}}],[\"表示没有值或空值\",{\"1\":{\"32\":1}}],[\"表达式\",{\"1\":{\"21\":2}}],[\"错\",{\"1\":{\"32\":11}}],[\"对象\",{\"1\":{\"165\":1}}],[\"对下列元素排序\",{\"1\":{\"163\":1}}],[\"对\",{\"1\":{\"32\":11,\"66\":1}}],[\"对于未来的就业方向还有点迷茫\",{\"1\":{\"1\":1}}],[\"练习\",{\"0\":{\"32\":1}}],[\"rule\",{\"1\":{\"177\":1}}],[\"randint\",{\"1\":{\"183\":2}}],[\"random\",{\"1\":{\"183\":10}}],[\"rare\",{\"1\":{\"183\":14}}],[\"rather\",{\"1\":{\"177\":1}}],[\"rates\",{\"1\":{\"171\":3}}],[\"raise\",{\"1\":{\"31\":1}}],[\"r和r\",{\"1\":{\"111\":1}}],[\"rich\",{\"1\":{\"108\":2}}],[\"rsplit\",{\"0\":{\"103\":1},\"1\":{\"103\":4}}],[\"rstrip\",{\"1\":{\"100\":9}}],[\"rsrip\",{\"0\":{\"100\":1}}],[\"r\",{\"1\":{\"89\":1,\"104\":1,\"111\":3}}],[\"rofn\",{\"1\":{\"81\":2}}],[\"reads\",{\"1\":{\"184\":1}}],[\"real\",{\"1\":{\"183\":1}}],[\"really\",{\"1\":{\"177\":1}}],[\"received\",{\"1\":{\"183\":1}}],[\"recent\",{\"1\":{\"91\":1,\"105\":1,\"110\":1,\"115\":1,\"132\":1,\"137\":1,\"159\":1}}],[\"referred\",{\"1\":{\"183\":1}}],[\"representing\",{\"1\":{\"171\":1}}],[\"replace\",{\"1\":{\"101\":9}}],[\"replce\",{\"0\":{\"101\":1}}],[\"reverse=false\",{\"0\":{\"146\":1}}],[\"reverse=true\",{\"1\":{\"118\":1,\"145\":1}}],[\"reverse\",{\"0\":{\"145\":1,\"147\":1},\"1\":{\"147\":1}}],[\"region\",{\"1\":{\"106\":5,\"107\":2}}],[\"reminder\",{\"2\":{\"195\":1}}],[\"remained\",{\"1\":{\"174\":2}}],[\"remaining\",{\"1\":{\"173\":1,\"175\":2}}],[\"remain\",{\"0\":{\"171\":1,\"172\":1}}],[\"remainder\",{\"1\":{\"66\":3}}],[\"remove\",{\"0\":{\"139\":1},\"1\":{\"6\":1,\"32\":1,\"139\":3}}],[\"results\",{\"1\":{\"173\":1,\"175\":1}}],[\"result\",{\"1\":{\"64\":3,\"92\":4,\"93\":4,\"94\":6,\"183\":2}}],[\"return\",{\"1\":{\"31\":1,\"183\":1}}],[\"muscle\",{\"1\":{\"177\":1}}],[\"must\",{\"1\":{\"169\":1,\"171\":2,\"181\":1}}],[\"minimum\",{\"1\":{\"175\":2}}],[\"minutes\",{\"1\":{\"171\":1,\"184\":7,\"185\":8}}],[\"million\",{\"1\":{\"108\":2}}],[\"mechanics\",{\"1\":{\"183\":1}}],[\"meters\",{\"1\":{\"178\":1,\"180\":2,\"181\":1}}],[\"metric\",{\"1\":{\"178\":1,\"181\":1}}],[\"message\",{\"1\":{\"169\":1,\"172\":3,\"174\":8,\"180\":4,\"182\":4,\"183\":4}}],[\"meet\",{\"1\":{\"132\":1}}],[\"mass\",{\"1\":{\"177\":2}}],[\"maximum\",{\"1\":{\"175\":2}}],[\"maxsplit=1\",{\"1\":{\"102\":1}}],[\"maxsplit用于控制分割几次\",{\"1\":{\"102\":1}}],[\"maxsplit\",{\"1\":{\"102\":1,\"103\":2}}],[\"mad\",{\"0\":{\"175\":1,\"176\":1}}],[\"may\",{\"1\":{\"171\":1}}],[\"make\",{\"1\":{\"108\":2}}],[\"monetary\",{\"1\":{\"173\":1}}],[\"money\",{\"1\":{\"105\":3,\"106\":2,\"107\":4,\"108\":20,\"175\":2,\"183\":1}}],[\"moves\",{\"1\":{\"171\":1}}],[\"most\",{\"1\":{\"91\":1,\"105\":1,\"110\":1,\"115\":1,\"132\":1,\"137\":1,\"159\":1,\"183\":1}}],[\"more\",{\"1\":{\"31\":1}}],[\"m\",{\"1\":{\"66\":8,\"72\":4,\"132\":1}}],[\"my1\",{\"1\":{\"7\":1}}],[\"my\",{\"1\":{\"7\":17,\"32\":7}}],[\"myvar2\",{\"1\":{\"32\":1}}],[\"myvar\",{\"1\":{\"6\":2,\"32\":1}}],[\"l\",{\"1\":{\"122\":2}}],[\"last\",{\"1\":{\"91\":1,\"105\":1,\"110\":1,\"115\":1,\"132\":1,\"137\":1,\"159\":1}}],[\"lambda\",{\"1\":{\"31\":1}}],[\"loot\",{\"1\":{\"183\":10}}],[\"look\",{\"1\":{\"21\":1,\"169\":2,\"171\":1,\"178\":1,\"181\":1,\"184\":1}}],[\"love\",{\"1\":{\"112\":12}}],[\"lower\",{\"0\":{\"84\":1},\"1\":{\"84\":3}}],[\"level\",{\"1\":{\"183\":20}}],[\"lets\",{\"1\":{\"183\":1}}],[\"let\",{\"1\":{\"183\":1}}],[\"letter\",{\"1\":{\"165\":6}}],[\"len\",{\"1\":{\"73\":3,\"75\":1,\"77\":5,\"80\":1,\"131\":1}}],[\"lesson2\",{\"1\":{\"72\":2}}],[\"less\",{\"1\":{\"67\":2}}],[\"lilei\",{\"1\":{\"122\":1,\"160\":2}}],[\"like\",{\"1\":{\"89\":1,\"169\":1,\"178\":1,\"181\":1,\"184\":1}}],[\"lisa\",{\"1\":{\"85\":2,\"86\":2,\"87\":1,\"88\":2}}],[\"list2\",{\"1\":{\"165\":2}}],[\"list1\",{\"1\":{\"165\":2}}],[\"list\",{\"0\":{\"118\":1,\"121\":1,\"146\":1},\"1\":{\"31\":1,\"43\":2,\"114\":1,\"115\":1,\"118\":1,\"122\":2,\"129\":1,\"130\":2,\"145\":1,\"163\":4,\"165\":2}}],[\"literal\",{\"1\":{\"72\":1}}],[\"lines\",{\"1\":{\"175\":1,\"176\":2}}],[\"line\",{\"1\":{\"72\":2,\"91\":1,\"105\":1,\"110\":1,\"115\":1,\"132\":1,\"137\":1,\"159\":1}}],[\"lst2\",{\"1\":{\"165\":2}}],[\"lst1\",{\"1\":{\"165\":2}}],[\"lstrip\",{\"0\":{\"99\":1},\"1\":{\"99\":9}}],[\"lst\",{\"1\":{\"43\":6,\"44\":1,\"46\":1,\"134\":4,\"147\":3,\"164\":3}}],[\"系统关键词不能做变量名使用\",{\"1\":{\"31\":1}}],[\"且不能用数字开头\",{\"1\":{\"31\":1}}],[\"英文\",{\"1\":{\"31\":1}}],[\"该赋值可以理解为倒果汁的过程\",{\"1\":{\"30\":6}}],[\"问题来了\",{\"1\":{\"47\":1}}],[\"问\",{\"1\":{\"30\":1}}],[\"弟弟的杯子装了果汁\",{\"1\":{\"30\":1}}],[\"弟弟叫\",{\"1\":{\"30\":1}}],[\"家中仅剩一杯果汁\",{\"1\":{\"30\":1}}],[\"不就是上面所说的\",{\"1\":{\"161\":1}}],[\"不会报错\",{\"1\":{\"130\":1}}],[\"不包括结束位置的元素\",{\"1\":{\"127\":1}}],[\"不包括结束位置的那个元素\",{\"1\":{\"126\":1}}],[\"不适合\",{\"1\":{\"114\":1}}],[\"不分先后顺序\",{\"1\":{\"99\":1,\"100\":1}}],[\"不用重复打引号\",{\"1\":{\"72\":1}}],[\"不浪费\",{\"1\":{\"47\":1}}],[\"不然\",{\"1\":{\"47\":1}}],[\"不需要\",{\"1\":{\"47\":1}}],[\"不能提前做好模版\",{\"1\":{\"109\":1}}],[\"不能对元组修改\",{\"1\":{\"46\":1}}],[\"不能对字符串修改\",{\"1\":{\"41\":1}}],[\"不能print出来\",{\"1\":{\"31\":1}}],[\"不可以的对象\",{\"1\":{\"132\":1}}],[\"不可以改变字符串中的任何元素\",{\"1\":{\"110\":1}}],[\"不可以print出来\",{\"1\":{\"31\":1}}],[\"不可变的数据类型\",{\"1\":{\"50\":1}}],[\"不可变\",{\"1\":{\"46\":1}}],[\"不可变是指在代码运行的过程当中\",{\"1\":{\"41\":1}}],[\"不可变性\",{\"1\":{\"41\":1,\"46\":1}}],[\"不要使用python的内置函数名作为名称\",{\"1\":{\"31\":1}}],[\"不喜欢用对方的杯子\",{\"1\":{\"30\":1}}],[\"不也是在我们当前所处的空间中\",{\"1\":{\"20\":1}}],[\"哥哥和弟弟都有专属的杯子\",{\"1\":{\"30\":1}}],[\"哥哥叫\",{\"1\":{\"30\":1}}],[\"想喝可乐\",{\"1\":{\"30\":1}}],[\"想喝果汁\",{\"1\":{\"30\":1}}],[\"join\",{\"0\":{\"104\":1},\"1\":{\"104\":3}}],[\"job\",{\"1\":{\"13\":1}}],[\"juice\",{\"1\":{\"30\":3}}],[\"jaden1\",{\"1\":{\"30\":2}}],[\"jaden\",{\"1\":{\"30\":23}}],[\"进行指定分割\",{\"1\":{\"103\":1}}],[\"进阶的赋值方法\",{\"0\":{\"27\":1}}],[\"进去之后\",{\"1\":{\"20\":1}}],[\"~~~^^^\",{\"1\":{\"159\":1}}],[\"~~~~~~~^^^^^\",{\"1\":{\"132\":1}}],[\"~~~~~~~~~~~~~^~~~~\",{\"1\":{\"105\":1}}],[\"~^^^\",{\"1\":{\"110\":1}}],[\"~\",{\"1\":{\"26\":1}}],[\"答案显然是可以的\",{\"1\":{\"23\":1}}],[\"同时输出多个数据\",{\"0\":{\"23\":1}}],[\"同时输出多个变量\",{\"0\":{\"13\":1},\"1\":{\"23\":1}}],[\"井号是为了注释\",{\"1\":{\"21\":1}}],[\"打印步长为2的所有数\",{\"1\":{\"77\":1}}],[\"打印输出\",{\"1\":{\"21\":1}}],[\"打印出代码运行结果\",{\"1\":{\"5\":1}}],[\"后面就用不了\",{\"1\":{\"165\":1}}],[\"后\",{\"1\":{\"21\":1,\"99\":4,\"100\":4}}],[\"worked\",{\"1\":{\"184\":11,\"185\":14}}],[\"world\",{\"1\":{\"5\":1,\"6\":5,\"7\":1,\"9\":2,\"32\":2}}],[\"will\",{\"1\":{\"171\":3,\"172\":2}}],[\"within\",{\"1\":{\"175\":1}}],[\"with\",{\"1\":{\"31\":1,\"173\":1,\"175\":1}}],[\"written\",{\"1\":{\"181\":1}}],[\"write\",{\"1\":{\"169\":1,\"171\":1,\"173\":1,\"175\":1,\"178\":1,\"181\":1,\"183\":1,\"184\":1}}],[\"wryh\",{\"1\":{\"21\":2}}],[\"want\",{\"1\":{\"129\":4,\"184\":1}}],[\"wangruoyihan\",{\"1\":{\"91\":1,\"105\":1,\"110\":1,\"132\":1,\"137\":1,\"159\":1}}],[\"we\",{\"1\":{\"184\":1}}],[\"weight\",{\"1\":{\"177\":3,\"178\":2,\"180\":2,\"181\":2,\"182\":2}}],[\"well\",{\"1\":{\"171\":1}}],[\"welcome\",{\"1\":{\"105\":3,\"106\":20,\"107\":2,\"169\":1}}],[\"web\",{\"1\":{\"171\":1}}],[\"wealth\",{\"1\":{\"108\":2}}],[\"what\",{\"1\":{\"183\":8}}],[\"whether\",{\"1\":{\"183\":1}}],[\"why\",{\"1\":{\"47\":1,\"53\":1}}],[\"while\",{\"1\":{\"31\":1,\"72\":1}}],[\"从字符串右边进行分割\",{\"1\":{\"103\":1}}],[\"从0开始\",{\"1\":{\"77\":1}}],[\"从上面代码可知\",{\"1\":{\"151\":1}}],[\"从上面的代码结果可知\",{\"1\":{\"149\":1}}],[\"从上面的代码可以得知\",{\"1\":{\"115\":1}}],[\"从上面的输出可知\",{\"1\":{\"72\":1}}],[\"从上到下\",{\"1\":{\"21\":1}}],[\"从左到右\",{\"1\":{\"41\":1,\"44\":3,\"46\":3}}],[\"从输出的结果可以看出\",{\"1\":{\"23\":1}}],[\"从右到左\",{\"1\":{\"21\":1,\"41\":1,\"44\":3,\"46\":3}}],[\"从喧嚣的人生走向逍遥之境\",{\"1\":{\"1\":1}}],[\"类似删除键\",{\"1\":{\"111\":1}}],[\"类似数学表达\",{\"1\":{\"21\":1}}],[\"类似的有\",{\"1\":{\"20\":1}}],[\"初始化赋值语句\",{\"1\":{\"21\":1}}],[\"人\",{\"1\":{\"47\":2}}],[\"人民群众\",{\"1\":{\"21\":1}}],[\"人大代表\",{\"1\":{\"21\":1}}],[\"人没有任何能力知道自己是否是在做梦\",{\"1\":{\"1\":1}}],[\"他们的权利不是自己获取的\",{\"1\":{\"21\":1}}],[\"他说当梦足够真实\",{\"1\":{\"1\":1}}],[\"值\",{\"1\":{\"21\":2}}],[\"泥人\",{\"1\":{\"21\":1}}],[\"泥人可以代表说是女娲的后人\",{\"1\":{\"21\":1}}],[\"泥人没有生命\",{\"1\":{\"21\":1}}],[\"此时发挥作用\",{\"1\":{\"72\":1}}],[\"此时在聘请一个就显得浪费了\",{\"1\":{\"47\":1}}],[\"此时我们是不是需要聘请一个仓库管理员\",{\"1\":{\"47\":1}}],[\"此时\",{\"1\":{\"21\":1,\"72\":1}}],[\"此题属于概念性问题\",{\"1\":{\"5\":1}}],[\"赋予给泥人生命\",{\"1\":{\"21\":1}}],[\"赋值运算符\",{\"0\":{\"63\":1}}],[\"赋值给变量x\",{\"1\":{\"21\":1}}],[\"赋值给\",{\"1\":{\"21\":1}}],[\"赋值语句\",{\"0\":{\"21\":1}}],[\"赋值\",{\"1\":{\"5\":1}}],[\"女娲\",{\"1\":{\"21\":1}}],[\"女娲挥了挥手柳条\",{\"1\":{\"21\":1}}],[\"女娲捏了泥人\",{\"1\":{\"21\":1}}],[\"通过\",{\"1\":{\"114\":1}}],[\"通过上面的代码示例\",{\"1\":{\"114\":1}}],[\"通过变量名代表或引用某个值\",{\"1\":{\"21\":1}}],[\"通过使用\",{\"1\":{\"7\":1}}],[\"开始\",{\"1\":{\"77\":1,\"130\":1}}],[\"开辟空间\",{\"1\":{\"20\":1}}],[\"开头是单引号\",{\"1\":{\"72\":1}}],[\"开头\",{\"1\":{\"6\":1}}],[\"冰箱\",{\"1\":{\"20\":1}}],[\"显然是不行的🙅\",{\"1\":{\"53\":1}}],[\"显然是不会的\",{\"1\":{\"47\":1}}],[\"显然是不合适的\",{\"1\":{\"20\":1}}],[\"显然是的\",{\"1\":{\"20\":1}}],[\"信封在一开始是扁的\",{\"1\":{\"20\":1}}],[\"总不能直接把每个月的月考成绩单直接给老师\",{\"1\":{\"20\":1}}],[\"老师要看刘奕彤\",{\"1\":{\"20\":1}}],[\"某一天\",{\"1\":{\"20\":1}}],[\"刘奕彤\",{\"1\":{\"20\":1}}],[\"马冬梅\",{\"1\":{\"20\":1}}],[\"97\",{\"1\":{\"125\":1,\"132\":2}}],[\"98\",{\"1\":{\"105\":1,\"110\":1,\"125\":1,\"131\":1,\"132\":2}}],[\"98分\",{\"1\":{\"20\":1}}],[\"95\",{\"1\":{\"91\":1,\"131\":1}}],[\"9和1的和\",{\"1\":{\"60\":1}}],[\"91的反转\",{\"1\":{\"60\":1}}],[\"91\",{\"1\":{\"60\":2}}],[\"99\",{\"1\":{\"60\":1,\"125\":1,\"131\":1,\"132\":3}}],[\"9\",{\"0\":{\"91\":1,\"112\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1},\"1\":{\"58\":3,\"59\":4,\"60\":1,\"81\":1,\"114\":1,\"118\":1,\"126\":1,\"127\":1,\"132\":10,\"145\":3,\"161\":1,\"163\":3,\"164\":3}}],[\"96分\",{\"1\":{\"20\":1}}],[\"9var\",{\"1\":{\"6\":1}}],[\"李雷\",{\"1\":{\"20\":1}}],[\"每升一级\",{\"1\":{\"183\":1}}],[\"每行结尾添加\",{\"1\":{\"72\":1}}],[\"每张纸上都会依次记录每个学生的成绩越到成绩\",{\"1\":{\"20\":1}}],[\"每个元组都是由两个列表的相应元素组成\",{\"1\":{\"165\":1}}],[\"每个值之间默认以空格间隔\",{\"1\":{\"23\":1}}],[\"每个值之间用逗号隔开\",{\"1\":{\"13\":1}}],[\"每个月需要统计班级中每个学生的月考成绩\",{\"1\":{\"20\":1}}],[\"月考成绩会每个月一张纸\",{\"1\":{\"20\":1}}],[\"你用了列表\",{\"1\":{\"165\":1}}],[\"你可以发现\",{\"1\":{\"161\":1}}],[\"你能说掷骰子是确定性事件吗\",{\"1\":{\"53\":1}}],[\"你掷骰子\",{\"1\":{\"53\":1}}],[\"你创建原子弹的仓库\",{\"1\":{\"47\":1}}],[\"你每当需要添加数据的时候\",{\"1\":{\"47\":1}}],[\"你不知道还有没有位置可以存放\",{\"1\":{\"47\":1}}],[\"你不小心把哥哥的杯子装了可乐\",{\"1\":{\"30\":1}}],[\"你要向仓库添加物品\",{\"1\":{\"47\":1}}],[\"你是班级当中的课代表\",{\"1\":{\"20\":1}}],[\"你也可以叫我蝶梦\",{\"1\":{\"1\":1}}],[\"量\",{\"1\":{\"19\":1}}],[\"变化\",{\"1\":{\"19\":1}}],[\"变\",{\"1\":{\"19\":1}}],[\"变量只能存储基本数据类型的值\",{\"1\":{\"32\":1}}],[\"变量在使用之前必须被赋值\",{\"1\":{\"32\":1}}],[\"变量会被覆盖\",{\"1\":{\"20\":1}}],[\"变量是在计算机的内存当中开辟空间\",{\"1\":{\"20\":1}}],[\"变量的命名规则\",{\"0\":{\"31\":1}}],[\"变量的命名规则中\",{\"1\":{\"6\":1}}],[\"变量的传递\",{\"1\":{\"21\":1}}],[\"变量的覆盖\",{\"0\":{\"11\":1},\"1\":{\"11\":1,\"21\":1}}],[\"变量的赋值\",{\"0\":{\"10\":1}}],[\"变量\",{\"1\":{\"7\":1,\"21\":2}}],[\"变量名区分大小写\",{\"1\":{\"32\":1}}],[\"变量名不能包含空格\",{\"1\":{\"31\":1}}],[\"变量名不能以数字开头\",{\"1\":{\"6\":1}}],[\"变量名\",{\"1\":{\"21\":2}}],[\"变量名可以是\",{\"1\":{\"32\":1}}],[\"变量名可以以数字开始\",{\"1\":{\"32\":1}}],[\"变量名可以以特殊字符\",{\"1\":{\"6\":1}}],[\"变量名可以包含字母\",{\"1\":{\"7\":1}}],[\"变量名可以包含大写和小写字母\",{\"1\":{\"6\":1}}],[\"变量名可以由字母\",{\"1\":{\"6\":1}}],[\"变量命名为什么推荐\",{\"1\":{\"5\":1}}],[\"生活中的例子\",{\"0\":{\"18\":1}}],[\"理解变量\",{\"0\":{\"18\":1}}],[\"647\",{\"1\":{\"180\":1}}],[\"60\",{\"1\":{\"172\":1,\"183\":1,\"184\":1,\"185\":3}}],[\"6\",{\"0\":{\"14\":1,\"32\":1,\"48\":1,\"49\":1,\"50\":1,\"88\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"131\":1,\"162\":1},\"1\":{\"53\":1,\"58\":2,\"59\":1,\"114\":2,\"118\":1,\"126\":3,\"127\":2,\"129\":3,\"130\":2,\"132\":14,\"140\":2,\"145\":3,\"163\":3,\"164\":3,\"174\":1,\"184\":1,\"185\":1}}],[\"67\",{\"1\":{\"7\":2}}],[\"职业和爱好\",{\"1\":{\"13\":1}}],[\"年龄\",{\"1\":{\"13\":1}}],[\"而通过eval转换之后\",{\"1\":{\"115\":1}}],[\"而\",{\"1\":{\"109\":1}}],[\"而真正的成功者\",{\"1\":{\"72\":6}}],[\"而胆子最大的是那些冒险家\",{\"1\":{\"72\":6}}],[\"而第一个单引号不在字符串的末尾\",{\"1\":{\"72\":1}}],[\"而不是每个人都从头创建一个新字符串\",{\"1\":{\"105\":1}}],[\"而不是\",{\"1\":{\"11\":1}}],[\"而梦醒发现自己还是庄子\",{\"1\":{\"1\":1}}],[\"fat\",{\"1\":{\"177\":1}}],[\"false\",{\"0\":{\"145\":1},\"1\":{\"31\":1,\"43\":2,\"52\":2,\"53\":2,\"88\":1,\"92\":1,\"93\":1,\"95\":1,\"96\":1,\"97\":1,\"183\":4}}],[\"fit\",{\"1\":{\"175\":2}}],[\"first\",{\"1\":{\"175\":1}}],[\"find\",{\"0\":{\"90\":1},\"1\":{\"90\":3,\"175\":3}}],[\"finally\",{\"1\":{\"31\":1}}],[\"files\",{\"1\":{\"181\":1}}],[\"file\",{\"1\":{\"72\":2,\"91\":1,\"105\":1,\"110\":1,\"115\":1,\"132\":1,\"137\":1,\"159\":1}}],[\"f\",{\"0\":{\"107\":1,\"109\":1},\"1\":{\"67\":3,\"107\":2,\"108\":1,\"109\":1,\"149\":2,\"150\":2,\"151\":3,\"152\":3,\"153\":3,\"165\":1,\"170\":1,\"172\":1,\"174\":1,\"176\":1,\"180\":1,\"182\":1,\"183\":2,\"185\":1}}],[\"following\",{\"1\":{\"173\":1,\"175\":1,\"177\":1}}],[\"four\",{\"1\":{\"171\":1}}],[\"found\",{\"1\":{\"91\":1}}],[\"formula\",{\"1\":{\"177\":2}}],[\"format的优缺点\",{\"0\":{\"109\":1}}],[\"format\",{\"0\":{\"106\":1},\"1\":{\"106\":13,\"109\":1,\"169\":1,\"171\":1,\"173\":1,\"175\":1}}],[\"format就应运而生了\",{\"1\":{\"105\":1}}],[\"for\",{\"1\":{\"31\":1,\"32\":1,\"76\":1,\"165\":1,\"169\":4,\"177\":1,\"178\":2,\"181\":2,\"183\":1,\"184\":2}}],[\"food\",{\"1\":{\"11\":6}}],[\"from\",{\"1\":{\"31\":1,\"152\":1,\"177\":1,\"183\":1}}],[\"floating\",{\"1\":{\"7\":2}}],[\"float\",{\"0\":{\"37\":1},\"1\":{\"5\":1,\"7\":2,\"38\":6,\"180\":2,\"182\":2}}],[\"然后进行排序\",{\"1\":{\"163\":1}}],[\"然后直接传给用户查看\",{\"1\":{\"47\":1}}],[\"然后将\",{\"1\":{\"14\":1}}],[\"然后将变量\",{\"1\":{\"11\":1}}],[\"然后解释为什么打印的结果是\",{\"1\":{\"11\":1}}],[\"然后定义一个新的变量\",{\"1\":{\"10\":1}}],[\"然后使用\",{\"1\":{\"9\":1}}],[\"并没有创建string这个变量\",{\"1\":{\"115\":1}}],[\"并输出\",{\"1\":{\"43\":2,\"46\":2,\"49\":2,\"52\":2}}],[\"并且想要根据它们的相应元素创建一个新的迭代器\",{\"1\":{\"165\":1}}],[\"并且你可以直接把你的物品\",{\"1\":{\"47\":1}}],[\"并且同时为它们赋予值\",{\"1\":{\"14\":1}}],[\"并且在输出之后不换行\",{\"1\":{\"12\":1}}],[\"并分别赋值为你的名字\",{\"1\":{\"13\":1}}],[\"并将它的值设置为变量\",{\"1\":{\"10\":1}}],[\"并将它的值设置为\",{\"1\":{\"9\":1,\"10\":1,\"11\":1}}],[\"并热衷于交很多很多的朋友\",{\"1\":{\"1\":1}}],[\"gameplay\",{\"1\":{\"183\":1}}],[\"game\",{\"1\":{\"183\":5}}],[\"games\",{\"1\":{\"183\":1}}],[\"gacha\",{\"0\":{\"183\":1},\"1\":{\"183\":3}}],[\"got\",{\"1\":{\"183\":2}}],[\"gov\",{\"1\":{\"171\":1}}],[\"gone\",{\"0\":{\"171\":1,\"172\":1}}],[\"given\",{\"1\":{\"129\":1}}],[\"github\",{\"1\":{\"72\":2}}],[\"grade\",{\"1\":{\"125\":3,\"131\":2,\"132\":4}}],[\"greater\",{\"1\":{\"67\":1,\"171\":2,\"172\":2}}],[\"greeting\",{\"1\":{\"9\":3}}],[\"guys\",{\"1\":{\"106\":8}}],[\"global\",{\"1\":{\"31\":1,\"32\":2}}],[\"getting\",{\"1\":{\"183\":3}}],[\"gettype\",{\"1\":{\"6\":1}}],[\"get\",{\"1\":{\"31\":1,\"129\":5,\"183\":1}}],[\"名字为\",{\"1\":{\"9\":1,\"10\":2,\"11\":1}}],[\"定义四个变量\",{\"1\":{\"13\":1}}],[\"定义三个变量\",{\"1\":{\"12\":1,\"14\":1}}],[\"定义一个变量\",{\"1\":{\"9\":1,\"10\":1,\"11\":1}}],[\"定义和输出变量\",{\"0\":{\"9\":1}}],[\"编程语言中通常第一个位置的编号是0\",{\"1\":{\"124\":1}}],[\"编程题\",{\"0\":{\"8\":1}}],[\"编写一段\",{\"1\":{\"64\":1,\"65\":1,\"66\":1,\"67\":1}}],[\"编写个代码示例\",{\"1\":{\"5\":1}}],[\"40\",{\"1\":{\"183\":1}}],[\"42\",{\"1\":{\"171\":1,\"172\":1}}],[\"4345603008\",{\"1\":{\"153\":5}}],[\"4346455088\",{\"1\":{\"153\":1}}],[\"4346571136\",{\"1\":{\"153\":3}}],[\"4346606016\",{\"1\":{\"153\":3}}],[\"4371843072\",{\"1\":{\"152\":1}}],[\"4371822272\",{\"1\":{\"152\":2}}],[\"4371819008\",{\"1\":{\"152\":3}}],[\"4309050176\",{\"1\":{\"151\":3}}],[\"4300547008\",{\"1\":{\"149\":2}}],[\"4310037312\",{\"1\":{\"151\":3}}],[\"4337283712\",{\"1\":{\"150\":1}}],[\"4335526720\",{\"1\":{\"150\":1}}],[\"44\",{\"1\":{\"115\":1}}],[\"4\",{\"0\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":2,\"13\":1,\"14\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"45\":1,\"46\":1,\"61\":1,\"62\":1,\"67\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":2,\"79\":2,\"80\":2,\"81\":2,\"86\":1,\"109\":1,\"127\":1,\"129\":1,\"152\":1,\"160\":1},\"1\":{\"46\":4,\"53\":1,\"58\":4,\"59\":2,\"62\":1,\"65\":1,\"66\":1,\"67\":1,\"76\":2,\"89\":1,\"114\":3,\"118\":1,\"126\":2,\"127\":2,\"128\":5,\"130\":2,\"131\":1,\"132\":12,\"137\":3,\"139\":2,\"140\":2,\"142\":1,\"145\":6,\"160\":1,\"162\":2,\"163\":3,\"164\":3,\"173\":2,\"174\":2,\"175\":2,\"176\":2,\"183\":2}}],[\"453592\",{\"1\":{\"181\":1,\"182\":1}}],[\"45\",{\"1\":{\"5\":1,\"115\":2}}],[\"+a4\",{\"1\":{\"185\":1}}],[\"+a3\",{\"1\":{\"185\":1}}],[\"+tup2\",{\"1\":{\"162\":1}}],[\"+grade\",{\"1\":{\"125\":1}}],[\"+s2\",{\"1\":{\"112\":1}}],[\"+str\",{\"1\":{\"105\":1}}],[\"+=\",{\"1\":{\"63\":3}}],[\"+\",{\"1\":{\"7\":1,\"21\":3,\"58\":2,\"59\":2,\"60\":2,\"63\":1,\"64\":2,\"105\":4,\"110\":1,\"112\":1,\"115\":1,\"140\":1,\"161\":2,\"172\":4,\"174\":3,\"176\":1,\"183\":1,\"185\":7}}],[\"its\",{\"1\":{\"171\":1,\"173\":1,\"175\":1}}],[\"it\",{\"1\":{\"169\":1,\"171\":2,\"173\":1,\"175\":1,\"177\":1}}],[\"iterable\",{\"1\":{\"132\":1}}],[\"items\",{\"1\":{\"183\":1}}],[\"item\",{\"1\":{\"110\":1,\"159\":1,\"183\":14}}],[\"id用来检测变量物理地址\",{\"1\":{\"149\":1}}],[\"id\",{\"1\":{\"149\":3,\"150\":3,\"151\":13,\"152\":13,\"153\":28}}],[\"i\",{\"1\":{\"72\":4,\"85\":2,\"86\":2,\"87\":1,\"88\":1,\"89\":1,\"104\":2,\"132\":1,\"171\":1}}],[\"improve\",{\"1\":{\"183\":1}}],[\"import\",{\"1\":{\"31\":1,\"32\":1,\"152\":1,\"183\":2}}],[\"immigration\",{\"1\":{\"171\":1}}],[\"immigrant\",{\"1\":{\"171\":1,\"172\":2}}],[\"imac\",{\"1\":{\"72\":2}}],[\"image\",{\"1\":{\"36\":1,\"44\":1,\"58\":1,\"71\":1,\"72\":2,\"80\":1,\"81\":1,\"114\":1,\"118\":1,\"124\":1,\"126\":1,\"127\":1,\"132\":1,\"134\":1,\"141\":1,\"149\":1,\"151\":1,\"152\":1,\"158\":1}}],[\"inch\",{\"1\":{\"181\":1}}],[\"inches\",{\"1\":{\"181\":2,\"182\":2}}],[\"insert\",{\"0\":{\"130\":1},\"1\":{\"129\":4,\"130\":4}}],[\"indormation\",{\"1\":{\"114\":1}}],[\"index\",{\"0\":{\"91\":1,\"143\":1},\"1\":{\"91\":3,\"130\":4,\"143\":2,\"177\":1}}],[\"information\",{\"1\":{\"114\":1,\"171\":1}}],[\"invalid\",{\"1\":{\"72\":1}}],[\"input\",{\"0\":{\"114\":1},\"1\":{\"67\":2,\"114\":23,\"115\":16,\"129\":2,\"170\":8,\"171\":1,\"172\":1,\"174\":4,\"175\":2,\"176\":2,\"180\":2,\"182\":2,\"183\":2,\"185\":6}}],[\"in\",{\"0\":{\"141\":1},\"1\":{\"31\":1,\"58\":7,\"91\":1,\"105\":1,\"110\":1,\"114\":10,\"115\":25,\"128\":7,\"132\":1,\"137\":1,\"159\":1,\"165\":1,\"171\":4,\"172\":2,\"173\":2,\"175\":5,\"176\":2,\"178\":2,\"180\":4,\"181\":5,\"182\":4,\"183\":7,\"184\":2}}],[\"interact\",{\"1\":{\"173\":1,\"175\":1}}],[\"integer\",{\"1\":{\"5\":1,\"7\":2,\"67\":2,\"171\":3}}],[\"introduction\",{\"0\":{\"35\":1}}],[\"int\",{\"0\":{\"37\":1},\"1\":{\"7\":2,\"38\":10,\"40\":2,\"49\":2,\"67\":2,\"105\":1,\"114\":2,\"115\":2,\"129\":2,\"161\":1,\"172\":2,\"174\":4,\"176\":2,\"183\":1,\"185\":6}}],[\"if\",{\"1\":{\"31\":1,\"67\":1}}],[\"isspace\",{\"0\":{\"97\":1},\"1\":{\"97\":3}}],[\"islower\",{\"0\":{\"96\":1},\"1\":{\"96\":3}}],[\"isupper\",{\"0\":{\"95\":1},\"1\":{\"95\":3}}],[\"isalnum\",{\"0\":{\"94\":1},\"1\":{\"94\":3}}],[\"isalpha\",{\"0\":{\"93\":1},\"1\":{\"93\":2}}],[\"isdigit\",{\"0\":{\"92\":1},\"1\":{\"92\":2}}],[\"is\",{\"1\":{\"7\":4,\"31\":2,\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"49\":2,\"52\":2,\"67\":4,\"105\":3,\"106\":2,\"107\":2,\"108\":20,\"115\":1,\"137\":1,\"169\":1,\"170\":2,\"171\":5,\"173\":2,\"174\":2,\"177\":3,\"178\":1,\"180\":2,\"181\":3,\"182\":2,\"183\":8,\"184\":1,\"185\":2}}],[\"ollie\",{\"1\":{\"184\":4,\"185\":6}}],[\"otherwise\",{\"1\":{\"177\":1}}],[\"on\",{\"1\":{\"171\":1,\"175\":1,\"177\":1}}],[\"only\",{\"1\":{\"105\":1,\"132\":1,\"183\":1}}],[\"our\",{\"1\":{\"183\":1}}],[\"ours\",{\"1\":{\"169\":1,\"171\":1}}],[\"outcome\",{\"1\":{\"43\":1}}],[\"out\",{\"1\":{\"25\":1,\"58\":7,\"114\":5,\"115\":13,\"128\":4,\"169\":1,\"171\":2}}],[\"outputs\",{\"1\":{\"173\":1,\"178\":1}}],[\"output\",{\"1\":{\"23\":1,\"25\":1,\"38\":2,\"40\":1,\"46\":1,\"49\":1,\"52\":1,\"53\":1,\"54\":1,\"60\":1,\"75\":1,\"76\":1,\"77\":1,\"79\":1,\"80\":1,\"81\":2,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":3,\"91\":2,\"92\":2,\"93\":2,\"94\":3,\"95\":3,\"96\":3,\"97\":3,\"98\":2,\"99\":3,\"100\":3,\"101\":3,\"102\":1,\"103\":1,\"104\":1,\"105\":2,\"106\":5,\"107\":2,\"108\":4,\"110\":2,\"111\":1,\"112\":1,\"114\":3,\"118\":1,\"122\":1,\"131\":1,\"132\":6,\"134\":2,\"135\":1,\"137\":2,\"138\":1,\"139\":1,\"140\":1,\"142\":1,\"143\":1,\"147\":1,\"149\":1,\"150\":1,\"151\":1,\"152\":1,\"153\":1,\"157\":1,\"159\":1,\"161\":2,\"162\":1,\"163\":1,\"164\":1,\"165\":3,\"169\":1,\"170\":1,\"171\":2,\"172\":1,\"173\":1,\"174\":1,\"176\":1,\"180\":1,\"182\":1,\"183\":1,\"185\":1}}],[\"o\",{\"1\":{\"122\":1,\"132\":2}}],[\"object\",{\"1\":{\"110\":1,\"130\":1,\"159\":1,\"165\":2}}],[\"ok\",{\"1\":{\"102\":9,\"103\":9}}],[\"order\",{\"1\":{\"175\":1}}],[\"original\",{\"1\":{\"153\":2}}],[\"orn\",{\"1\":{\"90\":1,\"91\":1}}],[\"or\",{\"1\":{\"31\":1,\"171\":1,\"183\":2}}],[\"orange\",{\"1\":{\"6\":3}}],[\"often\",{\"1\":{\"183\":1}}],[\"ofts\",{\"1\":{\"77\":1}}],[\"of\",{\"1\":{\"7\":2,\"31\":1,\"169\":3,\"171\":6,\"172\":5,\"173\":8,\"174\":10,\"175\":8,\"176\":2,\"177\":2,\"183\":5,\"184\":11,\"185\":14}}],[\"two\",{\"1\":{\"175\":1,\"176\":1,\"181\":1}}],[\"teo\",{\"1\":{\"176\":1}}],[\"term\",{\"1\":{\"171\":1}}],[\"template\",{\"1\":{\"106\":12}}],[\"takes\",{\"1\":{\"171\":1}}],[\"taking\",{\"1\":{\"169\":1,\"170\":2}}],[\"tata\",{\"0\":{\"35\":1}}],[\"tx\",{\"1\":{\"153\":3}}],[\"ty\",{\"1\":{\"151\":3,\"152\":3,\"153\":3}}],[\"typr\",{\"1\":{\"114\":1}}],[\"typeerror\",{\"1\":{\"105\":1,\"110\":1,\"132\":1,\"159\":1}}],[\"types\",{\"0\":{\"35\":1}}],[\"type\",{\"0\":{\"57\":1},\"1\":{\"6\":2,\"38\":8,\"40\":4,\"43\":4,\"46\":4,\"49\":4,\"52\":4,\"54\":1,\"114\":5,\"115\":8,\"157\":1,\"161\":2}}],[\"typeof\",{\"1\":{\"6\":1}}],[\"td\",{\"1\":{\"111\":1}}],[\"tc\",{\"1\":{\"111\":1}}],[\"tb\",{\"1\":{\"111\":1}}],[\"tthis\",{\"1\":{\"111\":1}}],[\"tfor\",{\"1\":{\"111\":1}}],[\"time\",{\"1\":{\"184\":4,\"185\":2}}],[\"timetables\",{\"0\":{\"184\":1,\"185\":1}}],[\"tissue\",{\"1\":{\"177\":1}}],[\"tid\",{\"1\":{\"151\":6,\"152\":6,\"153\":15}}],[\"title\",{\"0\":{\"86\":1},\"1\":{\"86\":3}}],[\"tips\",{\"1\":{\"59\":1},\"2\":{\"195\":1}}],[\"thumb\",{\"1\":{\"177\":1}}],[\"thin\",{\"0\":{\"175\":1,\"176\":1}}],[\"this\",{\"1\":{\"76\":1,\"115\":2,\"169\":1,\"171\":1,\"178\":1,\"181\":1,\"184\":1}}],[\"that\",{\"1\":{\"129\":4,\"169\":1,\"171\":5,\"173\":1,\"175\":4,\"178\":1,\"181\":1,\"183\":2,\"184\":1}}],[\"than\",{\"1\":{\"67\":3,\"171\":2,\"172\":2}}],[\"then\",{\"1\":{\"173\":1,\"175\":1,\"181\":1}}],[\"they\",{\"1\":{\"171\":1,\"183\":1}}],[\"these\",{\"1\":{\"171\":1,\"183\":1}}],[\"there\",{\"1\":{\"171\":5,\"184\":1}}],[\"them\",{\"1\":{\"169\":2,\"183\":1,\"184\":4,\"185\":2}}],[\"their\",{\"1\":{\"169\":2,\"183\":1}}],[\"the\",{\"0\":{\"183\":1},\"1\":{\"7\":2,\"31\":1,\"67\":1,\"129\":6,\"169\":4,\"171\":10,\"172\":2,\"173\":7,\"174\":4,\"175\":14,\"177\":4,\"178\":1,\"181\":2,\"183\":6,\"184\":9,\"185\":14}}],[\"tup2\",{\"1\":{\"162\":1,\"165\":2}}],[\"tup1\",{\"1\":{\"162\":2,\"165\":2}}],[\"tup\",{\"1\":{\"46\":6,\"49\":2,\"157\":3,\"159\":3,\"160\":5,\"161\":4,\"162\":2,\"163\":5,\"164\":4}}],[\"tuple\",{\"0\":{\"45\":1,\"156\":1},\"1\":{\"46\":2,\"157\":1,\"159\":1,\"161\":1,\"163\":1,\"164\":1}}],[\"t\",{\"0\":{\"183\":1},\"1\":{\"38\":4,\"40\":2,\"43\":2,\"46\":2,\"49\":2,\"52\":2,\"111\":1,\"132\":2,\"149\":6,\"150\":6,\"151\":3,\"152\":3,\"153\":12}}],[\"traceback\",{\"1\":{\"91\":1,\"105\":1,\"110\":1,\"115\":1,\"132\":1,\"137\":1,\"159\":1}}],[\"try\",{\"1\":{\"31\":1}}],[\"true则列表降序排列\",{\"1\":{\"145\":1}}],[\"true\",{\"1\":{\"31\":1,\"43\":2,\"54\":2,\"87\":2,\"88\":1,\"92\":1,\"93\":1,\"94\":3,\"95\":2,\"96\":2,\"97\":2,\"132\":2,\"183\":2}}],[\"together\",{\"1\":{\"184\":2,\"185\":2}}],[\"topics\",{\"1\":{\"183\":1}}],[\"tour\",{\"1\":{\"176\":1}}],[\"total\",{\"1\":{\"173\":1,\"174\":5,\"176\":6,\"184\":3,\"185\":8}}],[\"to\",{\"0\":{\"35\":1},\"1\":{\"31\":1,\"67\":1,\"105\":4,\"106\":20,\"107\":2,\"129\":4,\"132\":1,\"171\":2,\"173\":1,\"175\":3,\"177\":1,\"181\":3,\"183\":4,\"184\":1}}],[\"但凡想要修改元组\",{\"1\":{\"159\":1}}],[\"但不是我们想要的\",{\"1\":{\"115\":1}}],[\"但不能以数字开头\",{\"1\":{\"7\":1}}],[\"但字符串加法存在问题\",{\"1\":{\"105\":1}}],[\"但实际是单行\",{\"1\":{\"72\":1}}],[\"但是目前不涉及\",{\"1\":{\"165\":1}}],[\"但是有一种情况下是不会互相影响\",{\"1\":{\"153\":1}}],[\"但是有一个方法可以间接实现看似多行文本\",{\"1\":{\"72\":1}}],[\"但是浅拷贝的时候\",{\"1\":{\"153\":1}}],[\"但是会同时影响\",{\"1\":{\"149\":1}}],[\"但是在之前的代码中\",{\"1\":{\"115\":1}}],[\"但是为了让你们更好理解原理\",{\"1\":{\"115\":1}}],[\"但是上面的代码\",{\"1\":{\"114\":1}}],[\"但是很繁琐\",{\"1\":{\"105\":1}}],[\"但是本身还是一行\",{\"1\":{\"72\":1}}],[\"但是英文当中可以缩写如下\",{\"1\":{\"72\":1}}],[\"但是不能修改输出\",{\"1\":{\"53\":1}}],[\"但是没必要\",{\"1\":{\"47\":1}}],[\"但可以用下划线\",{\"1\":{\"31\":1}}],[\"但\",{\"1\":{\"7\":1}}],[\"但还是简单介绍一下我～～\",{\"1\":{\"1\":1}}],[\"58\",{\"1\":{\"178\":1}}],[\"57\",{\"1\":{\"115\":2}}],[\"56\",{\"1\":{\"115\":1}}],[\"55\",{\"1\":{\"115\":2}}],[\"54\",{\"1\":{\"115\":1}}],[\"53\",{\"1\":{\"115\":1}}],[\"52\",{\"1\":{\"115\":2}}],[\"51\",{\"1\":{\"115\":1,\"180\":1}}],[\"500次都是\",{\"1\":{\"53\":1}}],[\"50\",{\"1\":{\"7\":2,\"115\":1,\"178\":1}}],[\"5\",{\"0\":{\"13\":1,\"31\":1,\"47\":1,\"63\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":2,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"130\":1,\"153\":1,\"161\":1},\"1\":{\"7\":3,\"32\":1,\"58\":2,\"67\":1,\"81\":1,\"114\":2,\"118\":1,\"126\":2,\"127\":1,\"128\":3,\"129\":3,\"130\":2,\"132\":18,\"140\":2,\"142\":1,\"163\":3,\"164\":3,\"174\":1,\"176\":2,\"183\":4}}],[\"来配对这些列表的元素\",{\"1\":{\"165\":1}}],[\"来获取\",{\"1\":{\"143\":1}}],[\"来跟踪并且知道\",{\"1\":{\"47\":1}}],[\"来存放数据并且说这是信封\",{\"1\":{\"20\":1}}],[\"来创建一个包含字符串\",{\"1\":{\"7\":1}}],[\"来创建一个值为\",{\"1\":{\"7\":1}}],[\"来打印\",{\"1\":{\"7\":2}}],[\"来打印这两个变量的值\",{\"1\":{\"7\":1}}],[\"来打印变量\",{\"1\":{\"7\":1}}],[\"成为一个\",{\"1\":{\"7\":1}}],[\"关键字\",{\"1\":{\"7\":1}}],[\"关键字用于打印一个变量的值\",{\"1\":{\"7\":1}}],[\"关于我的爱好\",{\"1\":{\"1\":1}}],[\"关于我\",{\"0\":{\"0\":1}}],[\"填空题\",{\"0\":{\"7\":1}}],[\"zipped现在是一个包含元组的迭代器\",{\"1\":{\"165\":1}}],[\"zipped\",{\"1\":{\"165\":10}}],[\"zip\",{\"0\":{\"165\":1},\"1\":{\"165\":6}}],[\"z\",{\"1\":{\"6\":2,\"14\":4}}],[\"year\",{\"1\":{\"171\":6,\"172\":4}}],[\"y指向的是同一个列表\",{\"1\":{\"149\":1}}],[\"you\",{\"0\":{\"169\":1,\"170\":1},\"1\":{\"129\":4,\"132\":1,\"171\":1,\"183\":1}}],[\"your\",{\"1\":{\"114\":4,\"169\":3,\"170\":4,\"171\":1,\"173\":1,\"175\":2,\"183\":17}}],[\"ydn\",{\"1\":{\"72\":2}}],[\"yield\",{\"1\":{\"31\":1}}],[\"y\",{\"1\":{\"6\":5,\"14\":6,\"32\":4,\"65\":6,\"132\":1,\"149\":7,\"150\":5,\"151\":9,\"152\":10,\"153\":27}}],[\"x的时候\",{\"1\":{\"149\":1}}],[\"x\",{\"1\":{\"6\":5,\"14\":6,\"21\":7,\"32\":10,\"65\":6,\"149\":9,\"150\":5,\"151\":17,\"152\":16,\"153\":26}}],[\"✅\",{\"1\":{\"6\":1}}],[\"和空白后的\",{\"1\":{\"98\":2}}],[\"和81\",{\"1\":{\"60\":1}}],[\"和62\",{\"1\":{\"60\":1}}],[\"和19\",{\"1\":{\"60\":1}}],[\"和sep可以同时使用\",{\"0\":{\"26\":1}}],[\"和\",{\"0\":{\"12\":1,\"109\":1},\"1\":{\"6\":1,\"7\":2,\"32\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"109\":1}}],[\"和旅行\",{\"1\":{\"1\":1}}],[\"使列表内的元素从小到大排序\",{\"1\":{\"145\":1}}],[\"使得输出的结果是\",{\"1\":{\"12\":1}}],[\"使用sorted\",{\"0\":{\"164\":1}}],[\"使用小括号创建\",{\"1\":{\"157\":1}}],[\"使用深拷贝需要导入库\",{\"1\":{\"152\":1}}],[\"使用len\",{\"1\":{\"131\":1}}],[\"使用输入提示\",{\"1\":{\"114\":2}}],[\"使用input\",{\"1\":{\"114\":1}}],[\"使用双引号\",{\"1\":{\"72\":1}}],[\"使用单引号\",{\"1\":{\"72\":1}}],[\"使用一次\",{\"1\":{\"13\":1}}],[\"使用\",{\"0\":{\"12\":1},\"1\":{\"10\":1,\"11\":1,\"12\":1,\"14\":1,\"23\":1}}],[\"使用参数\",{\"1\":{\"6\":4}}],[\"使\",{\"1\":{\"7\":1}}],[\"使代码更加规范\",{\"1\":{\"5\":1}}],[\"应该如何操作\",{\"1\":{\"6\":1}}],[\"应该怎么做\",{\"1\":{\"5\":2}}],[\"用来获取变量的物理地址\",{\"1\":{\"149\":1,\"150\":1,\"151\":1,\"152\":1,\"153\":1}}],[\"用于将多个可迭代对象\",{\"1\":{\"165\":1}}],[\"用于在列表的指定位置插入一个元素\",{\"1\":{\"130\":1}}],[\"用于算术计算\",{\"1\":{\"59\":1}}],[\"用户如何实现\",{\"1\":{\"114\":1}}],[\"用户日志📔\",{\"1\":{\"47\":1}}],[\"用列表有点浪费资源了\",{\"1\":{\"47\":1}}],[\"用列表可以吗\",{\"1\":{\"47\":1}}],[\"用\",{\"1\":{\"6\":1,\"143\":1}}],[\"确定性\",{\"1\":{\"53\":1}}],[\"确定输出的顺序\",{\"1\":{\"6\":1}}],[\"确定是否结束程序\",{\"1\":{\"6\":1}}],[\"each\",{\"1\":{\"184\":1}}],[\"either\",{\"1\":{\"183\":1}}],[\"equivalent\",{\"1\":{\"175\":1}}],[\"equal\",{\"1\":{\"67\":1,\"171\":1,\"181\":2}}],[\"estimated\",{\"1\":{\"171\":2}}],[\"estimates\",{\"1\":{\"171\":1}}],[\"emigration\",{\"1\":{\"171\":1,\"172\":2}}],[\"editing\",{\"0\":{\"188\":1},\"1\":{\"132\":23},\"2\":{\"194\":1}}],[\"experience\",{\"1\":{\"183\":1}}],[\"exactly\",{\"1\":{\"169\":1,\"171\":2,\"173\":1,\"175\":1}}],[\"example\",{\"1\":{\"169\":1,\"173\":1,\"175\":1,\"178\":1,\"181\":1,\"184\":1}}],[\"execution\",{\"1\":{\"169\":1,\"171\":1,\"178\":1,\"181\":1,\"184\":1}}],[\"exercises\",{\"0\":{\"168\":1}}],[\"exercise\",{\"0\":{\"118\":1}}],[\"extend\",{\"0\":{\"135\":1},\"1\":{\"135\":1}}],[\"except\",{\"1\":{\"31\":1}}],[\"every\",{\"1\":{\"171\":4}}],[\"everyone\",{\"1\":{\"72\":1,\"73\":1}}],[\"even\",{\"1\":{\"118\":3}}],[\"eval\",{\"1\":{\"115\":19}}],[\"e\",{\"1\":{\"104\":3,\"122\":1,\"132\":3,\"171\":1}}],[\"eol\",{\"1\":{\"72\":1}}],[\"eg\",{\"1\":{\"44\":1,\"46\":1}}],[\"element\",{\"1\":{\"130\":3}}],[\"else\",{\"1\":{\"31\":1,\"67\":1}}],[\"elif\",{\"1\":{\"31\":1,\"67\":1}}],[\"enter\",{\"1\":{\"31\":1,\"67\":2,\"114\":2,\"129\":4,\"169\":2,\"170\":2,\"171\":2,\"172\":2,\"173\":2,\"174\":2,\"175\":2,\"176\":2,\"178\":2,\"180\":4,\"181\":2,\"182\":4,\"184\":6,\"185\":12}}],[\"endswith\",{\"0\":{\"88\":1},\"1\":{\"88\":2}}],[\"end=\",{\"1\":{\"25\":2}}],[\"end修改print输出结尾方式\",{\"0\":{\"25\":1}}],[\"end\",{\"0\":{\"12\":1,\"26\":1},\"1\":{\"5\":3,\"6\":8,\"26\":1,\"76\":2,\"77\":4,\"112\":1,\"183\":1}}],[\"echo\",{\"1\":{\"6\":1}}],[\"day\",{\"1\":{\"184\":1}}],[\"days\",{\"1\":{\"171\":1,\"184\":5,\"185\":8}}],[\"dancing\",{\"1\":{\"13\":1}}],[\"don\",{\"0\":{\"183\":1}}],[\"dollar\",{\"1\":{\"173\":1,\"174\":2}}],[\"dollars\",{\"1\":{\"173\":1,\"174\":3,\"175\":3,\"176\":7}}],[\"does\",{\"1\":{\"110\":1,\"159\":1}}],[\"dofference\",{\"1\":{\"64\":1}}],[\"display\",{\"1\":{\"175\":1}}],[\"dime\",{\"0\":{\"175\":1,\"176\":1}}],[\"dimes\",{\"1\":{\"173\":2,\"174\":2,\"175\":3,\"176\":5}}],[\"division\",{\"1\":{\"65\":3}}],[\"divide\",{\"1\":{\"6\":1}}],[\"difference\",{\"1\":{\"64\":4}}],[\"dict\",{\"0\":{\"48\":1},\"1\":{\"49\":2,\"115\":1}}],[\"determines\",{\"1\":{\"183\":1}}],[\"development\",{\"1\":{\"183\":1}}],[\"death\",{\"1\":{\"171\":2,\"172\":2}}],[\"deepcopy\",{\"0\":{\"152\":1},\"1\":{\"152\":2}}],[\"destroy\",{\"1\":{\"32\":1}}],[\"defined\",{\"1\":{\"115\":1,\"137\":1}}],[\"def\",{\"1\":{\"31\":1,\"32\":1,\"183\":1}}],[\"del需要指定列表中要删除的单个元素或者多个元素\",{\"1\":{\"137\":1}}],[\"delete\",{\"1\":{\"6\":1,\"32\":1}}],[\"del\",{\"0\":{\"137\":1},\"1\":{\"6\":1,\"31\":1,\"32\":2,\"137\":2}}],[\"drop\",{\"1\":{\"6\":1}}],[\"d\",{\"1\":{\"6\":10,\"49\":6,\"50\":1,\"104\":1,\"108\":7,\"111\":1}}],[\"或许不是按我说的实现\",{\"1\":{\"115\":1}}],[\"或者一个错误信息字符串\",{\"1\":{\"60\":1}}],[\"或者其中某一次\",{\"1\":{\"53\":1}}],[\"或\",{\"1\":{\"6\":1}}],[\"数字大小控制步长\",{\"1\":{\"79\":1}}],[\"数字的乘法和除法\",{\"0\":{\"65\":1}}],[\"数字变换\",{\"0\":{\"60\":1}}],[\"数字\",{\"1\":{\"50\":1,\"114\":1}}],[\"数字型的特点\",{\"0\":{\"58\":1}}],[\"数字型\",{\"0\":{\"37\":1},\"1\":{\"53\":1}}],[\"数字不可以开头\",{\"1\":{\"31\":1}}],[\"数字和特殊字符组成的特殊序列\",{\"1\":{\"71\":1}}],[\"数字和与差\",{\"0\":{\"64\":1}}],[\"数字和\",{\"1\":{\"31\":1}}],[\"数字和下划线\",{\"1\":{\"7\":1}}],[\"数字和下划线组成\",{\"1\":{\"6\":1}}],[\"数据类型\",{\"0\":{\"36\":1}}],[\"数据\",{\"1\":{\"20\":1}}],[\"数学\",{\"1\":{\"1\":1}}],[\"选择题\",{\"0\":{\"6\":1}}],[\"帮助你更好地理解和巩固这些概念\",{\"1\":{\"5\":1}}],[\"以特定字符使字符串间隔\",{\"1\":{\"104\":1}}],[\"以特定字符进行分割\",{\"1\":{\"102\":1}}],[\"以下哪个表示删除变量\",{\"1\":{\"32\":1}}],[\"以下哪个表示全局变量\",{\"1\":{\"32\":1}}],[\"以下哪个是多变量赋值\",{\"1\":{\"32\":1}}],[\"以下哪个是有效的变量赋值\",{\"1\":{\"32\":1}}],[\"以下哪个是正确的\",{\"1\":{\"6\":1}}],[\"以下哪个变量名是有效的\",{\"1\":{\"32\":1}}],[\"以下哪个声明不是合法的变量名\",{\"1\":{\"6\":1}}],[\"以下哪个语句是错误的\",{\"1\":{\"6\":1}}],[\"以下哪种方法可以用来删除变量\",{\"1\":{\"6\":1}}],[\"以下哪一项是错误的\",{\"1\":{\"6\":1}}],[\"以及注释的使用等基础概念展开\",{\"1\":{\"5\":1}}],[\"以改变多个变量的输出间隔\",{\"1\":{\"5\":1}}],[\"便于理解\",{\"1\":{\"5\":1}}],[\"见名知意\",{\"1\":{\"5\":1}}],[\"增加代码的可读性\",{\"1\":{\"5\":1}}],[\"spend\",{\"1\":{\"183\":1}}],[\"split\",{\"0\":{\"102\":1},\"1\":{\"102\":10,\"103\":6}}],[\"squared\",{\"1\":{\"177\":1}}],[\"shows\",{\"1\":{\"175\":1}}],[\"shown\",{\"1\":{\"173\":1}}],[\"should\",{\"1\":{\"173\":1,\"175\":2}}],[\"shanghai\",{\"1\":{\"106\":6}}],[\"so\",{\"1\":{\"175\":1}}],[\"somebody\",{\"1\":{\"171\":1}}],[\"some\",{\"0\":{\"171\":2,\"172\":2},\"1\":{\"169\":1,\"183\":1,\"184\":1}}],[\"sorted\",{\"0\":{\"146\":1},\"1\":{\"164\":1}}],[\"sort\",{\"0\":{\"145\":1},\"1\":{\"118\":1,\"145\":3,\"163\":1,\"169\":1}}],[\"s2\",{\"1\":{\"112\":2}}],[\"s1\",{\"1\":{\"112\":9}}],[\"s=\",{\"1\":{\"111\":2}}],[\"sample\",{\"1\":{\"171\":1}}],[\"same\",{\"1\":{\"169\":1,\"171\":1}}],[\"sam\",{\"1\":{\"106\":8}}],[\"sad\",{\"1\":{\"43\":2}}],[\"suppose\",{\"1\":{\"184\":1}}],[\"support\",{\"1\":{\"110\":1,\"159\":1}}],[\"super\",{\"1\":{\"108\":2}}],[\"sudden\",{\"1\":{\"108\":2}}],[\"substring\",{\"1\":{\"91\":1}}],[\"sum\",{\"1\":{\"64\":5}}],[\"ssendivivevre\",{\"1\":{\"80\":1}}],[\"ssendivivevrev\",{\"1\":{\"79\":1,\"81\":1}}],[\"scanning\",{\"1\":{\"72\":1}}],[\"syntax\",{\"1\":{\"72\":1}}],[\"syntaxerror\",{\"1\":{\"72\":2}}],[\"semi\",{\"1\":{\"184\":4,\"185\":6}}],[\"series\",{\"1\":{\"183\":1}}],[\"sentence\",{\"1\":{\"169\":1}}],[\"sequence\",{\"0\":{\"141\":1}}],[\"select\",{\"1\":{\"75\":6,\"76\":7,\"77\":14,\"79\":2,\"80\":4,\"81\":4}}],[\"seconds\",{\"1\":{\"171\":3,\"172\":5}}],[\"second\",{\"1\":{\"67\":1}}],[\"secret\",{\"1\":{\"32\":1}}],[\"set1\",{\"1\":{\"52\":6,\"53\":4}}],[\"set\",{\"0\":{\"51\":1},\"1\":{\"52\":2,\"115\":1}}],[\"separate\",{\"1\":{\"175\":1,\"176\":2,\"181\":1}}],[\"sep修改多个变量同时输出的间隔\",{\"0\":{\"24\":1}}],[\"sep=\",{\"1\":{\"5\":1,\"24\":1,\"102\":1}}],[\"sep\",{\"0\":{\"12\":1},\"1\":{\"5\":2,\"6\":6,\"12\":1,\"13\":1,\"23\":1,\"26\":1,\"77\":2,\"102\":2,\"103\":2}}],[\"s\",{\"1\":{\"31\":1,\"75\":1,\"88\":1,\"104\":2,\"108\":13,\"110\":5,\"111\":15,\"114\":2,\"115\":25,\"169\":1,\"171\":2,\"173\":2,\"174\":4,\"177\":2,\"183\":1}}],[\"still\",{\"1\":{\"169\":1,\"171\":1}}],[\"startswith\",{\"0\":{\"87\":1},\"1\":{\"87\":2}}],[\"start\",{\"1\":{\"76\":1,\"77\":2,\"183\":1}}],[\"student2\",{\"1\":{\"122\":1}}],[\"student1\",{\"1\":{\"122\":1}}],[\"studentcoder\",{\"1\":{\"72\":2}}],[\"student\",{\"1\":{\"13\":1}}],[\"str2\",{\"1\":{\"105\":2}}],[\"str1\",{\"1\":{\"105\":2}}],[\"strip\",{\"0\":{\"98\":1},\"1\":{\"98\":6}}],[\"string1\",{\"1\":{\"87\":2}}],[\"string\",{\"0\":{\"70\":1,\"80\":1},\"1\":{\"5\":1,\"40\":4,\"72\":13,\"75\":6,\"76\":6,\"77\":19,\"79\":2,\"80\":5,\"81\":4,\"83\":4,\"84\":4,\"85\":4,\"86\":4,\"87\":5,\"88\":7,\"89\":8,\"90\":12,\"91\":10,\"92\":4,\"93\":4,\"94\":6,\"95\":6,\"96\":6,\"97\":6,\"98\":10,\"99\":15,\"100\":15,\"101\":15,\"102\":15,\"103\":15,\"104\":5,\"105\":7,\"106\":30,\"107\":4,\"108\":20,\"115\":7}}],[\"str\",{\"0\":{\"39\":1},\"1\":{\"7\":4,\"40\":2,\"105\":2,\"110\":1,\"114\":4,\"115\":1}}],[\"一行显示不完\",{\"1\":{\"72\":1}}],[\"一行代码\",{\"1\":{\"5\":1}}],[\"一旦赋值就不能改变\",{\"1\":{\"32\":1}}],[\"一杯可乐\",{\"1\":{\"30\":1}}],[\"一个特例\",{\"0\":{\"153\":1}}],[\"一个是要插入这个位置的值\",{\"1\":{\"129\":1}}],[\"一个是要插入的位置\",{\"1\":{\"129\":1}}],[\"一个整数\",{\"1\":{\"60\":1}}],[\"一个变量可以同时被赋予多个值\",{\"1\":{\"32\":1}}],[\"一个变量可以存储什么样的数据\",{\"1\":{\"5\":1}}],[\"一个例子\",{\"0\":{\"20\":1}}],[\"是什么类型\",{\"1\":{\"161\":1}}],[\"是会报错\",{\"1\":{\"159\":1}}],[\"是因为在进行y\",{\"1\":{\"149\":1}}],[\"是从数字1开始的\",{\"1\":{\"73\":1}}],[\"是第一个原因\",{\"1\":{\"72\":1}}],[\"是由一系列的key和value组成\",{\"1\":{\"50\":1}}],[\"是由广大人民群众投票选举出来的\",{\"1\":{\"21\":1}}],[\"是否有空间\",{\"1\":{\"47\":1}}],[\"是否有位置\",{\"1\":{\"47\":2}}],[\"是统计一个用户在一周之内看了哪些用户的帖子\",{\"1\":{\"47\":1}}],[\"是在代码运行的过程中\",{\"1\":{\"46\":1}}],[\"是python中的特殊类型\",{\"1\":{\"32\":1}}],[\"是同一个变量\",{\"1\":{\"32\":1}}],[\"是不是会一直变动\",{\"1\":{\"47\":1}}],[\"是不是在我们当前所处的空间当中开辟空间\",{\"1\":{\"20\":1}}],[\"是不是有大小了呢\",{\"1\":{\"20\":1}}],[\"是不是变化了\",{\"1\":{\"20\":1}}],[\"是不是鼓起来了\",{\"1\":{\"20\":1}}],[\"是有效的\",{\"1\":{\"7\":1}}],[\"是一个迭代器地址\",{\"1\":{\"165\":1}}],[\"是一个\",{\"1\":{\"165\":1}}],[\"是一个内置函数\",{\"1\":{\"165\":1}}],[\"是一个列表的基本方法\",{\"1\":{\"130\":1}}],[\"是一个无效的变量名\",{\"1\":{\"7\":1}}],[\"是一个空格\",{\"1\":{\"5\":1}}],[\"是这个博客的主人\",{\"1\":{\"1\":1}}],[\"nickles\",{\"1\":{\"176\":2}}],[\"nickle\",{\"1\":{\"176\":2}}],[\"nickels\",{\"1\":{\"173\":2,\"174\":2,\"175\":2}}],[\"nice\",{\"1\":{\"132\":1}}],[\"nad\",{\"1\":{\"176\":1}}],[\"naturally\",{\"1\":{\"171\":1}}],[\"nameerror\",{\"1\":{\"32\":1,\"115\":2,\"137\":1}}],[\"name2\",{\"1\":{\"21\":2}}],[\"name1\",{\"1\":{\"21\":5}}],[\"name\",{\"1\":{\"13\":3,\"31\":1,\"49\":2,\"72\":1,\"106\":5,\"107\":2,\"114\":4,\"115\":1,\"137\":1,\"169\":3,\"170\":2}}],[\"near\",{\"1\":{\"171\":1}}],[\"need\",{\"1\":{\"169\":1,\"171\":1}}],[\"new\",{\"1\":{\"87\":4,\"88\":4,\"89\":4,\"90\":6,\"91\":5,\"106\":8,\"108\":8,\"110\":2,\"162\":2,\"163\":5,\"171\":2,\"172\":6}}],[\"newmeric\",{\"0\":{\"57\":1}}],[\"nvividness\",{\"1\":{\"111\":5}}],[\"nthis\",{\"1\":{\"111\":1}}],[\"nforthis\",{\"1\":{\"111\":2}}],[\"num\",{\"1\":{\"38\":12,\"40\":2,\"60\":10,\"115\":1,\"165\":2,\"183\":3}}],[\"numbers2\",{\"1\":{\"140\":2}}],[\"numbers1\",{\"1\":{\"140\":2}}],[\"numbers\",{\"1\":{\"118\":7,\"126\":2,\"127\":2,\"128\":7,\"129\":4,\"130\":3,\"132\":21,\"134\":3,\"135\":3,\"137\":8,\"138\":5,\"139\":3,\"142\":2,\"143\":2,\"145\":6}}],[\"number\",{\"1\":{\"7\":2,\"10\":8,\"72\":1,\"129\":4,\"165\":4,\"172\":5,\"173\":6,\"174\":10,\"175\":4,\"177\":1,\"184\":7,\"185\":12}}],[\"note\",{\"1\":{\"181\":1,\"183\":1,\"184\":1}}],[\"notes\",{\"2\":{\"34\":1,\"56\":1,\"69\":1,\"117\":1,\"120\":1,\"155\":1,\"167\":1}}],[\"notebook\",{\"2\":{\"33\":1,\"55\":1,\"68\":1,\"116\":1,\"119\":1,\"154\":1,\"166\":1}}],[\"not\",{\"1\":{\"31\":1,\"91\":1,\"105\":1,\"110\":1,\"115\":1,\"137\":1,\"159\":1,\"169\":1,\"171\":1}}],[\"nonlocal\",{\"1\":{\"31\":1}}],[\"none\",{\"1\":{\"31\":1,\"32\":1}}],[\"n\",{\"1\":{\"5\":2,\"6\":1,\"25\":3,\"31\":3,\"66\":8,\"104\":1,\"105\":2,\"111\":1,\"114\":3,\"132\":1,\"149\":6,\"150\":6,\"151\":9,\"152\":9,\"153\":21}}],[\"作为分隔符\",{\"1\":{\"6\":1}}],[\"作用是什么\",{\"1\":{\"5\":1}}],[\"作者\",{\"2\":{\"3\":1}}],[\"的相应元素配对并返回一个元组的迭代器\",{\"1\":{\"165\":1}}],[\"的列表\",{\"1\":{\"149\":1}}],[\"的列表内容\",{\"1\":{\"32\":1}}],[\"的功能\",{\"1\":{\"115\":1}}],[\"的特点后\",{\"1\":{\"114\":1}}],[\"的数值\",{\"1\":{\"80\":1}}],[\"的结果\",{\"1\":{\"64\":1}}],[\"的内容也会改变\",{\"1\":{\"32\":1}}],[\"的组合\",{\"1\":{\"31\":1}}],[\"的值也会改变\",{\"1\":{\"32\":1}}],[\"的值也会变为10\",{\"1\":{\"7\":1}}],[\"的值改为30\",{\"1\":{\"14\":1}}],[\"的值改为\",{\"1\":{\"11\":1,\"14\":1}}],[\"的值\",{\"1\":{\"10\":1,\"11\":1,\"14\":1,\"32\":1}}],[\"的变量\",{\"1\":{\"7\":2}}],[\"的作用是改变输出时的结尾结束方式\",{\"1\":{\"5\":1}}],[\"的\",{\"1\":{\"5\":1,\"66\":1}}],[\"hour\",{\"1\":{\"184\":1}}],[\"hours\",{\"1\":{\"184\":6,\"185\":8}}],[\"homework\",{\"1\":{\"132\":1,\"137\":1,\"159\":1}}],[\"hobby\",{\"1\":{\"13\":3}}],[\"h\",{\"1\":{\"87\":1,\"122\":1}}],[\"huangjiabao\",{\"1\":{\"72\":2}}],[\"has\",{\"1\":{\"183\":3,\"184\":6,\"185\":12}}],[\"hatter\",{\"0\":{\"175\":1,\"176\":1}}],[\"have\",{\"0\":{\"171\":1,\"172\":1},\"1\":{\"183\":1}}],[\"hanmeimei\",{\"1\":{\"122\":1}}],[\"haha\",{\"1\":{\"108\":2}}],[\"hahaha\",{\"1\":{\"5\":1}}],[\"happy\",{\"1\":{\"43\":2}}],[\"hint\",{\"1\":{\"175\":1}}],[\"hidden\",{\"1\":{\"32\":1}}],[\"hi\",{\"1\":{\"31\":1,\"105\":3,\"106\":12,\"107\":2,\"108\":2}}],[\"height\",{\"1\":{\"177\":3,\"178\":2,\"180\":2,\"181\":2,\"182\":2}}],[\"he\",{\"1\":{\"87\":1}}],[\"here\",{\"1\":{\"31\":1,\"105\":3,\"106\":6}}],[\"help\",{\"1\":{\"31\":2}}],[\"hello$$\",{\"1\":{\"95\":1,\"96\":1,\"97\":1}}],[\"helloa\",{\"1\":{\"95\":1,\"96\":1}}],[\"hello是下标0\",{\"1\":{\"44\":1,\"46\":1}}],[\"hello\",{\"0\":{\"169\":1,\"170\":1},\"1\":{\"5\":2,\"6\":5,\"7\":3,\"9\":2,\"25\":2,\"26\":2,\"31\":1,\"32\":3,\"44\":1,\"46\":3,\"52\":2,\"53\":2,\"72\":2,\"73\":1,\"85\":2,\"86\":2,\"87\":1,\"88\":1,\"95\":1,\"96\":1,\"102\":9,\"103\":9,\"106\":8,\"108\":2,\"114\":3,\"115\":2,\"122\":1,\"139\":2}}],[\"hhhhhh\",{\"1\":{\"24\":1}}],[\"参数指定\",{\"1\":{\"106\":1}}],[\"参数用于什么\",{\"1\":{\"6\":1}}],[\"参数\",{\"0\":{\"12\":1},\"1\":{\"5\":1}}],[\"函数就非常有用\",{\"1\":{\"165\":1}}],[\"函数默认删除列表中的最后一个元素\",{\"1\":{\"138\":1}}],[\"函数里面支持我们写入字符串进行提示\",{\"1\":{\"114\":1}}],[\"函数分别打印\",{\"1\":{\"14\":1}}],[\"函数分别打印这两个变量的值\",{\"1\":{\"10\":1}}],[\"函数将这四个变量的值同时打印出来\",{\"1\":{\"13\":1}}],[\"函数将此变量的值打印出来\",{\"1\":{\"9\":1}}],[\"函数打印这三个变量\",{\"1\":{\"12\":1}}],[\"函数打印变量\",{\"1\":{\"11\":1}}],[\"函数打印字符串\",{\"1\":{\"6\":1}}],[\"函数的使用方式是正确的\",{\"1\":{\"6\":1}}],[\"函数中\",{\"1\":{\"6\":1}}],[\"函数中的\",{\"1\":{\"5\":1,\"6\":1}}],[\"函数同时输出多个变量时\",{\"1\":{\"5\":1}}],[\"函数是用来做什么的\",{\"1\":{\"5\":1}}],[\"这是你想要插入列表的元素\",{\"1\":{\"130\":1}}],[\"这是一行注释\",{\"1\":{\"5\":1}}],[\"这样我们就可以直接问仓库管理员\",{\"1\":{\"47\":1}}],[\"这里的数据类型\",{\"1\":{\"46\":1}}],[\"这里说的任意数据类型\",{\"1\":{\"44\":1}}],[\"这个地方\",{\"1\":{\"115\":1}}],[\"这个时候有可能会想到使用字符串的加法\",{\"1\":{\"105\":1}}],[\"这个时候作为课代表的你需要怎么办\",{\"1\":{\"20\":1}}],[\"这个名字来源于一首诗中的哲学典故\",{\"1\":{\"1\":1}}],[\"这些问题主要围绕\",{\"1\":{\"5\":1}}],[\"怎么写注释\",{\"1\":{\"5\":1}}],[\"如列表\",{\"1\":{\"165\":1}}],[\"如需改变字符串中的元素\",{\"1\":{\"110\":1}}],[\"如原数字为\",{\"1\":{\"60\":1}}],[\"如整数或字符串\",{\"1\":{\"32\":1}}],[\"如果这个数字小于或等于计算出的概率\",{\"1\":{\"183\":1}}],[\"如果你有两个或更多的列表\",{\"1\":{\"165\":1}}],[\"如果你运行集合很多次\",{\"1\":{\"53\":1}}],[\"如果元组只有一个元素\",{\"1\":{\"161\":2}}],[\"如果里面指定reverse\",{\"1\":{\"145\":1}}],[\"如果不指定删除的元素\",{\"1\":{\"137\":1}}],[\"如果不是从\",{\"1\":{\"77\":1}}],[\"如果指定的索引超出了列表的当前长度\",{\"1\":{\"130\":1}}],[\"如果指定参数\",{\"1\":{\"98\":1,\"99\":1,\"100\":1}}],[\"如果更复杂的字符就不合适了\",{\"1\":{\"105\":1}}],[\"如果传入参数\",{\"1\":{\"102\":1}}],[\"如果只打\",{\"1\":{\"98\":1}}],[\"如果查询的单词不存在\",{\"1\":{\"91\":1}}],[\"如果查询的字符或单词不存在\",{\"1\":{\"90\":1}}],[\"如果是查找单词\",{\"1\":{\"90\":1,\"91\":1}}],[\"如果改成\",{\"1\":{\"79\":1}}],[\"如果其中有一个元素是浮点数的话\",{\"1\":{\"58\":1}}],[\"如果存储的数据和数量不变\",{\"1\":{\"47\":1}}],[\"如果存储的数据或数量是可变的\",{\"1\":{\"47\":1}}],[\"如果\",{\"1\":{\"7\":1}}],[\"如果我有一个浮点型变量\",{\"1\":{\"7\":1}}],[\"如果我有一个整数变量\",{\"1\":{\"7\":1}}],[\"如果我想在不换行的情况下输出两个变量\",{\"1\":{\"6\":1}}],[\"如果我想在\",{\"1\":{\"6\":1}}],[\"如果我们有两个变量\",{\"1\":{\"7\":1}}],[\"如果我们要覆盖一个变量的值\",{\"1\":{\"5\":1}}],[\"如果我们想要在一行中打印多个变量\",{\"1\":{\"5\":1}}],[\"如何解决呢\",{\"1\":{\"161\":1}}],[\"如何解决这个问题呢\",{\"1\":{\"114\":1}}],[\"如何解决\",{\"1\":{\"114\":1,\"149\":1}}],[\"如何解决上面描述的问题呢\",{\"1\":{\"72\":1}}],[\"如何获取字符串长度\",{\"1\":{\"73\":1}}],[\"如何创建字符串\",{\"1\":{\"72\":1}}],[\"如何创建变量\",{\"0\":{\"21\":1}}],[\"如何交换哥哥与弟弟杯中的果汁\",{\"1\":{\"30\":1}}],[\"如何使用\",{\"1\":{\"6\":1}}],[\"如何在\",{\"1\":{\"5\":3}}],[\"如\",{\"1\":{\"6\":1}}],[\"35\",{\"1\":{\"184\":1,\"185\":1}}],[\"37\",{\"1\":{\"173\":1,\"175\":2,\"176\":2}}],[\"3600\",{\"1\":{\"172\":1}}],[\"365\",{\"1\":{\"171\":1,\"172\":1}}],[\"382038453\",{\"1\":{\"171\":1,\"172\":1}}],[\"330109174\",{\"1\":{\"172\":1}}],[\"330\",{\"1\":{\"171\":1}}],[\"3f\",{\"1\":{\"106\":1,\"107\":1,\"108\":2,\"180\":1,\"182\":1}}],[\"39\",{\"1\":{\"72\":2}}],[\"31是下标1\",{\"1\":{\"44\":1,\"46\":1}}],[\"31\",{\"1\":{\"43\":4,\"44\":1,\"46\":1,\"72\":1}}],[\"3月的成绩抄写到单独的一张纸上\",{\"1\":{\"20\":1}}],[\"3月的成绩\",{\"1\":{\"20\":1}}],[\"30\",{\"1\":{\"14\":1,\"115\":2}}],[\"3\",{\"0\":{\"7\":1,\"11\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":2,\"26\":1,\"42\":1,\"43\":1,\"44\":1,\"60\":1,\"64\":1,\"65\":1,\"66\":2,\"67\":1,\"73\":1,\"77\":1,\"85\":1,\"108\":1,\"115\":2,\"126\":1,\"128\":1,\"139\":1,\"151\":1,\"159\":1},\"1\":{\"5\":2,\"12\":3,\"29\":1,\"32\":5,\"46\":4,\"49\":2,\"52\":2,\"53\":2,\"58\":4,\"59\":4,\"62\":3,\"65\":2,\"66\":1,\"75\":2,\"76\":1,\"77\":4,\"114\":3,\"115\":8,\"118\":1,\"125\":1,\"126\":2,\"127\":1,\"128\":3,\"129\":4,\"130\":3,\"132\":12,\"134\":4,\"135\":2,\"137\":3,\"138\":1,\"139\":2,\"140\":2,\"142\":3,\"143\":1,\"145\":3,\"151\":11,\"152\":11,\"153\":19,\"161\":9,\"162\":4,\"163\":3,\"164\":3,\"165\":6,\"174\":3,\"183\":2,\"184\":2,\"185\":2}}],[\"29\",{\"1\":{\"115\":2,\"169\":2}}],[\"28\",{\"1\":{\"115\":2}}],[\"27\",{\"1\":{\"115\":2}}],[\"25\",{\"1\":{\"115\":2,\"128\":2,\"171\":1,\"172\":1,\"174\":1,\"176\":3}}],[\"24\",{\"1\":{\"115\":2,\"128\":1,\"172\":1,\"184\":1,\"185\":2}}],[\"23\",{\"1\":{\"115\":1}}],[\"22\",{\"0\":{\"104\":1},\"1\":{\"128\":2}}],[\"2和6的和\",{\"1\":{\"60\":1}}],[\"26的反转\",{\"1\":{\"60\":1}}],[\"26\",{\"1\":{\"60\":1}}],[\"21\",{\"0\":{\"103\":1},\"1\":{\"60\":1,\"115\":2,\"128\":2}}],[\"2myvar\",{\"1\":{\"32\":1}}],[\"2月\",{\"1\":{\"20\":2}}],[\"2042\",{\"1\":{\"171\":2,\"172\":2}}],[\"2023\",{\"1\":{\"171\":2,\"172\":3}}],[\"20231231000556404\",{\"1\":{\"152\":1}}],[\"20231230235556480\",{\"1\":{\"151\":1}}],[\"20231230233914160\",{\"1\":{\"149\":1}}],[\"20231230091110993\",{\"1\":{\"141\":1}}],[\"20231230085025936\",{\"1\":{\"134\":1}}],[\"20231230083540506\",{\"1\":{\"132\":1}}],[\"20231230164639809\",{\"1\":{\"118\":1}}],[\"20231226084812892\",{\"1\":{\"127\":1}}],[\"20231226084414787\",{\"1\":{\"126\":1}}],[\"20231226083502602\",{\"1\":{\"124\":1}}],[\"20231225075451181\",{\"1\":{\"114\":1}}],[\"20231215083057643\",{\"1\":{\"81\":1}}],[\"20231215083113492\",{\"1\":{\"80\":1}}],[\"20231215074315872\",{\"1\":{\"72\":1}}],[\"20231215074000023\",{\"1\":{\"72\":1}}],[\"20231214083505664\",{\"1\":{\"71\":1}}],[\"20231212075658808\",{\"1\":{\"58\":1}}],[\"20231209234829891\",{\"1\":{\"44\":1}}],[\"20231209231442947\",{\"1\":{\"36\":1}}],[\"20240102084728982\",{\"1\":{\"158\":1}}],[\"201902\",{\"1\":{\"122\":1}}],[\"201901\",{\"1\":{\"122\":1}}],[\"200\",{\"1\":{\"107\":2}}],[\"20\",{\"0\":{\"102\":1},\"1\":{\"14\":2,\"114\":1,\"115\":2,\"128\":1,\"178\":1,\"183\":3,\"184\":1,\"185\":1}}],[\"2\",{\"0\":{\"6\":1,\"10\":1,\"20\":1,\"21\":1,\"24\":1,\"29\":1,\"39\":1,\"40\":1,\"41\":2,\"44\":1,\"50\":1,\"53\":1,\"59\":1,\"65\":1,\"72\":1,\"76\":1,\"80\":1,\"81\":1,\"84\":1,\"107\":1,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":1,\"135\":1,\"138\":1,\"146\":1,\"150\":1,\"158\":1,\"164\":1,\"193\":1},\"1\":{\"5\":4,\"12\":3,\"29\":1,\"31\":1,\"32\":5,\"44\":1,\"46\":5,\"49\":2,\"52\":6,\"53\":9,\"58\":8,\"59\":7,\"62\":5,\"64\":1,\"75\":1,\"76\":2,\"77\":6,\"89\":1,\"114\":3,\"115\":7,\"118\":3,\"126\":2,\"127\":3,\"128\":3,\"129\":5,\"130\":2,\"132\":15,\"134\":7,\"135\":4,\"137\":3,\"138\":3,\"139\":2,\"140\":2,\"142\":4,\"143\":1,\"145\":3,\"151\":7,\"152\":7,\"153\":2,\"160\":5,\"161\":4,\"162\":4,\"163\":3,\"164\":3,\"165\":6,\"170\":2,\"174\":5,\"175\":1,\"176\":1,\"180\":3,\"182\":3,\"183\":3,\"184\":1,\"185\":1}}],[\"currency\",{\"1\":{\"183\":1}}],[\"current\",{\"1\":{\"171\":2,\"183\":1}}],[\"certain\",{\"1\":{\"183\":1}}],[\"cent\",{\"1\":{\"173\":1,\"174\":2}}],[\"cents\",{\"1\":{\"173\":1,\"174\":5,\"175\":3,\"176\":12}}],[\"census\",{\"1\":{\"171\":2}}],[\"cell\",{\"1\":{\"115\":1}}],[\"cs\",{\"1\":{\"169\":1,\"170\":2}}],[\"chance\",{\"1\":{\"183\":4}}],[\"chances\",{\"1\":{\"183\":1}}],[\"change\",{\"1\":{\"171\":2}}],[\"children\",{\"1\":{\"151\":6,\"152\":6,\"153\":12}}],[\"cherry\",{\"1\":{\"6\":1}}],[\"camparison\",{\"1\":{\"183\":2}}],[\"categorize\",{\"1\":{\"177\":1}}],[\"calculation\",{\"1\":{\"177\":1}}],[\"calculator\",{\"0\":{\"177\":1,\"179\":1}}],[\"calculates\",{\"1\":{\"181\":1}}],[\"calculated\",{\"1\":{\"177\":1}}],[\"calculate\",{\"1\":{\"175\":1,\"184\":1}}],[\"call\",{\"1\":{\"91\":1,\"105\":1,\"110\":1,\"115\":1,\"132\":1,\"137\":1,\"159\":1}}],[\"can\",{\"1\":{\"105\":1,\"132\":1,\"171\":1,\"183\":1}}],[\"capitalize\",{\"0\":{\"85\":1},\"1\":{\"85\":3}}],[\"career\",{\"1\":{\"13\":2}}],[\"class02\",{\"1\":{\"122\":1}}],[\"class01\",{\"1\":{\"122\":1}}],[\"class\",{\"1\":{\"31\":1}}],[\"collective\",{\"0\":{\"184\":1,\"185\":1}}],[\"commonly\",{\"1\":{\"183\":1}}],[\"coins\",{\"1\":{\"173\":2,\"174\":2,\"175\":2}}],[\"could\",{\"1\":{\"169\":1,\"178\":1,\"181\":1,\"184\":1}}],[\"country\",{\"1\":{\"171\":1}}],[\"count\",{\"0\":{\"89\":1,\"142\":1},\"1\":{\"89\":2,\"142\":1}}],[\"contains\",{\"1\":{\"183\":8}}],[\"controversial\",{\"1\":{\"183\":1}}],[\"continue\",{\"1\":{\"31\":1}}],[\"converts\",{\"1\":{\"181\":1}}],[\"convenient\",{\"1\":{\"177\":1}}],[\"concatenate\",{\"1\":{\"105\":1}}],[\"condition\",{\"1\":{\"54\":3}}],[\"coke\",{\"1\":{\"30\":3}}],[\"copy实现的是浅拷贝\",{\"1\":{\"151\":1}}],[\"copy所存在的问题\",{\"0\":{\"151\":1}}],[\"copy\",{\"0\":{\"150\":1},\"1\":{\"10\":3,\"149\":1,\"150\":1,\"151\":1,\"152\":1,\"153\":2}}],[\"cindy\",{\"1\":{\"13\":1,\"49\":2,\"52\":2,\"53\":2,\"72\":2,\"105\":2,\"106\":8,\"107\":2,\"170\":2}}],[\"c\",{\"1\":{\"5\":8,\"6\":18,\"12\":3,\"23\":2,\"24\":2,\"25\":6,\"26\":2,\"28\":1,\"29\":2,\"32\":4,\"110\":2,\"111\":1,\"132\":1,\"165\":6}}],[\"c1\",{\"1\":{\"5\":1}}],[\"=int\",{\"1\":{\"183\":1}}],[\"=c\",{\"1\":{\"28\":1}}],[\"==\",{\"1\":{\"21\":1,\"62\":2,\"64\":2,\"65\":2,\"66\":2,\"67\":1}}],[\"=\",{\"0\":{\"145\":1},\"1\":{\"5\":19,\"6\":22,\"7\":10,\"9\":1,\"10\":2,\"11\":2,\"12\":2,\"13\":5,\"14\":5,\"21\":7,\"23\":3,\"24\":3,\"25\":9,\"26\":5,\"28\":2,\"29\":1,\"30\":14,\"31\":10,\"32\":18,\"38\":4,\"40\":2,\"43\":2,\"44\":1,\"46\":3,\"49\":2,\"50\":1,\"52\":2,\"53\":2,\"54\":1,\"59\":8,\"60\":1,\"62\":2,\"63\":23,\"64\":4,\"65\":2,\"66\":2,\"67\":2,\"72\":10,\"73\":1,\"75\":5,\"76\":6,\"77\":14,\"79\":2,\"80\":5,\"81\":4,\"83\":2,\"84\":2,\"85\":2,\"86\":2,\"87\":3,\"88\":3,\"89\":4,\"90\":6,\"91\":5,\"92\":4,\"93\":4,\"94\":6,\"95\":6,\"96\":6,\"97\":6,\"98\":4,\"99\":6,\"100\":6,\"101\":6,\"102\":6,\"103\":6,\"104\":2,\"105\":7,\"106\":19,\"107\":5,\"108\":12,\"110\":5,\"111\":9,\"112\":5,\"114\":5,\"115\":13,\"118\":3,\"122\":2,\"125\":1,\"126\":1,\"127\":1,\"128\":3,\"129\":5,\"130\":1,\"131\":1,\"132\":13,\"134\":2,\"135\":1,\"137\":2,\"138\":1,\"139\":1,\"140\":2,\"142\":1,\"143\":1,\"145\":3,\"147\":1,\"149\":5,\"150\":3,\"151\":4,\"152\":4,\"153\":4,\"157\":1,\"159\":3,\"160\":1,\"161\":6,\"162\":3,\"163\":4,\"164\":3,\"165\":9,\"170\":2,\"172\":7,\"174\":7,\"176\":7,\"177\":1,\"180\":3,\"182\":3,\"183\":8,\"185\":9}}],[\"based\",{\"1\":{\"177\":1}}],[\"banana\",{\"1\":{\"6\":1,\"11\":3}}],[\"broadly\",{\"1\":{\"177\":1}}],[\"break\",{\"1\":{\"31\":1}}],[\"bmi\",{\"0\":{\"177\":1,\"179\":1},\"1\":{\"177\":5,\"178\":2,\"180\":4,\"181\":2,\"182\":4}}],[\"by\",{\"1\":{\"175\":2}}],[\"believe\",{\"0\":{\"183\":1}}],[\"be\",{\"1\":{\"171\":2,\"172\":2,\"181\":1}}],[\"before\",{\"1\":{\"132\":12,\"134\":2}}],[\"birth\",{\"1\":{\"171\":2,\"172\":2}}],[\"but\",{\"1\":{\"169\":1,\"171\":2}}],[\"bvividness\",{\"1\":{\"111\":1}}],[\"bnri\",{\"1\":{\"77\":1}}],[\"box\",{\"1\":{\"183\":9}}],[\"boxes\",{\"1\":{\"183\":1}}],[\"both\",{\"1\":{\"181\":1,\"184\":3,\"185\":2}}],[\"bone\",{\"1\":{\"177\":1}}],[\"bones\",{\"1\":{\"43\":2}}],[\"body\",{\"1\":{\"177\":2}}],[\"born\",{\"1\":{\"111\":2}}],[\"bornfor\",{\"1\":{\"111\":1}}],[\"bornforthis\",{\"1\":{\"72\":4,\"75\":1,\"76\":2,\"77\":1,\"81\":1,\"83\":2,\"84\":2,\"89\":1,\"90\":3,\"91\":2,\"99\":9,\"100\":9,\"102\":9,\"103\":9,\"105\":1,\"114\":3}}],[\"bornff\",{\"1\":{\"111\":1}}],[\"borthis\",{\"1\":{\"111\":1}}],[\"bor\",{\"1\":{\"76\":1,\"111\":1}}],[\"boolean\",{\"1\":{\"95\":6,\"96\":6,\"97\":6}}],[\"bool\",{\"0\":{\"54\":1},\"1\":{\"54\":1}}],[\"b\",{\"0\":{\"181\":1,\"182\":1},\"1\":{\"5\":10,\"6\":22,\"7\":4,\"12\":3,\"23\":2,\"24\":2,\"25\":6,\"26\":2,\"28\":2,\"29\":2,\"32\":4,\"63\":12,\"64\":7,\"75\":1,\"90\":1,\"111\":2,\"114\":1,\"115\":2,\"132\":2,\"165\":6,\"181\":1}}],[\"article\",{\"0\":{\"188\":1},\"2\":{\"194\":1}}],[\"are\",{\"1\":{\"171\":3,\"175\":2,\"176\":2,\"183\":3,\"184\":1}}],[\"a6\",{\"1\":{\"185\":4}}],[\"a5\",{\"1\":{\"185\":3}}],[\"a4\",{\"1\":{\"185\":1}}],[\"a3\",{\"1\":{\"185\":3}}],[\"a2\",{\"1\":{\"185\":3}}],[\"a1\",{\"1\":{\"185\":2}}],[\"a1b2c3\",{\"1\":{\"31\":1}}],[\"although\",{\"1\":{\"177\":1}}],[\"always\",{\"1\":{\"171\":3}}],[\"about\",{\"1\":{\"171\":1}}],[\"at\",{\"1\":{\"165\":2,\"183\":7}}],[\"approximations\",{\"1\":{\"171\":1}}],[\"approximate\",{\"1\":{\"171\":1}}],[\"append\",{\"0\":{\"134\":1},\"1\":{\"134\":2}}],[\"apple\",{\"1\":{\"11\":3,\"89\":5}}],[\"after\",{\"1\":{\"132\":11,\"134\":2,\"153\":4}}],[\"aervevividness\",{\"1\":{\"110\":1}}],[\"aika\",{\"1\":{\"169\":2}}],[\"ai\",{\"1\":{\"101\":1}}],[\"ai悦创凡是你不能清晰写下来的东西\",{\"1\":{\"72\":1}}],[\"ai悦创\",{\"1\":{\"72\":12}}],[\"amount\",{\"1\":{\"175\":5,\"176\":2}}],[\"am\",{\"1\":{\"85\":2,\"86\":2,\"87\":1,\"88\":1}}],[\"await\",{\"1\":{\"31\":1}}],[\"an\",{\"1\":{\"132\":1,\"169\":1,\"171\":4,\"175\":1,\"178\":1,\"181\":1,\"183\":2,\"184\":2}}],[\"and\",{\"0\":{\"171\":1,\"172\":1},\"1\":{\"31\":1,\"169\":3,\"171\":4,\"173\":5,\"174\":2,\"175\":8,\"176\":5,\"177\":3,\"178\":2,\"181\":4,\"183\":5,\"184\":7}}],[\"any\",{\"1\":{\"31\":1}}],[\"ask\",{\"1\":{\"169\":1,\"171\":1}}],[\"asks\",{\"1\":{\"169\":1,\"173\":1,\"175\":1,\"183\":1}}],[\"assume\",{\"1\":{\"171\":3}}],[\"assist\",{\"1\":{\"171\":1}}],[\"assign\",{\"1\":{\"132\":1}}],[\"assignment\",{\"1\":{\"110\":1,\"159\":1}}],[\"assert\",{\"1\":{\"31\":1,\"64\":2,\"65\":2,\"66\":2,\"67\":3}}],[\"async\",{\"1\":{\"31\":1}}],[\"as\",{\"0\":{\"175\":2,\"176\":2},\"1\":{\"31\":4,\"169\":2,\"171\":5,\"173\":1,\"175\":1,\"183\":1,\"184\":1}}],[\"austin1\",{\"1\":{\"30\":4}}],[\"austin\",{\"1\":{\"30\":23}}],[\"age\",{\"1\":{\"13\":3,\"49\":2,\"169\":3,\"170\":2}}],[\"a\",{\"0\":{\"175\":2,\"176\":2,\"178\":1,\"180\":1},\"1\":{\"5\":14,\"6\":22,\"7\":4,\"12\":3,\"23\":2,\"24\":2,\"25\":6,\"26\":2,\"28\":2,\"29\":2,\"31\":2,\"32\":4,\"63\":25,\"64\":7,\"67\":1,\"90\":1,\"108\":2,\"110\":1,\"111\":2,\"114\":1,\"115\":2,\"132\":2,\"165\":6,\"169\":2,\"171\":9,\"172\":2,\"173\":2,\"175\":1,\"177\":4,\"178\":1,\"181\":2,\"183\":18,\"184\":3}}],[\"请你编写\",{\"1\":{\"60\":1}}],[\"请给出至少三个例子\",{\"1\":{\"5\":1}}],[\"请给出一个例子\",{\"1\":{\"5\":6}}],[\"请您根据你所学的知识进行回答\",{\"1\":{\"5\":1}}],[\"中括号内用\",{\"1\":{\"126\":1}}],[\"中的关键字\",{\"1\":{\"32\":1}}],[\"中的人大代表\",{\"1\":{\"21\":1}}],[\"中的变量可以是字符串\",{\"1\":{\"7\":1}}],[\"中的变量声明\",{\"1\":{\"5\":1}}],[\"中的哪个函数可以用来获取变量的类型\",{\"1\":{\"6\":1}}],[\"中的注释\",{\"1\":{\"5\":1}}],[\"中进行多个变量同时赋值不同的值\",{\"1\":{\"5\":1}}],[\"中进行多个变量同时赋值相同的值\",{\"1\":{\"5\":1}}],[\"中声明一个变量\",{\"1\":{\"5\":1}}],[\"中\",{\"1\":{\"5\":7,\"6\":4,\"7\":6,\"32\":2}}],[\"在元组中\",{\"1\":{\"158\":1}}],[\"在浅拷贝的代码中\",{\"1\":{\"153\":1}}],[\"在列表的特定位置插入元素\",{\"0\":{\"130\":1}}],[\"在获取用户输入之前提前创建一个叫做string的变量\",{\"1\":{\"115\":1}}],[\"在运行的时候并不能很直观的知道\",{\"1\":{\"114\":1}}],[\"在末尾输出一个\",{\"1\":{\"112\":1}}],[\"在使用len获取字符串长度时\",{\"1\":{\"73\":1}}],[\"在每一行的末尾添加\",{\"1\":{\"72\":1}}],[\"在英文当中也可以这样缩写\",{\"1\":{\"72\":2}}],[\"在程序运行的过程中\",{\"1\":{\"44\":1}}],[\"在python中不同的数据类型不能直接相加\",{\"1\":{\"105\":1}}],[\"在python中\",{\"1\":{\"32\":7}}],[\"在输出的末尾添加指定字符\",{\"1\":{\"6\":1}}],[\"在编写代码中\",{\"1\":{\"5\":1}}],[\"在\",{\"1\":{\"5\":7,\"6\":4,\"7\":6,\"32\":2}}],[\"1ai\",{\"1\":{\"101\":1}}],[\"16\",{\"0\":{\"98\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1,\"152\":1,\"153\":1},\"1\":{\"115\":2}}],[\"14\",{\"0\":{\"96\":1,\"144\":1,\"145\":1,\"146\":1},\"1\":{\"114\":1}}],[\"135\",{\"1\":{\"181\":1,\"182\":1}}],[\"13579\",{\"1\":{\"77\":1}}],[\"132569874\",{\"1\":{\"118\":1}}],[\"13\",{\"0\":{\"95\":1,\"143\":1},\"1\":{\"108\":6,\"114\":1,\"173\":1}}],[\"1方法\",{\"0\":{\"81\":1}}],[\"15\",{\"0\":{\"97\":1,\"147\":1},\"1\":{\"72\":2,\"80\":1,\"81\":1,\"115\":1,\"171\":1,\"172\":1,\"184\":2,\"185\":2}}],[\"190\",{\"1\":{\"105\":3,\"106\":2,\"108\":2}}],[\"19\",{\"0\":{\"101\":1},\"1\":{\"60\":1,\"108\":10,\"115\":1,\"122\":1,\"128\":2,\"160\":1}}],[\"1和8的和\",{\"1\":{\"60\":1}}],[\"180\",{\"1\":{\"108\":2}}],[\"18的反转\",{\"1\":{\"60\":1}}],[\"18\",{\"0\":{\"100\":1},\"1\":{\"60\":1,\"108\":2,\"115\":2,\"122\":1,\"128\":1,\"181\":1,\"182\":1}}],[\"120\",{\"1\":{\"183\":1}}],[\"12\",{\"0\":{\"94\":1,\"142\":1},\"1\":{\"60\":1,\"64\":1,\"65\":1,\"91\":1,\"105\":1,\"110\":1,\"114\":1,\"115\":5,\"184\":1,\"185\":1}}],[\"123456\",{\"1\":{\"94\":1}}],[\"12345678a\",{\"1\":{\"92\":1}}],[\"12345678\",{\"1\":{\"92\":1}}],[\"123abc\",{\"1\":{\"32\":1}}],[\"123\",{\"1\":{\"31\":1,\"32\":1}}],[\"1开始\",{\"1\":{\"41\":1,\"44\":1,\"46\":1}}],[\"1代码示例\",{\"0\":{\"38\":1}}],[\"1~1~1\",{\"1\":{\"26\":1}}],[\"1114\",{\"1\":{\"169\":1,\"170\":2}}],[\"11\",{\"0\":{\"93\":1,\"141\":1},\"1\":{\"21\":1,\"91\":1,\"101\":5,\"105\":1,\"110\":1,\"114\":2,\"173\":1}}],[\"1月\",{\"1\":{\"20\":2}}],[\"174\",{\"1\":{\"171\":1}}],[\"17\",{\"0\":{\"99\":1},\"1\":{\"13\":1,\"49\":2,\"115\":1,\"170\":2,\"173\":1,\"175\":1,\"176\":1,\"180\":1}}],[\"1my\",{\"1\":{\"7\":1}}],[\"109\",{\"1\":{\"171\":1}}],[\"101\",{\"1\":{\"159\":1}}],[\"102\",{\"1\":{\"137\":1}}],[\"103\",{\"1\":{\"132\":1}}],[\"100\",{\"1\":{\"125\":1,\"132\":3,\"174\":2,\"176\":1,\"183\":5}}],[\"10\",{\"0\":{\"92\":1,\"113\":1,\"114\":1,\"115\":1,\"140\":1},\"1\":{\"7\":4,\"10\":2,\"14\":2,\"21\":3,\"60\":8,\"63\":6,\"64\":1,\"75\":1,\"112\":3,\"114\":2,\"115\":2,\"126\":1,\"127\":1,\"132\":14,\"174\":2,\"176\":2}}],[\"1\",{\"0\":{\"5\":1,\"9\":1,\"18\":1,\"19\":2,\"20\":1,\"23\":1,\"28\":1,\"37\":1,\"38\":1,\"40\":1,\"43\":1,\"46\":1,\"49\":1,\"52\":1,\"58\":1,\"64\":1,\"71\":1,\"75\":1,\"79\":1,\"80\":1,\"83\":1,\"106\":1,\"114\":1,\"122\":1,\"124\":1,\"134\":1,\"137\":1,\"145\":1,\"149\":1,\"157\":1,\"189\":1},\"1\":{\"5\":11,\"12\":3,\"21\":4,\"23\":6,\"24\":3,\"25\":15,\"26\":3,\"28\":1,\"29\":1,\"31\":7,\"32\":5,\"38\":6,\"43\":4,\"44\":1,\"46\":9,\"49\":10,\"52\":6,\"53\":11,\"58\":8,\"59\":6,\"62\":3,\"63\":1,\"66\":1,\"75\":3,\"76\":2,\"77\":9,\"79\":2,\"80\":3,\"81\":3,\"88\":2,\"90\":3,\"91\":4,\"101\":2,\"103\":1,\"106\":2,\"110\":1,\"114\":3,\"115\":12,\"118\":1,\"126\":1,\"127\":2,\"128\":9,\"129\":3,\"130\":2,\"132\":25,\"134\":7,\"135\":4,\"137\":2,\"138\":2,\"139\":2,\"140\":2,\"142\":2,\"143\":2,\"145\":3,\"151\":5,\"152\":6,\"153\":2,\"160\":3,\"161\":2,\"162\":2,\"163\":3,\"164\":3,\"165\":6,\"170\":2,\"171\":1,\"172\":1,\"174\":2,\"175\":1,\"176\":1,\"178\":1,\"180\":3,\"181\":2,\"182\":2,\"183\":8}}],[\"player\",{\"1\":{\"183\":3}}],[\"please\",{\"1\":{\"67\":2,\"114\":2,\"129\":4,\"169\":2,\"170\":4,\"171\":1,\"172\":2,\"173\":1,\"174\":2,\"175\":1,\"176\":2,\"178\":2,\"180\":4,\"181\":2,\"182\":4,\"184\":6,\"185\":12}}],[\"pinching\",{\"0\":{\"173\":1,\"174\":1}}],[\"person\",{\"1\":{\"177\":2}}],[\"personalized\",{\"1\":{\"169\":1}}],[\"pennies\",{\"1\":{\"173\":2,\"174\":2,\"175\":2,\"176\":4}}],[\"penny\",{\"0\":{\"173\":1,\"174\":1}}],[\"ps\",{\"1\":{\"76\":1,\"77\":2}}],[\"py\",{\"1\":{\"72\":2,\"91\":1,\"105\":1,\"110\":1,\"132\":1,\"137\":1,\"159\":1,\"181\":1}}],[\"pycharmprojects\",{\"1\":{\"91\":1,\"105\":1,\"110\":1,\"132\":1,\"137\":1,\"159\":1}}],[\"pycharm\",{\"1\":{\"72\":2}}],[\"pythonproject\",{\"1\":{\"91\":1,\"105\":1,\"110\":1,\"132\":1,\"137\":1,\"159\":1}}],[\"python所拥有的数据类型\",{\"1\":{\"50\":1}}],[\"python中变量的类型是静态的\",{\"1\":{\"32\":1}}],[\"python中的变量名区别大小写\",{\"1\":{\"31\":1}}],[\"python\",{\"0\":{\"70\":1,\"118\":1,\"121\":1,\"156\":1,\"168\":1},\"1\":{\"5\":12,\"6\":6,\"7\":9,\"31\":1,\"32\":3,\"44\":1,\"60\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"72\":2,\"91\":1,\"105\":1,\"110\":1,\"132\":1,\"137\":1,\"149\":1,\"159\":1},\"2\":{\"15\":1,\"16\":1,\"33\":1,\"34\":1,\"55\":1,\"56\":1,\"68\":1,\"69\":1,\"116\":1,\"117\":1,\"119\":1,\"120\":1,\"154\":1,\"155\":1,\"166\":1,\"167\":1,\"186\":1,\"187\":1}}],[\"page\",{\"1\":{\"171\":1}}],[\"part\",{\"0\":{\"178\":1,\"180\":1,\"181\":1,\"182\":1},\"1\":{\"169\":1,\"181\":2}}],[\"paragraph\",{\"1\":{\"72\":1,\"73\":2}}],[\"pass\",{\"1\":{\"31\":1}}],[\"p\",{\"1\":{\"67\":10}}],[\"possibility\",{\"1\":{\"183\":2}}],[\"position\",{\"1\":{\"118\":3,\"129\":5}}],[\"pound\",{\"1\":{\"181\":1}}],[\"pounds\",{\"1\":{\"181\":2,\"182\":2}}],[\"power\",{\"1\":{\"66\":3}}],[\"point\",{\"1\":{\"7\":2}}],[\"population\",{\"1\":{\"171\":6,\"172\":4}}],[\"pop\",{\"0\":{\"138\":1},\"1\":{\"1\":1,\"138\":3}}],[\"pretend\",{\"1\":{\"183\":1}}],[\"prompts\",{\"1\":{\"178\":1,\"181\":1}}],[\"providing\",{\"1\":{\"171\":1}}],[\"provided\",{\"1\":{\"171\":1}}],[\"provides\",{\"1\":{\"171\":1}}],[\"program\",{\"1\":{\"169\":1,\"171\":1,\"173\":2,\"175\":3,\"178\":1,\"181\":1,\"183\":1,\"184\":1}}],[\"product\",{\"1\":{\"65\":3}}],[\"prints\",{\"1\":{\"169\":1,\"171\":1,\"184\":1}}],[\"print\",{\"1\":{\"5\":10,\"6\":16,\"7\":5,\"9\":2,\"10\":3,\"11\":2,\"12\":2,\"13\":2,\"14\":4,\"21\":3,\"23\":2,\"24\":1,\"25\":9,\"26\":1,\"28\":1,\"29\":1,\"30\":12,\"31\":4,\"32\":2,\"38\":6,\"40\":3,\"43\":3,\"46\":3,\"49\":3,\"52\":3,\"53\":2,\"54\":2,\"60\":2,\"62\":6,\"64\":2,\"65\":2,\"66\":2,\"67\":3,\"72\":5,\"73\":1,\"75\":2,\"76\":3,\"77\":6,\"79\":1,\"80\":2,\"81\":2,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":2,\"88\":2,\"89\":2,\"90\":3,\"91\":2,\"92\":2,\"93\":2,\"94\":3,\"95\":3,\"96\":3,\"97\":3,\"98\":4,\"99\":6,\"100\":6,\"101\":6,\"102\":6,\"103\":6,\"104\":2,\"105\":4,\"106\":13,\"107\":2,\"108\":12,\"110\":1,\"111\":6,\"112\":5,\"114\":4,\"118\":1,\"122\":1,\"125\":2,\"126\":1,\"127\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":12,\"134\":3,\"135\":1,\"137\":3,\"138\":2,\"139\":1,\"140\":1,\"142\":1,\"143\":1,\"145\":2,\"147\":1,\"149\":2,\"150\":2,\"151\":3,\"152\":3,\"153\":3,\"157\":1,\"160\":4,\"161\":2,\"162\":1,\"163\":1,\"164\":2,\"165\":7,\"169\":1,\"170\":1,\"172\":1,\"174\":2,\"175\":1,\"176\":2,\"180\":1,\"182\":1,\"183\":2,\"185\":1}}],[\"practice\",{\"0\":{\"4\":1,\"30\":1},\"2\":{\"15\":1,\"16\":1,\"186\":1,\"187\":1}}],[\"个人简介\",{\"2\":{\"2\":1}}],[\"那么元素本身的类型\",{\"1\":{\"161\":1}}],[\"那么index\",{\"1\":{\"91\":1}}],[\"那么find\",{\"1\":{\"90\":1}}],[\"那么三引号呢\",{\"1\":{\"72\":1}}],[\"那么你的代码应当输出两个数字\",{\"1\":{\"60\":3}}],[\"那么你想存放两个的时候\",{\"1\":{\"47\":1}}],[\"那么就不需要一个多余的\",{\"1\":{\"47\":1}}],[\"那么肯定选用元组更合适\",{\"1\":{\"47\":1}}],[\"那么则用列表更合适\",{\"1\":{\"47\":1}}],[\"那么信封\",{\"1\":{\"20\":1}}],[\"那么\",{\"1\":{\"7\":1,\"20\":1,\"23\":1,\"47\":1,\"165\":1}}],[\"那就先说这么多吧\",{\"1\":{\"1\":1}}],[\"那我们呢\",{\"1\":{\"1\":1}}],[\"材料学和流体力学\",{\"1\":{\"1\":1}}],[\"机械学\",{\"1\":{\"1\":1}}],[\"电路分析\",{\"1\":{\"1\":1}}],[\"主修电磁学\",{\"1\":{\"1\":1}}],[\"know\",{\"1\":{\"183\":1}}],[\"kilograms\",{\"1\":{\"178\":1,\"180\":2,\"181\":1}}],[\"key\",{\"1\":{\"50\":1,\"132\":1}}],[\"key2\",{\"1\":{\"50\":1}}],[\"key1\",{\"1\":{\"50\":1}}],[\"keyword\",{\"1\":{\"31\":1}}],[\"keywords\",{\"1\":{\"31\":2}}],[\"k\",{\"1\":{\"1\":1}}],[\"跳舞\",{\"1\":{\"1\":1}}],[\"蝶梦\",{\"1\":{\"1\":1}}],[\"综上\",{\"1\":{\"1\":1}}],[\"我代表的是广大人民群众的意志\",{\"1\":{\"21\":1}}],[\"我可以使用\",{\"1\":{\"7\":1}}],[\"我可以通过编写\",{\"1\":{\"7\":1}}],[\"我可以通过在打印语句中添加\",{\"1\":{\"7\":1}}],[\"我们常规在数学计算中括号是在运算的时候用来保证优先级和在适当的情况下\",{\"1\":{\"161\":1}}],[\"我们可知\",{\"1\":{\"161\":1}}],[\"我们可以知道\",{\"1\":{\"114\":1}}],[\"我们可以修改这个默认空格间隔么\",{\"1\":{\"23\":1}}],[\"我们可以将一个变量的值分配给另一个变量\",{\"1\":{\"7\":1}}],[\"我们可以使用\",{\"1\":{\"7\":2}}],[\"我们可以通过\",{\"1\":{\"7\":1}}],[\"我们上面说了列表的深浅拷贝\",{\"1\":{\"153\":1}}],[\"我们更希望有类似模版\",{\"1\":{\"105\":1}}],[\"我们使用三引号测试\",{\"1\":{\"72\":1}}],[\"我们如何在\",{\"1\":{\"72\":1}}],[\"我们如何改变\",{\"1\":{\"5\":1}}],[\"我们有时候不仅仅要看选择项以内的答案\",{\"1\":{\"72\":7}}],[\"我们需要通过以下规则产生两个新的数字\",{\"1\":{\"60\":1}}],[\"我们需要设立一个专门的人员跟踪\",{\"1\":{\"47\":1}}],[\"我们也不能说集合是有序的\",{\"1\":{\"53\":1}}],[\"我们讲究\",{\"1\":{\"47\":1}}],[\"我们是不是需要有一个类似仓库管理员的\",{\"1\":{\"47\":1}}],[\"我们是否能分清现实和梦境呢\",{\"1\":{\"1\":1}}],[\"我们叫它什么名字\",{\"1\":{\"21\":1}}],[\"我们为什么不一开始直接为每一个学生分配一个信封呢\",{\"1\":{\"20\":1}}],[\"我们应该把刘奕彤\",{\"1\":{\"20\":1}}],[\"我们怎么样才能让计算机\",{\"1\":{\"5\":1}}],[\"我喜欢读小说\",{\"1\":{\"1\":1}}],[\"我给自己起了一个富有浪漫主义色彩的笔名\",{\"1\":{\"1\":1}}],[\"我是王若伊晗\",{\"1\":{\"1\":1}}],[\"庄周梦见自己便成了蝴蝶\",{\"1\":{\"1\":1}}],[\"庄生晓梦迷蝴蝶\",{\"1\":{\"1\":1}}],[\"望帝春心托杜鹃\",{\"1\":{\"1\":1}}],[\"咳咳\",{\"1\":{\"1\":1}}],[\"介绍页\",{\"0\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
